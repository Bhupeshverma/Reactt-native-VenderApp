["3a57ad6244d5d56b7d3114a4265bbb0d095c1f6c","17a8ed8f46cf6eafef088a7f4034fc18d7a56b75",[],[],{"version":3,"sources":["/home/ziddi/Desktop/venders/node_modules/react-native-gesture-responder/library/TouchHistoryMath.js"],"names":["TouchHistoryMath","centroidDimension","touchHistory","touchesChangedAfter","isXAxis","ofCurrent","touchBank","total","count","oneTouchData","numberActiveTouches","indexOfSingleActiveTouch","touchActive","currentTimeStamp","currentPageX","currentPageY","previousPageX","previousPageY","i","length","touchTrack","undefined","toAdd","noCentroid","currentCentroidXOfTouchesChangedAfter","currentCentroidYOfTouchesChangedAfter","previousCentroidXOfTouchesChangedAfter","previousCentroidYOfTouchesChangedAfter","currentCentroidX","currentCentroidY","module","exports"],"mappings":"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","sourcesContent":["/**\n * @providesModule TouchHistoryMath\n */\n\n'use strict';\n\nvar TouchHistoryMath = {\n  /**\n   * This code is optimized and not intended to look beautiful. This allows\n   * computing of touch centroids that have moved after `touchesChangedAfter`\n   * timeStamp. You can compute the current centroid involving all touches\n   * moves after `touchesChangedAfter`, or you can compute the previous\n   * centroid of all touches that were moved after `touchesChangedAfter`.\n   *\n   * @param {TouchHistoryMath} touchHistory Standard Responder touch track\n   * data.\n   * @param {number} touchesChangedAfter timeStamp after which moved touches\n   * are considered \"actively moving\" - not just \"active\".\n   * @param {boolean} isXAxis Consider `x` dimension vs. `y` dimension.\n   * @param {boolean} ofCurrent Compute current centroid for actively moving\n   * touches vs. previous centroid of now actively moving touches.\n   * @return {number} value of centroid in specified dimension.\n   */\n  centroidDimension: function (touchHistory, touchesChangedAfter, isXAxis, ofCurrent) {\n    var touchBank = touchHistory.touchBank;\n    var total = 0;\n    var count = 0;\n\n    var oneTouchData = touchHistory.numberActiveTouches === 1 ? touchHistory.touchBank[touchHistory.indexOfSingleActiveTouch] : null;\n\n    if (oneTouchData !== null) {\n      if (oneTouchData.touchActive && oneTouchData.currentTimeStamp > touchesChangedAfter) {\n        total += ofCurrent && isXAxis ? oneTouchData.currentPageX : ofCurrent && !isXAxis ? oneTouchData.currentPageY : !ofCurrent && isXAxis ? oneTouchData.previousPageX : oneTouchData.previousPageY;\n        count = 1;\n      }\n    } else {\n      for (var i = 0; i < touchBank.length; i++) {\n        var touchTrack = touchBank[i];\n        if (touchTrack !== null && touchTrack !== undefined && touchTrack.touchActive && touchTrack.currentTimeStamp >= touchesChangedAfter) {\n          var toAdd; // Yuck, program temporarily in invalid state.\n          if (ofCurrent && isXAxis) {\n            toAdd = touchTrack.currentPageX;\n          } else if (ofCurrent && !isXAxis) {\n            toAdd = touchTrack.currentPageY;\n          } else if (!ofCurrent && isXAxis) {\n            toAdd = touchTrack.previousPageX;\n          } else {\n            toAdd = touchTrack.previousPageY;\n          }\n          total += toAdd;\n          count++;\n        }\n      }\n    }\n    return count > 0 ? total / count : TouchHistoryMath.noCentroid;\n  },\n\n  currentCentroidXOfTouchesChangedAfter: function (touchHistory, touchesChangedAfter) {\n    return TouchHistoryMath.centroidDimension(touchHistory, touchesChangedAfter, true, // isXAxis\n    true // ofCurrent\n    );\n  },\n\n  currentCentroidYOfTouchesChangedAfter: function (touchHistory, touchesChangedAfter) {\n    return TouchHistoryMath.centroidDimension(touchHistory, touchesChangedAfter, false, // isXAxis\n    true // ofCurrent\n    );\n  },\n\n  previousCentroidXOfTouchesChangedAfter: function (touchHistory, touchesChangedAfter) {\n    return TouchHistoryMath.centroidDimension(touchHistory, touchesChangedAfter, true, // isXAxis\n    false // ofCurrent\n    );\n  },\n\n  previousCentroidYOfTouchesChangedAfter: function (touchHistory, touchesChangedAfter) {\n    return TouchHistoryMath.centroidDimension(touchHistory, touchesChangedAfter, false, // isXAxis\n    false // ofCurrent\n    );\n  },\n\n  currentCentroidX: function (touchHistory) {\n    return TouchHistoryMath.centroidDimension(touchHistory, 0, // touchesChangedAfter\n    true, // isXAxis\n    true // ofCurrent\n    );\n  },\n\n  currentCentroidY: function (touchHistory) {\n    return TouchHistoryMath.centroidDimension(touchHistory, 0, // touchesChangedAfter\n    false, // isXAxis\n    true // ofCurrent\n    );\n  },\n\n  noCentroid: -1\n};\n\nmodule.exports = TouchHistoryMath;"]}]