["fd08e661dd7173522c2a1aaed0af07822bc0b9f3","6815a153c8f69ec45730dd4b72a0dfd3c1632538",["react","hoist-non-react-statics","lodash","./StyleNormalizer/normalizeStyle","./Theme","./resolveComponentStyle"],[87,193,333,430,566,675],{"version":3,"sources":["/home/ziddi/Desktop/venders/node_modules/@shoutem/theme/src/connectStyle.js"],"names":["_","throwConnectStyleError","errorMessage","componentDisplayName","Error","getTheme","context","theme","getDefaultTheme","componentStyleName","componentStyle","mapPropsToStyleNames","options","getComponentDisplayName","WrappedComponent","displayName","name","getBaseComponent","BaseComponent","wrapWithStyledComponent","isPlainObject","isString","StyledComponent","props","styleNames","resolveStyleNames","resolvedStyle","resolveStyle","setWrappedInstance","bind","transformProps","state","style","childrenStyle","addedProps","resolveAddedProps","parentStyle","virtual","nextProps","nextContext","shouldRebuildStyle","setState","nativeProps","isRefDefined","console","warn","wrappedInstance","setNativeProps","component","isEqual","styleName","hasStyleNameChanged","split","uniq","prototype","render","withRef","ref","themeStyle","createComponentStyle","PureComponent","contextTypes","object","func","childContextTypes","propTypes","string","bool","defaultProps"],"mappings":"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","sourcesContent":["import React, { PropTypes } from 'react';\nimport hoistStatics from 'hoist-non-react-statics';\nimport * as _ from 'lodash';\nimport normalizeStyle from './StyleNormalizer/normalizeStyle';\n\nimport Theme, { ThemeShape } from './Theme';\nimport { resolveComponentStyle } from './resolveComponentStyle';\n\n// TODO - remove withRef warning in next version\n\n/**\n * Formats and throws an error when connecting component style with the theme.\n *\n * @param errorMessage The error message.\n * @param componentDisplayName The name of the component that is being connected.\n */\nfunction throwConnectStyleError(errorMessage, componentDisplayName) {\n  throw Error(`${errorMessage} - when connecting ${componentDisplayName} component to style.`);\n}\n\n/**\n * Returns the theme object from the provided context,\n * or an empty theme if the context doesn't contain a theme.\n *\n * @param context The React component context.\n * @returns {Theme} The Theme object.\n */\nfunction getTheme(context) {\n  // Fallback to a default theme if the component isn't\n  // rendered in a StyleProvider.\n  return context.theme || Theme.getDefaultTheme();\n}\n\n/**\n * Resolves the final component style by using the theme style, if available and\n * merging it with the style provided directly through the style prop, and style\n * variants applied through the styleName prop.\n *\n * @param componentStyleName The component name that will be used\n * to target this component in style rules.\n * @param componentStyle The default component style.\n * @param mapPropsToStyleNames Pure function to customize styleNames depending on props.\n * @param options The additional connectStyle options\n * @param options.virtual The default value of the virtual prop\n * @returns {StyledComponent} The new component that will handle\n * the styling of the wrapped component.\n */\nexport default (componentStyleName, componentStyle = {}, mapPropsToStyleNames, options = {}) => {\n  function getComponentDisplayName(WrappedComponent) {\n    return WrappedComponent.displayName || WrappedComponent.name || 'Component';\n  }\n\n  function getBaseComponent(WrappedComponent) {\n    if (WrappedComponent.BaseComponent) {\n      return WrappedComponent.BaseComponent;\n    }\n    return WrappedComponent;\n  }\n\n  return function wrapWithStyledComponent(WrappedComponent) {\n    const componentDisplayName = getComponentDisplayName(WrappedComponent);\n\n    if (!_.isPlainObject(componentStyle)) {\n      throwConnectStyleError(\n        'Component style must be plain object',\n        componentDisplayName\n      );\n    }\n\n    if (!_.isString(componentStyleName)) {\n      throwConnectStyleError(\n        'Component Style Name must be string',\n        componentDisplayName\n      );\n    }\n\n    class StyledComponent extends React.PureComponent {\n      static contextTypes = {\n        theme: ThemeShape,\n        // The style inherited from the parent\n        parentStyle: PropTypes.object,\n        transformProps: PropTypes.func,\n      };\n\n      static childContextTypes = {\n        // Provide the parent style to child components\n        parentStyle: PropTypes.object,\n        transformProps: PropTypes.func,\n      };\n\n      static propTypes = {\n        // Element style that overrides any other style of the component\n        style: PropTypes.object,\n        // The style variant names to apply to this component,\n        // multiple variants may be separated with a space character\n        styleName: PropTypes.string,\n        // Virtual elements will propagate the parent\n        // style to their children, i.e., the children\n        // will behave as they are placed directly below\n        // the parent of a virtual element.\n        virtual: PropTypes.bool,\n      };\n\n      static defaultProps = {\n        virtual: options.virtual,\n      };\n\n      static displayName = `Styled(${componentDisplayName})`;\n      static WrappedComponent = WrappedComponent;\n      static BaseComponent = getBaseComponent(WrappedComponent);\n\n      constructor(props, context) {\n        super(props, context);\n        const styleNames = this.resolveStyleNames(props);\n        const resolvedStyle = this.resolveStyle(context, props, styleNames);\n        this.setWrappedInstance = this.setWrappedInstance.bind(this);\n        this.transformProps = this.transformProps.bind(this);\n\n        this.state = {\n          style: resolvedStyle.componentStyle,\n          childrenStyle: resolvedStyle.childrenStyle,\n          // AddedProps are additional WrappedComponent props\n          // Usually they are set through alternative ways,\n          // such as theme style, or through options\n          addedProps: this.resolveAddedProps(),\n          styleNames,\n        };\n      }\n\n      getChildContext() {\n        return {\n          parentStyle: this.props.virtual ?\n            this.context.parentStyle :\n            this.state.childrenStyle,\n          transformProps: this.transformProps,\n        };\n      }\n\n      componentWillReceiveProps(nextProps, nextContext) {\n        const styleNames = this.resolveStyleNames(nextProps);\n        if (this.shouldRebuildStyle(nextProps, nextContext, styleNames)) {\n          const resolvedStyle = this.resolveStyle(nextContext, nextProps, styleNames);\n\n          this.setState({\n            style: resolvedStyle.componentStyle,\n            childrenStyle: resolvedStyle.childrenStyle,\n            styleNames,\n          });\n        }\n      }\n\n      setNativeProps(nativeProps) {\n        if (!this.isRefDefined()) {\n          console.warn('setNativeProps can\\'nt be used on stateless components');\n          return;\n        }\n        if (this.wrappedInstance.setNativeProps) {\n          this.wrappedInstance.setNativeProps(nativeProps);\n        }\n      }\n\n      setWrappedInstance(component) {\n        this.wrappedInstance = component;\n      }\n\n      hasStyleNameChanged(nextProps, styleNames) {\n        return mapPropsToStyleNames && this.props !== nextProps &&\n          // Even though props did change here,\n          // it doesn't necessary means changed props are those which affect styleName\n          !_.isEqual(this.state.styleNames, styleNames);\n      }\n\n      shouldRebuildStyle(nextProps, nextContext, styleNames) {\n        return (nextProps.style !== this.props.style) ||\n          (nextProps.styleName !== this.props.styleName) ||\n          (nextContext.theme !== this.context.theme) ||\n          (nextContext.parentStyle !== this.context.parentStyle) ||\n          (this.hasStyleNameChanged(nextProps, styleNames));\n      }\n\n      resolveStyleNames(props) {\n        const { styleName } = props;\n        const styleNames = styleName ? styleName.split(/\\s/g) : [];\n\n        if (!mapPropsToStyleNames) {\n          return styleNames;\n        }\n\n        // We only want to keep the unique style names\n        return _.uniq(mapPropsToStyleNames(styleNames, props));\n      }\n\n      isRefDefined() {\n        // Define refs on all stateful containers\n        return WrappedComponent.prototype.render;\n      }\n\n      resolveAddedProps() {\n        const addedProps = {};\n        if (options.withRef) {\n          console.warn('withRef is deprecated');\n        }\n        if (this.isRefDefined()) {\n          addedProps.ref = this.setWrappedInstance;\n        }\n        return addedProps;\n      }\n\n      resolveStyle(context, props, styleNames) {\n        const { parentStyle } = context;\n        const style = normalizeStyle(props.style);\n\n        const theme = getTheme(context);\n        const themeStyle = theme.createComponentStyle(componentStyleName, componentStyle);\n\n        return resolveComponentStyle(\n          componentStyleName,\n          styleNames,\n          themeStyle,\n          parentStyle,\n          style\n        );\n      }\n\n      /**\n       * A helper function provided to child components that enables\n       * them to get the prop transformations that this component performs.\n       *\n       * @param props The component props to transform.\n       * @returns {*} The transformed props.\n       */\n      transformProps(props) {\n        const styleNames = this.resolveStyleNames(props);\n        return {\n          ...props,\n          style: this.resolveStyle(\n            this.context,\n            props,\n            styleNames\n          ).componentStyle,\n        };\n      }\n\n      render() {\n        const { addedProps, style } = this.state;\n        return (\n          <WrappedComponent\n            {...this.props}\n            {...addedProps}\n            style={style}\n          />);\n      }\n    }\n\n    return hoistStatics(StyledComponent, WrappedComponent);\n  };\n};\n"]}]