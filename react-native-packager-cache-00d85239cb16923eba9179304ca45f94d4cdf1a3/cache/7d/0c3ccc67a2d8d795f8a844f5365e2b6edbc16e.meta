["d9d27382381a673f132de4058746499540773c5e","3c3d6ed34f21ac7e0a0cb0832102fc73163e194b",["qs"],[113],{"version":3,"sources":["/home/ziddi/Desktop/venders/node_modules/@shoutem/ui/components/Video/VideoSourceReader.js"],"names":["getYouTubeVideoId","url","regExp","match","length","getVimeoVideoId","getYouTubeEmbedUrl","id","playerParams","serializedParams","getVimeoEmbedUrl","VideoSourceReader","source","isYouTube","isVimeo"],"mappings":";;;;;AAAA;;AAEA,SAASA,iBAAT,CAA2BC,GAA3B,EAAgC;AAC9B,MAAMC,SAAS,0EAAf;AACA,MAAMC,QAAQF,IAAIE,KAAJ,CAAUD,MAAV,CAAd;;AAEA,MAAIC,SAASA,MAAM,CAAN,EAASC,MAAT,KAAoB,EAAjC,EAAqC;AACnC,WAAOD,MAAM,CAAN,CAAP;AACD;;AAED,SAAO,KAAP;AACD;;AAED,SAASE,eAAT,CAAyBJ,GAAzB,EAA8B;AAG5B,MAAMC,SAAS,sIAAf;AACA,MAAMC,QAAQF,IAAIE,KAAJ,CAAUD,MAAV,CAAd;;AAEA,MAAIC,SAASA,MAAM,CAAN,CAAb,EAAuB;AACrB,WAAOA,MAAM,CAAN,CAAP;AACD;;AAED,SAAO,KAAP;AACD;;AAED,SAASG,kBAAT,CAA4BC,EAA5B,EAAgCC,YAAhC,EAA8C;AAC5C,MAAMC,mBAAmB,mBAAUD,YAAV,CAAzB;AACA,4CAAwCD,EAAxC,SAA8CE,gBAA9C;AACD;;AAED,SAASC,gBAAT,CAA0BH,EAA1B,EAA8B;AAC5B,6CAAyCA,EAAzC;AACD;;IAOoBI,iB;AACnB,6BAAYC,MAAZ,EAAoBJ,YAApB,EAAkC;AAAA;;AAChC,SAAKI,MAAL,GAAcA,MAAd;AACA,SAAKJ,YAAL,GAAoBA,YAApB;AACA,SAAKK,SAAL,GAAiB,CAAC,CAACb,kBAAkBY,MAAlB,CAAnB;AACA,SAAKE,OAAL,GAAe,CAAC,CAACT,gBAAgBO,MAAhB,CAAjB;AACD;;;;wCAEmB;AAClB,aAAO,KAAKC,SAAL,IAAkB,KAAKC,OAA9B;AACD;;;6BAEQ;AACP,UAAI,KAAKD,SAAT,EAAoB;AAClB,eAAOP,mBAAmBN,kBAAkB,KAAKY,MAAvB,CAAnB,EAAmD,KAAKJ,YAAxD,CAAP;AACD,OAFD,MAEO,IAAI,KAAKM,OAAT,EAAkB;AACvB,eAAOJ,iBAAiBL,gBAAgB,KAAKO,MAArB,CAAjB,CAAP;AACD;;AAED,aAAO,KAAKA,MAAZ;AACD;;;;;kBApBkBD,iB","sourcesContent":["import { stringify } from 'qs';\n\nfunction getYouTubeVideoId(url) {\n  const regExp = /^.*((youtu.be\\/)|(v\\/)|(\\/u\\/\\w\\/)|(embed\\/)|(watch\\??v?=?))([^#&\\?]*).*/;\n  const match = url.match(regExp);\n\n  if (match && match[7].length === 11) {\n    return match[7];\n  }\n\n  return false;\n}\n\nfunction getVimeoVideoId(url) {\n  // TODO(Vladimir) - find a shorter regex that covers all of our usecases, remove eslint-disable\n  // The eslint line length rule is disabled so we can use our old battle-tested regex for vimeo\n  const regExp = /https?:\\/\\/(?:[\\w]+\\.)?vimeo.com\\/(?:channels\\/(?:\\w+\\/)?|groups\\/([^\\/]*)\\/videos\\/|album\\/(\\d+)\\/video\\/|video\\/|)(\\d+)(?:$|\\/|\\?)/; // eslint-disable-line max-len\n  const match = url.match(regExp);\n\n  if (match && match[3]) {\n    return match[3];\n  }\n\n  return false;\n}\n\nfunction getYouTubeEmbedUrl(id, playerParams) {\n  const serializedParams = stringify(playerParams);\n  return `https://www.youtube.com/embed/${id}?${serializedParams}`;\n}\n\nfunction getVimeoEmbedUrl(id) {\n  return `https://player.vimeo.com/video/${id}?title=0&byline=0&portrait=0`;\n}\n\n/**\n * Reads the video source and provides the video\n * url in embedded form if necessary\n */\n\nexport default class VideoSourceReader {\n  constructor(source, playerParams) {\n    this.source = source;\n    this.playerParams = playerParams;\n    this.isYouTube = !!getYouTubeVideoId(source);\n    this.isVimeo = !!getVimeoVideoId(source);\n  }\n\n  isEmbeddableVideo() {\n    return this.isYouTube || this.isVimeo;\n  }\n\n  getUrl() {\n    if (this.isYouTube) {\n      return getYouTubeEmbedUrl(getYouTubeVideoId(this.source), this.playerParams);\n    } else if (this.isVimeo) {\n      return getVimeoEmbedUrl(getVimeoVideoId(this.source));\n    }\n\n    return this.source;\n  }\n}\n"]}]