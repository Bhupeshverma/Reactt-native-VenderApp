["33a7d0affa5b9c952ea4f9426be14fcdab3a2e96","d96e2edf431938a87af04602494b6b31c7c56101",["react","prop-types","react-native"],[136,231,341],{"version":3,"sources":["/home/ziddi/Desktop/venders/node_modules/react-native-loading-spinner-overlay/src/index.js"],"names":["styles","create","container","flex","backgroundColor","position","top","bottom","left","right","background","justifyContent","alignItems","textContainer","textContent","height","fontSize","fontWeight","ANIMATION","SIZES","Spinner","props","state","visible","setState","nextProps","cancelable","close","color","size","textStyle","spinner","overlayColor","Date","now","children","_renderDefaultContent","animation","_handleOnRequestClose","_renderSpinner","Component","propTypes","bool","string","oneOf","defaultProps"],"mappings":"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","sourcesContent":["\n//     react-native-loading-spinner-overlay\n//     Copyright (c) 2016- Nick Baugh <niftylettuce@gmail.com>\n//     MIT Licensed\n\n// * Author: [@niftylettuce](https://twitter.com/#!/niftylettuce)\n// * Source:\n// <https://github.com/niftylettuce/react-native-loading-spinner-overlay>\n\n// # react-native-loading-spinner-overlay\n//\n// <https://github.com/facebook/react-native/issues/2501>\n// <https://rnplay.org/apps/1YkBCQ>\n// <https://github.com/facebook/react-native/issues/2501>\n// <https://github.com/brentvatne/react-native-overlay>\n//\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport {\n  StyleSheet,\n  View,\n  Text,\n  Modal,\n  ActivityIndicator\n} from 'react-native';\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: 'transparent',\n    position: 'absolute',\n    top: 0,\n    bottom: 0,\n    left: 0,\n    right: 0\n  },\n  background: {\n    position: 'absolute',\n    top: 0,\n    bottom: 0,\n    left: 0,\n    right: 0,\n    justifyContent: 'center',\n    alignItems: 'center'\n  },\n  textContainer: {\n    flex: 1,\n    top: 0,\n    bottom: 0,\n    left: 0,\n    right: 0,\n    justifyContent: 'center',\n    alignItems: 'center',\n    position: 'absolute'\n  },\n  textContent: {\n    top: 80,\n    height: 50,\n    fontSize: 20,\n    fontWeight: 'bold'\n  }\n});\n\nconst ANIMATION = ['none', 'slide', 'fade'];\nconst SIZES = ['small', 'normal', 'large'];\n\nexport default class Spinner extends React.Component {\n\n  constructor(props) {\n    super(props);\n    this.state = { visible: this.props.visible, textContent: this.props.textContent };\n  }\n\n  static propTypes = {\n    visible: PropTypes.bool,\n    cancelable: PropTypes.bool,\n    textContent: PropTypes.string,\n    animation: PropTypes.oneOf(ANIMATION),\n    color: PropTypes.string,\n    size: PropTypes.oneOf(SIZES),\n    overlayColor: PropTypes.string\n  };\n\n  static defaultProps = {\n    visible: false,\n    cancelable: false,\n    textContent: '',\n    animation: 'none',\n    color: 'white',\n    size: 'large', // 'normal',\n    overlayColor: 'rgba(0, 0, 0, 0.25)'\n  };\n\n  close() {\n    this.setState({ visible: false });\n  }\n\n  componentWillReceiveProps(nextProps) {\n    const { visible, textContent } = nextProps;\n    this.setState({ visible, textContent });\n  }\n\n  _handleOnRequestClose() {\n    if (this.props.cancelable) {\n      this.close();\n    }\n  }\n\n  _renderDefaultContent() {\n    return (\n      <View style={styles.background}>\n        <ActivityIndicator\n          color={this.props.color}\n          size={this.props.size}\n          style={{ flex: 1 }}\n        />\n        <View style={styles.textContainer}>\n          <Text style={[styles.textContent, this.props.textStyle]}>{this.state.textContent}</Text>\n        </View>\n      </View>);\n  }\n\n  _renderSpinner() {\n    const { visible } = this.state;\n\n    if (!visible)\n      return null;\n\n    const spinner = (\n      <View style={[\n        styles.container,\n        { backgroundColor: this.props.overlayColor }\n      ]} key={`spinner_${Date.now()}`}>\n        {this.props.children ? this.props.children : this._renderDefaultContent()}\n      </View>\n    );\n\n    return (\n      <Modal\n        animationType={this.props.animation}\n        onRequestClose={() => this._handleOnRequestClose()}\n        supportedOrientations={['landscape', 'portrait']}\n        transparent\n        visible={visible}>\n        {spinner}\n      </Modal>\n    );\n\n  }\n\n  render() {\n    return this._renderSpinner();\n  }\n\n}\n"]}]