["9c0968122cfaf7391ee63bf5a65342144db77e7e","fa162458ca6a53ca3fb7b4ad12c8067cdeb8a1dd",["react","react-native","./createNavigator","../createNavigationContainer","../routers/TabRouter","../views/TabView/TabView","../views/TabView/TabBarTop","../views/TabView/TabBarBottom","./NavigatorTypes"],[87,184,233,376,534,650,768,895,1033],{"version":3,"sources":["/home/ziddi/Desktop/venders/node_modules/react-navigation/src/navigators/TabNavigator.js"],"names":["TabNavigator","routeConfigs","config","mergedConfig","Presets","Default","tabBarComponent","tabBarPosition","tabBarOptions","swipeEnabled","animationEnabled","lazy","tabsConfig","router","navigator","STACK","props","containerOptions","iOSBottomTabs","AndroidTopTabs","OS"],"mappings":";;;;AAEA;;;;AACA;;AAEA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AAEA;;;;AAcA,IAAMA,eAAe,SAAfA,YAAe,CACnBC,YADmB,EAGhB;AAAA,MADHC,MACG,uEAD0B,EAC1B;;AAEH,MAAMC,wCAAoBH,aAAaI,OAAb,CAAqBC,OAAzC,EAAqDH,MAArD,CAAN;AAFG,MAIDI,eAJC,GAWCH,YAXD,CAIDG,eAJC;AAAA,MAKDC,cALC,GAWCJ,YAXD,CAKDI,cALC;AAAA,MAMDC,aANC,GAWCL,YAXD,CAMDK,aANC;AAAA,MAODC,YAPC,GAWCN,YAXD,CAODM,YAPC;AAAA,MAQDC,gBARC,GAWCP,YAXD,CAQDO,gBARC;AAAA,MASDC,IATC,GAWCR,YAXD,CASDQ,IATC;AAAA,MAUEC,UAVF,wCAWCT,YAXD;;;AAaH,MAAMU,SAAS,yBAAUZ,YAAV,EAAwBW,UAAxB,CAAf;;AAEA,MAAME,YAAY,+BAChBD,MADgB,EAEhBZ,YAFgB,EAGhBC,MAHgB,EAIhB,yBAAea,KAJC,EAKhB,UAACC,KAAD;AAAA,WACA,0EACMA,KADN;AAEE,uBAAiBV,eAFnB;AAGE,sBAAgBC,cAHlB;AAIE,qBAAeC,aAJjB;AAKE,oBAAcC,YALhB;AAME,wBAAkBC,gBANpB;AAOE,YAAMC;AAPR,OADA;AAAA,GALgB,CAAlB;;AAiBA,SAAO,yCAA0BG,SAA1B,EAAqCF,WAAWK,gBAAhD,CAAP;AACD,CApCD;;AAsCA,IAAMb,UAAU;AACdc,iBAAe;AACbZ,2CADa;AAEbC,oBAAgB,QAFH;AAGbE,kBAAc,KAHD;AAIbC,sBAAkB,KAJL;AAKbC,UAAM;AALO,GADD;AAQdQ,kBAAgB;AACdb,wCADc;AAEdC,oBAAgB,KAFF;AAGdE,kBAAc,IAHA;AAIdC,sBAAkB,IAJJ;AAKdC,UAAM;AALQ;AARF,CAAhB;;AAmCAX,aAAaI,OAAb,GAAuB;AACrBc,iBAAed,QAAQc,aADF;AAErBC,kBAAgBf,QAAQe,cAFH;AAGrBd,WAAS,sBAASe,EAAT,KAAgB,KAAhB,GACLhB,QAAQc,aADH,GAELd,QAAQe;AALS,CAAvB;;kBAQenB,Y","sourcesContent":["/* @flow */\n\nimport React from 'react';\nimport { Platform } from 'react-native';\n\nimport createNavigator from './createNavigator';\nimport createNavigationContainer from '../createNavigationContainer';\nimport TabRouter from '../routers/TabRouter';\nimport TabView from '../views/TabView/TabView';\nimport TabBarTop from '../views/TabView/TabBarTop';\nimport TabBarBottom from '../views/TabView/TabBarBottom';\n\nimport NavigatorTypes from './NavigatorTypes';\n\nimport type { TabViewConfig } from '../views/TabView/TabView';\n\nimport type {\n  NavigationRouteConfigMap,\n  NavigationTabRouterConfig,\n} from '../TypeDefinition';\n\nexport type TabNavigatorConfig = {\n  containerOptions?: void,\n} & NavigationTabRouterConfig &\n  TabViewConfig;\n\nconst TabNavigator = (\n  routeConfigs: NavigationRouteConfigMap,\n  config: TabNavigatorConfig = {}\n) => {\n  // Use the look native to the platform by default\n  const mergedConfig = { ...TabNavigator.Presets.Default, ...config };\n  const {\n    tabBarComponent,\n    tabBarPosition,\n    tabBarOptions,\n    swipeEnabled,\n    animationEnabled,\n    lazy,\n    ...tabsConfig\n  } = mergedConfig;\n\n  const router = TabRouter(routeConfigs, tabsConfig);\n\n  const navigator = createNavigator(\n    router,\n    routeConfigs,\n    config,\n    NavigatorTypes.STACK\n  )((props: *) => (\n    <TabView\n      {...props}\n      tabBarComponent={tabBarComponent}\n      tabBarPosition={tabBarPosition}\n      tabBarOptions={tabBarOptions}\n      swipeEnabled={swipeEnabled}\n      animationEnabled={animationEnabled}\n      lazy={lazy}\n    />\n  ));\n\n  return createNavigationContainer(navigator, tabsConfig.containerOptions);\n};\n\nconst Presets = {\n  iOSBottomTabs: {\n    tabBarComponent: TabBarBottom,\n    tabBarPosition: 'bottom',\n    swipeEnabled: false,\n    animationEnabled: false,\n    lazy: false,\n  },\n  AndroidTopTabs: {\n    tabBarComponent: TabBarTop,\n    tabBarPosition: 'top',\n    swipeEnabled: true,\n    animationEnabled: true,\n    lazy: false,\n  },\n};\n\n/**\n * Use these to get Android-style top tabs even on iOS or vice versa.\n *\n * Example:\n * ```\n * const HomeScreenTabNavigator = TabNavigator({\n *  Chat: {\n *    screen: ChatScreen,\n *  },\n *  ...\n * }, {\n *  ...TabNavigator.Presets.AndroidTopTabs,\n *  tabBarOptions: {\n *    ...\n *  },\n * });\n *```\n */\nTabNavigator.Presets = {\n  iOSBottomTabs: Presets.iOSBottomTabs,\n  AndroidTopTabs: Presets.AndroidTopTabs,\n  Default: Platform.OS === 'ios'\n    ? Presets.iOSBottomTabs\n    : Presets.AndroidTopTabs,\n};\n\nexport default TabNavigator;\n"]}]