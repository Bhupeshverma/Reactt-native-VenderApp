["fd507acdeef4efccfba961ee8943b7c77b0b55df","5611b1fa53556a2da7ff193f98149630f95834fa",["lodash"],[133],{"version":3,"sources":["/home/ziddi/Desktop/venders/node_modules/@shoutem/ui/components/NavigationBar/NavigationBarAnimations.js"],"names":["_","ColorAnimation","options","assign","isFunction","preset","Error","animatedValue","driver","value","style","backgroundColor","textColor","scrollOffset","atAnimatedValue","defaultAnimatedValue","standardTextColor","color","interpolate","inputRange","outputRange","extrapolate","borderBottomColor","NavigationBarAnimations"],"mappings":";;;;;AAAA;;IAAYA,C;;IAENC,c;AACJ,0BAAYC,OAAZ,EAAqB;AAAA;;AACnBF,MAAEG,MAAF,CAAS,IAAT,EAAeD,OAAf;AACA,QAAI,CAACF,EAAEI,UAAF,CAAa,KAAK,KAAKC,MAAV,CAAb,CAAL,EAAsC;AACpC,YAAM,IAAIC,KAAJ,8BAAqCJ,QAAQG,MAA7C,mDAAN;AAED;AACD,SAAKE,aAAL,GAAqB,KAAKC,MAAL,CAAYC,KAAjC;AACA,SAAKC,KAAL,GAAa,EAAb;AACD;;;;8BAESC,e,EAAiBC,S,EAAW;AACpC,WAAKD,eAAL,GAAuBA,eAAvB;AACA,WAAKC,SAAL,GAAiBA,SAAjB;;AAEA,WAAKF,KAAL,GAAa,KAAK,KAAKL,MAAV,EAAkB,KAAKQ,YAAvB,CAAb;AACD;;;oCAEeC,e,EAAiB;AAC/B,UAAMC,uBAAuBD,mBAAmB,GAAhD;AACA,UAAME,oBAAoB,KAAKJ,SAAL,IAAkB,eAA5C;AACA,UAAML,gBAAgB,KAAKA,aAA3B;AACA,aAAO;AACLU,eAAOV,cAAcW,WAAd,CAA0B;AAC/BC,sBAAY,CAAC,CAAD,EAAIJ,oBAAJ,CADmB;AAE/BK,uBAAa,CAAC,eAAD,EAAkBJ,iBAAlB,CAFkB;AAG/BK,uBAAa;AAHkB,SAA1B,CADF;AAMLV,yBAAiBJ,cAAcW,WAAd,CAA0B;AACzCC,sBAAY,CAAC,CAAD,EAAIJ,oBAAJ,CAD6B;AAEzCK,uBAAa,CAAC,eAAD,EAAkB,qBAAlB,CAF4B;AAGzCC,uBAAa;AAH4B,SAA1B,CANZ;AAWLC,2BAAmBf,cAAcW,WAAd,CAA0B;AAC3CC,sBAAY,CAACJ,uBAAuB,CAAxB,EAA2BA,oBAA3B,CAD+B;AAE3CK,uBAAa,CAAC,eAAD,EAAkB,uBAAlB,CAF8B;AAG3CC,uBAAa;AAH8B,SAA1B;AAXd,OAAP;AAiBD;;;;;AAGI,IAAME,4DAA0B;AACrCtB;AADqC,CAAhC","sourcesContent":["import * as _ from 'lodash';\n\nclass ColorAnimation {\n  constructor(options) {\n    _.assign(this, options);\n    if (!_.isFunction(this[this.preset])) {\n      throw new Error(`Color animation preset:(${options.preset})\n        you tried to create doesn't exist`);\n    }\n    this.animatedValue = this.driver.value;\n    this.style = {};\n  }\n\n  setColors(backgroundColor, textColor) {\n    this.backgroundColor = backgroundColor;\n    this.textColor = textColor;\n\n    this.style = this[this.preset](this.scrollOffset);\n  }\n\n  clearToStandard(atAnimatedValue) {\n    const defaultAnimatedValue = atAnimatedValue || 150;\n    const standardTextColor = this.textColor || 'rgba(0,0,0,1)';\n    const animatedValue = this.animatedValue;\n    return {\n      color: animatedValue.interpolate({\n        inputRange: [0, defaultAnimatedValue],\n        outputRange: ['rgba(0,0,0,0)', standardTextColor],\n        extrapolate: 'clamp',\n      }),\n      backgroundColor: animatedValue.interpolate({\n        inputRange: [0, defaultAnimatedValue],\n        outputRange: ['rgba(0,0,0,0)', 'rgba(255,255,255,1)'],\n        extrapolate: 'clamp',\n      }),\n      borderBottomColor: animatedValue.interpolate({\n        inputRange: [defaultAnimatedValue / 2, defaultAnimatedValue],\n        outputRange: ['rgba(0,0,0,0)', 'rgba(51, 51, 51, 0.2)'],\n        extrapolate: 'clamp',\n      }),\n    };\n  }\n}\n\nexport const NavigationBarAnimations = {\n  ColorAnimation,\n};\n"]}]