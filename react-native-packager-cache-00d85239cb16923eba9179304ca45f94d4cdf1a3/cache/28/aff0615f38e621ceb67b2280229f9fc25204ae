Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Switch = undefined;

var _class, _temp;

var _react = require('react');

var _react2 = babelHelpers.interopRequireDefault(_react);

var _reactNative = require('react-native');

var _ui = require('@shoutem/ui');

var _theme = require('@shoutem/theme');

var _animation = require('@shoutem/animation');

var _React$PropTypes = _react2.default.PropTypes,
    bool = _React$PropTypes.bool,
    func = _React$PropTypes.func,
    object = _React$PropTypes.object,
    shape = _React$PropTypes.shape;
var Switch = (_temp = _class = function (_Component) {
  babelHelpers.inherits(Switch, _Component);

  function Switch(props) {
    babelHelpers.classCallCheck(this, Switch);

    var _this = babelHelpers.possibleConstructorReturn(this, (Switch.__proto__ || Object.getPrototypeOf(Switch)).call(this, props));

    _this.timingDriver = new _animation.TimingDriver();
    _this.onSwitchPressed = _this.onSwitchPressed.bind(_this);

    _this.setValue(props.value);
    return _this;
  }

  babelHelpers.createClass(Switch, [{
    key: 'componentWillReceiveProps',
    value: function componentWillReceiveProps(nextProps) {
      if (nextProps.value === this.props.value) {
        return;
      }

      this.setValue(nextProps.value);
    }
  }, {
    key: 'onSwitchPressed',
    value: function onSwitchPressed() {
      var _props = this.props,
          value = _props.value,
          onValueChange = _props.onValueChange;


      onValueChange(!value);
    }
  }, {
    key: 'setValue',
    value: function setValue(value) {
      this.timingDriver.toValue(value ? 1 : 0);
    }
  }, {
    key: 'render',
    value: function render() {
      var style = this.props.style;


      return _react2.default.createElement(
        _reactNative.TouchableWithoutFeedback,
        {
          onPress: this.onSwitchPressed,
          styleName: 'clear'
        },
        _react2.default.createElement(
          _ui.View,
          null,
          _react2.default.createElement(
            _ui.View,
            {
              animationName: 'mute',
              driver: this.timingDriver,
              style: style.container
            },
            _react2.default.createElement(_ui.View, {
              animationName: 'turn',
              animationOptions: { containerWidth: style.container.width },
              driver: this.timingDriver,
              style: style.thumb
            })
          )
        )
      );
    }
  }]);
  return Switch;
}(_react.Component), _class.propTypes = {
  value: bool,

  onValueChange: func,

  style: shape({
    container: object,

    thumb: object
  })
}, _temp);


var AnimatedSwitch = (0, _animation.connectAnimation)(Switch);
var StyledSwitch = (0, _theme.connectStyle)('shoutem.ui.Switch')(AnimatedSwitch);

exports.Switch = StyledSwitch;