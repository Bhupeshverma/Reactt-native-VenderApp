Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ScrollDriverProvider = undefined;

var _class, _temp;

var _react = require('react');

var _react2 = babelHelpers.interopRequireDefault(_react);

var _animation = require('@shoutem/animation');

var _lodash = require('lodash');

var _ = babelHelpers.interopRequireWildcard(_lodash);

var ScrollDriverProvider = exports.ScrollDriverProvider = (_temp = _class = function (_Component) {
  babelHelpers.inherits(ScrollDriverProvider, _Component);

  function ScrollDriverProvider(props, context) {
    babelHelpers.classCallCheck(this, ScrollDriverProvider);

    var _this = babelHelpers.possibleConstructorReturn(this, (ScrollDriverProvider.__proto__ || Object.getPrototypeOf(ScrollDriverProvider)).call(this, props, context));

    _this.setupAnimationDriver(props, context);
    return _this;
  }

  babelHelpers.createClass(ScrollDriverProvider, [{
    key: 'getChildContext',
    value: function getChildContext() {
      return {
        driverProvider: this,
        animationDriver: this.animationDriver
      };
    }
  }, {
    key: 'componentWillReceiveProps',
    value: function componentWillReceiveProps(nextProps, nextContext) {
      this.setupAnimationDriver(nextProps, nextContext);
    }
  }, {
    key: 'setupAnimationDriver',
    value: function setupAnimationDriver(props, context) {
      if (props.driver) {
        this.animationDriver = props.driver;
      } else if (context.driverProvider) {
        this.animationDriver = context.animationDriver;
      } else if (!this.animationDriver) {
        this.animationDriver = new _animation.ScrollDriver({ useNativeDriver: true });
      }
    }
  }, {
    key: 'setAnimationDriver',
    value: function setAnimationDriver(driver, primaryScrollView) {
      if (driver || !this.animationDriver || primaryScrollView) {
        _.assign(this.animationDriver, driver);
        var driverProvider = this.context.driverProvider;

        if (driverProvider) {
          driverProvider.setAnimationDriver(driver, primaryScrollView);
        }
      }
    }
  }, {
    key: 'render',
    value: function render() {
      var children = this.props.children;

      return children && _react.Children.only(this.props.children);
    }
  }]);
  return ScrollDriverProvider;
}(_react.Component), _class.childContextTypes = {
  driverProvider: _react2.default.PropTypes.object,
  animationDriver: _animation.DriverShape
}, _class.contextTypes = {
  animationDriver: _animation.DriverShape
}, _class.propTypes = {
  children: _react2.default.PropTypes.node,
  driver: _animation.DriverShape
}, _temp);