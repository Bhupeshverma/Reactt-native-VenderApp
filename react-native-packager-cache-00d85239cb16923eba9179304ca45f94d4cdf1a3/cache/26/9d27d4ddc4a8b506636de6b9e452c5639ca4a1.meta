["30b5fa0ba4f0850e7dfc7bca456ee2596e92cedb","3917ba4dd995dd0b73719057df19759f7ad38efa",["react","react-native","@expo/vector-icons/MaterialIcons","@shoutem/theme","@shoutem/animation"],[121,218,265,399,444],{"version":3,"sources":["/home/ziddi/Desktop/venders/node_modules/@shoutem/ui/components/ImagePreview.js"],"names":["ZoomableImage","propTypes","width","number","height","source","style","object","CLOSE_ICON_NAME","CLOSE_ICON_SIZE","ImagePreview","props","state","fullScreen","onPressCloseButton","bind","onPressImage","setState","closeButton","header","closeIcon","fullScreenContainer","image","container","thumbnail","StyledImagePreview"],"mappings":";;;;;AAAA;;;;AAIA;;AAOA;;;;AAEA;;AAEA;;AAEA,IAAMA,gBAAgB,gDAAtB;;AAEA,IAAMC,YAAY;AAChBC,SAAO,iBAAUC,MADD;AAEhBC,UAAQ,iBAAUD,MAFF;AAGhBE,UAAQ,mBAAMJ,SAAN,CAAgBI,MAHR;AAIhBC,SAAO,iBAAUC;AAJD,CAAlB;;AAOA,IAAMC,kBAAkB,OAAxB;AACA,IAAMC,kBAAkB,EAAxB;;IAMMC,Y;;;AACJ,wBAAYC,KAAZ,EAAmB;AAAA;;AAAA,wIACXA,KADW;;AAAA,UAMnBC,KANmB,GAMX;AACNC,kBAAY;AADN,KANW;;AAEjB,UAAKC,kBAAL,GAA0B,MAAKA,kBAAL,CAAwBC,IAAxB,OAA1B;AACA,UAAKC,YAAL,GAAoB,MAAKA,YAAL,CAAkBD,IAAlB,OAApB;AAHiB;AAIlB;;;;yCAMoB;AACnB,WAAKE,QAAL,CAAc;AACZJ,oBAAY;AADA,OAAd;AAGD;;;mCAEc;AACb,WAAKI,QAAL,CAAc;AACZJ,oBAAY;AADA,OAAd;AAGD;;;6BAEQ;AAAA,mBACkC,KAAKF,KADvC;AAAA,UACCN,MADD,UACCA,MADD;AAAA,UACSC,KADT,UACSA,KADT;AAAA,UACgBJ,KADhB,UACgBA,KADhB;AAAA,UACuBE,MADvB,UACuBA,MADvB;;;AAGP,UAAI,KAAKQ,KAAL,CAAWC,UAAf,EAA2B;AACzB,YAAMK,cACJ;AAAA;AAAA,YAAM,OAAOZ,MAAMa,MAAnB;AACE;AAAA;AAAA,cAAkB,OAAOb,MAAMO,UAA/B,EAA2C,SAAS,KAAKC,kBAAzD;AACE,qEAAM,MAAMN,eAAZ,EAA6B,MAAMC,eAAnC,EAAoD,OAAOH,MAAMc,SAAjE;AADF;AADF,SADF;;AAQA,eACE;AAAA;AAAA;AACE,0BADF;AAEE;AAFF;AAIE;AAAA;AAAA,cAAM,OAAOd,MAAMe,mBAAnB;AACE,0CAAC,aAAD;AACE,qBAAOf,MAAMgB,KADf;AAEE,8BAAgBpB,KAFlB;AAGE,+BAAiBE,MAHnB;AAIE,sBAAQC,MAJV;AAKE,0BAAY;AALd,cADF;AAQGa;AARH;AAJF,SADF;AAiBD;;AAED,aACE;AAAA;AAAA,UAAM,OAAO,CAACZ,MAAMiB,SAAP,EAAkB,EAAErB,YAAF,EAASE,cAAT,EAAlB,CAAb;AACE;AAAA;AAAA,YAAkB,SAAS,KAAKY,YAAhC;AACE;AACE,mBAAOV,MAAMkB,SADf;AAEE,oBAAQnB,MAFV;AAGE,mBAAOH,KAHT;AAIE,oBAAQE,MAJV;AAKE,wBAAW;AALb;AADF;AADF,OADF;AAaD;;;;;AAGHM,aAAaT,SAAb,GAAyBA,SAAzB;;AAEA,IAAMwB,qBAAqB,yBAAa,yBAAb,EAAwCf,YAAxC,CAA3B;;QAGwBA,Y,GAAtBe,kB","sourcesContent":["import React, {\n  PropTypes,\n  Component,\n} from 'react';\nimport {\n  View,\n  Modal,\n  Image,\n  TouchableOpacity,\n} from 'react-native';\n\nimport Icon from 'react-native-vector-icons/MaterialIcons';\n\nimport { connectStyle } from '@shoutem/theme';\n\nimport { makeZoomable } from '@shoutem/animation';\n\nconst ZoomableImage = makeZoomable(Image);\n\nconst propTypes = {\n  width: PropTypes.number,\n  height: PropTypes.number,\n  source: Image.propTypes.source,\n  style: PropTypes.object,\n};\n\nconst CLOSE_ICON_NAME = 'clear';\nconst CLOSE_ICON_SIZE = 25;\n\n/**\n * Renders an ImagePreview which shows an inline image preview.\n * When clicked, the image is displayed in full screen.\n */\nclass ImagePreview extends Component {\n  constructor(props) {\n    super(props);\n    this.onPressCloseButton = this.onPressCloseButton.bind(this);\n    this.onPressImage = this.onPressImage.bind(this);\n  }\n\n  state = {\n    fullScreen: false,\n  };\n\n  onPressCloseButton() {\n    this.setState({\n      fullScreen: false,\n    });\n  }\n\n  onPressImage() {\n    this.setState({\n      fullScreen: true,\n    });\n  }\n\n  render() {\n    const { source, style, width, height } = this.props;\n\n    if (this.state.fullScreen) {\n      const closeButton = (\n        <View style={style.header}>\n          <TouchableOpacity style={style.fullScreen} onPress={this.onPressCloseButton}>\n            <Icon name={CLOSE_ICON_NAME} size={CLOSE_ICON_SIZE} style={style.closeIcon} />\n          </TouchableOpacity>\n        </View>\n      );\n\n      return (\n        <Modal\n          animated\n          transparent\n        >\n          <View style={style.fullScreenContainer}>\n            <ZoomableImage\n              style={style.image}\n              componentWidth={width}\n              componentHeight={height}\n              source={source}\n              resizeMode={'contain'}\n            />\n            {closeButton}\n          </View>\n        </Modal>\n      );\n    }\n\n    return (\n      <View style={[style.container, { width, height }]}>\n        <TouchableOpacity onPress={this.onPressImage} >\n          <Image\n            style={style.thumbnail}\n            source={source}\n            width={width}\n            height={height}\n            resizeMode=\"contain\"\n          />\n        </TouchableOpacity>\n      </View>\n    );\n  }\n}\n\nImagePreview.propTypes = propTypes;\n\nconst StyledImagePreview = connectStyle('shoutem.ui.ImagePreview')(ImagePreview);\n\nexport {\n  StyledImagePreview as ImagePreview,\n};\n"]}]