["7a576790de7c8769e4b63162fb07b7528a55f1d8","260a163ca8c3d284955d657f4f1eb7dfd6751a5a",["react-native","./NavigationAbstractPanResponder","./NavigationCardStackPanResponder","./clamp"],[39,110,193,257,307],{"version":3,"sources":["/home/ziddi/Desktop/venders/node_modules/react-native-navigation-experimental-compat/src/NavigationPagerPanResponder.js"],"names":["Animated","require","NavigationAbstractPanResponder","NavigationCardStackPanResponder","I18nManager","clamp","ANIMATION_DURATION","POSITION_THRESHOLD","RESPOND_THRESHOLD","Directions","DISTANCE_THRESHOLD","VELOCITY_THRESHOLD","NavigationPagerPanResponder","direction","props","_isResponding","_isVertical","VERTICAL","_props","_startValue","event","gesture","navigationState","index","scene","layout","isVertical","axis","distance","height","__getValue","width","Math","abs","position","stopAnimation","value","scenes","currentValue","isRTL","prevIndex","max","nextIndex","min","length","setValue","onNavigateBack","onNavigateForward","velocityAxis","moveSpeed","_reset","timing","toValue","duration","start","createPanHandlers","responder","panHandlers","forHorizontal","HORIZONTAL","module","exports"],"mappings":"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","sourcesContent":["/**\n * Copyright (c) 2013-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @flow\n */\n'use strict';\n\nconst Animated = require('react-native').Animated;\nconst NavigationAbstractPanResponder = require('./NavigationAbstractPanResponder');\nconst NavigationCardStackPanResponder = require('./NavigationCardStackPanResponder');\nconst I18nManager = require('react-native').I18nManager;\n\nconst clamp = require('./clamp');\n\nimport type {\n  NavigationPanPanHandlers,\n  NavigationSceneRendererProps,\n} from './NavigationTypeDefinition';\n\nimport type {\n  NavigationGestureDirection,\n} from './NavigationCardStackPanResponder';\n\ntype Props = NavigationSceneRendererProps & {\n  onNavigateBack: ?Function,\n  onNavigateForward: ?Function,\n};\n\n/**\n * Primitive gesture directions.\n */\nconst {\n  ANIMATION_DURATION,\n  POSITION_THRESHOLD,\n  RESPOND_THRESHOLD,\n  Directions,\n} = NavigationCardStackPanResponder;\n\n/**\n * The threshold (in pixels) to finish the gesture action.\n */\nconst DISTANCE_THRESHOLD = 50;\n\n/**\n * The threshold to trigger the gesture action. This determines the rate of the\n * flick when the action will be triggered\n */\nconst VELOCITY_THRESHOLD = 1.5;\n\n/**\n * Pan responder that handles gesture for a card in the cards list.\n *\n * +-------------+-------------+-------------+\n * |             |             |             |\n * |             |             |             |\n * |             |             |             |\n * |    Next     |   Focused   |  Previous   |\n * |    Card     |    Card     |    Card     |\n * |             |             |             |\n * |             |             |             |\n * |             |             |             |\n * +-------------+-------------+-------------+\n */\nclass NavigationPagerPanResponder extends NavigationAbstractPanResponder {\n\n  _isResponding: boolean;\n  _isVertical: boolean;\n  _props: Props;\n  _startValue: number;\n\n  constructor(\n    direction: NavigationGestureDirection,\n    props: Props,\n  ) {\n    super();\n    this._isResponding = false;\n    this._isVertical = direction === Directions.VERTICAL;\n    this._props = props;\n    this._startValue = 0;\n  }\n\n  onMoveShouldSetPanResponder(event: any, gesture: any): boolean {\n    const props = this._props;\n\n    if (props.navigationState.index !== props.scene.index) {\n      return false;\n    }\n\n    const layout = props.layout;\n    const isVertical = this._isVertical;\n    const axis = isVertical ? 'dy' : 'dx';\n    const index = props.navigationState.index;\n    const distance = isVertical ?\n      layout.height.__getValue() :\n      layout.width.__getValue();\n\n    return (\n      Math.abs(gesture[axis]) > RESPOND_THRESHOLD &&\n      distance > 0 &&\n      index >= 0\n    );\n  }\n\n  onPanResponderGrant(): void {\n    this._isResponding = false;\n    this._props.position.stopAnimation((value: number) => {\n      this._isResponding = true;\n      this._startValue = value;\n    });\n  }\n\n  onPanResponderMove(event: any, gesture: any): void {\n    if (!this._isResponding) {\n      return;\n    }\n\n    const {\n      layout,\n      navigationState,\n      position,\n      scenes,\n    } = this._props;\n\n    const isVertical = this._isVertical;\n    const axis = isVertical ? 'dy' : 'dx';\n    const index = navigationState.index;\n    const distance = isVertical ?\n      layout.height.__getValue() :\n      layout.width.__getValue();\n    const currentValue = I18nManager.isRTL && axis === 'dx' ?\n      this._startValue + (gesture[axis] / distance) :\n      this._startValue - (gesture[axis] / distance);\n\n    const prevIndex = Math.max(\n      0,\n      index - 1,\n    );\n\n    const nextIndex = Math.min(\n      index + 1,\n      scenes.length - 1,\n    );\n\n    const value = clamp(\n      prevIndex,\n      currentValue,\n      nextIndex,\n    );\n\n    position.setValue(value);\n  }\n\n  onPanResponderRelease(event: any, gesture: any): void {\n    if (!this._isResponding) {\n      return;\n    }\n\n    this._isResponding = false;\n\n    const {\n      navigationState,\n      onNavigateBack,\n      onNavigateForward,\n      position,\n    } = this._props;\n\n    const isVertical = this._isVertical;\n    const axis = isVertical ? 'dy' : 'dx';\n    const velocityAxis = isVertical ? 'vy' : 'vx';\n    const index = navigationState.index;\n    const distance = I18nManager.isRTL && axis === 'dx' ?\n      -gesture[axis] :\n      gesture[axis];\n    const moveSpeed = I18nManager.isRTL && velocityAxis === 'vx' ?\n      -gesture[velocityAxis] :\n      gesture[velocityAxis];\n\n    position.stopAnimation((value: number) => {\n      this._reset();\n      if (\n        distance > DISTANCE_THRESHOLD  ||\n        value <= index - POSITION_THRESHOLD ||\n        moveSpeed > VELOCITY_THRESHOLD\n      ) {\n        onNavigateBack && onNavigateBack();\n        return;\n      }\n\n      if (\n        distance < -DISTANCE_THRESHOLD ||\n        value >= index  + POSITION_THRESHOLD ||\n        moveSpeed < -VELOCITY_THRESHOLD\n      ) {\n        onNavigateForward && onNavigateForward();\n      }\n    });\n  }\n\n  onPanResponderTerminate(): void {\n    this._isResponding = false;\n    this._reset();\n  }\n\n  _reset(): void {\n    const props = this._props;\n    Animated.timing(\n      props.position,\n      {\n        toValue: props.navigationState.index,\n        duration: ANIMATION_DURATION,\n      }\n    ).start();\n  }\n}\n\nfunction createPanHandlers(\n  direction: NavigationGestureDirection,\n  props: Props,\n): NavigationPanPanHandlers {\n  const responder = new NavigationPagerPanResponder(direction, props);\n  return responder.panHandlers;\n}\n\nfunction forHorizontal(\n  props: Props,\n): NavigationPanPanHandlers {\n  return createPanHandlers(Directions.HORIZONTAL, props);\n}\n\nmodule.exports = {\n  forHorizontal,\n};\n"]}]