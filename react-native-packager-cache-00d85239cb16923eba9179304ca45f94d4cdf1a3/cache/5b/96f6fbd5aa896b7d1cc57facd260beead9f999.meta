["010347ede04f7869e1d36bce88e3a0caa6a3c4d8","24d3d7a8780ded7a650034189eb3acc319d168b5",["react","./../View","../../drivers/DriverShape","../../components/measure"],[134,224,266,320],{"version":3,"sources":["/home/ziddi/Desktop/venders/node_modules/@shoutem/animation/src/animations/Slide/Slide.js"],"names":["Slide","props","driver","children","inputRange","style","direction","animationName","layout","state","offset","split","reduce","position","toLowerCase","pageY","height","pageX","width","propTypes","isRequired","PropTypes","node","array","string","object","measuredSlide"],"mappings":";;;;;;;AAAA;;;;AACA;;AACA;;AACA;;IAEMA,K;;;;;;;;;;6BAuBK;AAAA,mBAQH,KAAKC,KARF;AAAA,UAELC,MAFK,UAELA,MAFK;AAAA,UAGLC,QAHK,UAGLA,QAHK;AAAA,qCAILC,UAJK;AAAA,UAILA,UAJK,qCAIQ,CAAC,CAAD,EAAI,CAAJ,CAJR;AAAA,UAKLC,KALK,UAKLA,KALK;AAAA,UAMLC,SANK,UAMLA,SANK;AAAA,UAOLC,aAPK,UAOLA,aAPK;AAAA,UAWLC,MAXK,GAYH,KAAKC,KAZF,CAWLD,MAXK;;;AAcP,UAAME,SAASJ,UAAUK,KAAV,CAAgB,GAAhB,EAAqBC,MAArB,CAA4B,YAA2B;AAAA,YAA1BF,MAA0B,uEAAjB,EAAiB;AAAA,YAAbG,QAAa;;AACpE,YAAIA,SAASC,WAAT,OAA2B,KAA/B,EAAsC;AACpCJ,iBAAO,GAAP,IAAc,EAAEF,OAAOO,KAAP,GAAeP,OAAOQ,MAAxB,CAAd;AACD,SAFD,MAEO,IAAIH,SAASC,WAAT,OAA2B,MAA/B,EAAuC;AAC5CJ,iBAAO,GAAP,IAAc,EAAEF,OAAOS,KAAP,GAAeT,OAAOU,KAAxB,CAAd;AACD,SAFM,MAEA,IAAIL,SAASC,WAAT,OAA2B,QAA/B,EAAyC;AAC9CJ,iBAAO,GAAP,IAAcF,OAAOO,KAAP,GAAeP,OAAOQ,MAApC;AACD,SAFM,MAEA,IAAIH,SAASC,WAAT,OAA2B,OAA/B,EAAwC;AAC7CJ,iBAAO,GAAP,IAAcF,OAAOS,KAAP,GAAeT,OAAOU,KAApC;AACD;AACD,eAAOR,MAAP;AACD,OAXc,EAWZ,EAXY,CAAf;;AAaA,aACE;AAAA;AAAA;AACE,kBAAQR,MADV;AAEE,yBAAeK,aAFjB;AAGE,4BAAkB,EAAEH,sBAAF,EAAcM,cAAd,EAHpB;AAIE,iBAAOL;AAJT;AAMGF;AANH,OADF;AAUD;;;4BA3DMgB,S,GAAY;AAIjBjB,UAAQ,yBAAYkB,UAJH;;AAQjBjB,YAAU,gBAAMkB,SAAN,CAAgBC,IART;;AAajBlB,cAAY,gBAAMiB,SAAN,CAAgBE,KAbX;;AAiBjBjB,aAAW,gBAAMe,SAAN,CAAgBG,MAjBV;AAkBjBjB,iBAAe,gBAAMc,SAAN,CAAgBG,MAlBd;AAmBjBnB,SAAO,gBAAMgB,SAAN,CAAgBI;AAnBN,C;;;AA8DrB,IAAMC,gBAAgB,sBAAQ1B,KAAR,CAAtB;;QAGmBA,K,GAAjB0B,a","sourcesContent":["import React, { Component } from 'react';\nimport { View } from './../View';\nimport { DriverShape } from '../../drivers/DriverShape';\nimport { measure } from '../../components/measure';\n\nclass Slide extends Component {\n  static propTypes = {\n    /**\n     * An instance of animation driver, usually ScrollDriver\n     */\n    driver: DriverShape.isRequired,\n    /**\n     * Components to which an effect will be applied\n     */\n    children: React.PropTypes.node,\n    /**\n     * pair of [start, end] values from animation driver, how\n     * children would slide\n     */\n    inputRange: React.PropTypes.array,\n    /**\n     * direction of where children would slide to e.g. \"top right\"\n     */\n    direction: React.PropTypes.string,\n    animationName: React.PropTypes.string,\n    style: React.PropTypes.object,\n  };\n\n  render() {\n    const {\n      driver,\n      children,\n      inputRange = [0, 1],\n      style,\n      direction,\n      animationName\n    } = this.props;\n\n    const {\n      layout\n    } = this.state;\n\n    const offset = direction.split(' ').reduce((offset = {}, position) => {\n      if (position.toLowerCase() === \"top\") {\n        offset['y'] = -(layout.pageY + layout.height);\n      } else if (position.toLowerCase() === \"left\") {\n        offset['x'] = -(layout.pageX + layout.width);\n      } else if (position.toLowerCase() === \"bottom\") {\n        offset['y'] = layout.pageY + layout.height;\n      } else if (position.toLowerCase() === \"right\") {\n        offset['x'] = layout.pageX + layout.width;\n      }\n      return offset;\n    }, {});\n\n    return (\n      <View\n        driver={driver}\n        animationName={animationName}\n        animationOptions={{ inputRange, offset }}\n        style={style}\n      >\n        {children}\n      </View>\n    );\n  }\n}\n\nconst measuredSlide = measure(Slide);\n\nexport {\n  measuredSlide as Slide\n}\n"]}]