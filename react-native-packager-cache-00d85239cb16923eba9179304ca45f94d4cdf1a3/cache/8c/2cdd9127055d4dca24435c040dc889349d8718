'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var Rect = function () {
  function Rect(left, top, right, bottom) {
    babelHelpers.classCallCheck(this, Rect);

    this.left = left;
    this.top = top;
    this.right = right;
    this.bottom = bottom;
  }

  babelHelpers.createClass(Rect, [{
    key: 'set',
    value: function set(left, top, right, bottom) {
      this.left = left;
      this.top = top;
      this.right = right;
      this.bottom = bottom;
    }
  }, {
    key: 'width',
    value: function width() {
      return this.right - this.left;
    }
  }, {
    key: 'height',
    value: function height() {
      return this.bottom - this.top;
    }
  }, {
    key: 'centerX',
    value: function centerX() {
      return (this.left + this.right) / 2;
    }
  }, {
    key: 'centerY',
    value: function centerY() {
      return (this.top + this.bottom) / 2;
    }
  }, {
    key: 'offset',
    value: function offset(dx, dy) {
      this.left += dx;
      this.right += dx;
      this.top += dy;
      this.bottom += dy;
      return this;
    }
  }, {
    key: 'copy',
    value: function copy() {
      return new Rect(this.left, this.top, this.right, this.bottom);
    }
  }, {
    key: 'equals',
    value: function equals(rect) {
      return this.left === rect.left && this.top === rect.top && this.right === rect.right && this.bottom && rect.bottom;
    }
  }, {
    key: 'isValid',
    value: function isValid() {
      if (typeof this.left === 'number' && typeof this.right === 'number' && typeof this.top === 'number' && typeof this.bottom === 'number') {
        return true;
      }
      return false;
    }
  }]);
  return Rect;
}();

exports.default = Rect;