["378999dc7123fe4e404bfce9ffe6c1e068366e32","edb45af0492ae19f50f63d90e96be1013e9b52d1",["fbjs/lib/invariant"],[40],{"version":3,"sources":["/home/ziddi/Desktop/venders/node_modules/react-native-navigation-experimental-compat/src/NavigationStateUtils.js"],"names":["invariant","require","NavigationStateUtils","get","state","key","routes","find","route","indexOf","map","has","some","push","slice","index","length","pop","jumpToIndex","jumpTo","back","forward","replaceAt","replaceAtIndex","reset","Array","isArray","nextIndex","undefined","compare","ii","every","module","exports"],"mappings":";AAUA;;AAEA,IAAMA,YAAYC,OAAZ,sBAAN;;AAeA,IAAMC,uBAAuB;AAK3BC,KAL2B,eAKvBC,KALuB,EAKCC,GALD,EAKgC;AACzD,WAAOD,MAAME,MAAN,CAAaC,IAAb,CAAkB;AAAA,aAASC,MAAMH,GAAN,KAAcA,GAAvB;AAAA,KAAlB,KAAiD,IAAxD;AACD,GAP0B;AAa3BI,SAb2B,mBAanBL,KAbmB,EAaKC,GAbL,EAa0B;AACnD,WAAOD,MAAME,MAAN,CAAaI,GAAb,CAAiB;AAAA,aAASF,MAAMH,GAAf;AAAA,KAAjB,EAAqCI,OAArC,CAA6CJ,GAA7C,CAAP;AACD,GAf0B;AAqB3BM,KArB2B,eAqBvBP,KArBuB,EAqBCC,GArBD,EAqBuB;AAChD,WAAO,CAAC,CAACD,MAAME,MAAN,CAAaM,IAAb,CAAkB;AAAA,aAASJ,MAAMH,GAAN,KAAcA,GAAvB;AAAA,KAAlB,CAAT;AACD,GAvB0B;AA8B3BQ,MA9B2B,gBA8BtBT,KA9BsB,EA8BEI,KA9BF,EA8B2C;AACpER,cACEE,qBAAqBO,OAArB,CAA6BL,KAA7B,EAAoCI,MAAMH,GAA1C,MAAmD,CAAC,CADtD,EAEE,8CAFF,EAGEG,MAAMH,GAHR;;AAMA,QAAMC,SAASF,MAAME,MAAN,CAAaQ,KAAb,EAAf;AACAR,WAAOO,IAAP,CAAYL,KAAZ;;AAEA,oCACKJ,KADL;AAEEW,aAAOT,OAAOU,MAAP,GAAgB,CAFzB;AAGEV;AAHF;AAKD,GA7C0B;AAoD3BW,KApD2B,eAoDvBb,KApDuB,EAoDkB;AAC3C,QAAIA,MAAMW,KAAN,IAAe,CAAnB,EAAsB;AAEpB,aAAOX,KAAP;AACD;AACD,QAAME,SAASF,MAAME,MAAN,CAAaQ,KAAb,CAAmB,CAAnB,EAAsB,CAAC,CAAvB,CAAf;AACA,oCACKV,KADL;AAEEW,aAAOT,OAAOU,MAAP,GAAgB,CAFzB;AAGEV;AAHF;AAKD,GA/D0B;AAoE3BY,aApE2B,uBAoEfd,KApEe,EAoESW,KApET,EAoEyC;AAClE,QAAIA,UAAUX,MAAMW,KAApB,EAA2B;AACzB,aAAOX,KAAP;AACD;;AAEDJ,cAAU,CAAC,CAACI,MAAME,MAAN,CAAaS,KAAb,CAAZ,EAAiC,6BAAjC,EAAgEA,KAAhE;;AAEA,oCACKX,KADL;AAEEW;AAFF;AAID,GA/E0B;AAoF3BI,QApF2B,kBAoFpBf,KApFoB,EAoFIC,GApFJ,EAoFkC;AAC3D,QAAMU,QAAQb,qBAAqBO,OAArB,CAA6BL,KAA7B,EAAoCC,GAApC,CAAd;AACA,WAAOH,qBAAqBgB,WAArB,CAAiCd,KAAjC,EAAwCW,KAAxC,CAAP;AACD,GAvF0B;AA4F3BK,MA5F2B,gBA4FtBhB,KA5FsB,EA4FmB;AAC5C,QAAMW,QAAQX,MAAMW,KAAN,GAAc,CAA5B;AACA,QAAMP,QAAQJ,MAAME,MAAN,CAAaS,KAAb,CAAd;AACA,WAAOP,QAAQN,qBAAqBgB,WAArB,CAAiCd,KAAjC,EAAwCW,KAAxC,CAAR,GAAyDX,KAAhE;AACD,GAhG0B;AAqG3BiB,SArG2B,mBAqGnBjB,KArGmB,EAqGsB;AAC/C,QAAMW,QAAQX,MAAMW,KAAN,GAAc,CAA5B;AACA,QAAMP,QAAQJ,MAAME,MAAN,CAAaS,KAAb,CAAd;AACA,WAAOP,QAAQN,qBAAqBgB,WAArB,CAAiCd,KAAjC,EAAwCW,KAAxC,CAAR,GAAyDX,KAAhE;AACD,GAzG0B;AAgH3BkB,WAhH2B,qBAiHzBlB,KAjHyB,EAkHzBC,GAlHyB,EAmHzBG,KAnHyB,EAoHR;AACjB,QAAMO,QAAQb,qBAAqBO,OAArB,CAA6BL,KAA7B,EAAoCC,GAApC,CAAd;AACA,WAAOH,qBAAqBqB,cAArB,CAAoCnB,KAApC,EAA2CW,KAA3C,EAAkDP,KAAlD,CAAP;AACD,GAvH0B;AA8H3Be,gBA9H2B,0BA+HzBnB,KA/HyB,EAgIzBW,KAhIyB,EAiIzBP,KAjIyB,EAkIR;AACjBR,cACE,CAAC,CAACI,MAAME,MAAN,CAAaS,KAAb,CADJ,EAEE,yCAFF,EAGEA,KAHF,EAIEP,MAAMH,GAJR;;AAOA,QAAID,MAAME,MAAN,CAAaS,KAAb,MAAwBP,KAA5B,EAAmC;AACjC,aAAOJ,KAAP;AACD;;AAED,QAAME,SAASF,MAAME,MAAN,CAAaQ,KAAb,EAAf;AACAR,WAAOS,KAAP,IAAgBP,KAAhB;;AAEA,oCACKJ,KADL;AAEEW,kBAFF;AAGET;AAHF;AAKD,GAtJ0B;AA6J3BkB,OA7J2B,iBA8JzBpB,KA9JyB,EA+JzBE,MA/JyB,EAgKzBS,KAhKyB,EAiKR;AACjBf,cACEM,OAAOU,MAAP,IAAiBS,MAAMC,OAAN,CAAcpB,MAAd,CADnB,EAEE,2BAFF;;AAKA,QAAMqB,YAAoBZ,UAAUa,SAAV,GAAsBtB,OAAOU,MAAP,GAAgB,CAAtC,GAA0CD,KAApE;;AAEA,QAAIX,MAAME,MAAN,CAAaU,MAAb,KAAwBV,OAAOU,MAA/B,IAAyCZ,MAAMW,KAAN,KAAgBY,SAA7D,EAAwE;AACtE,UAAME,UAAU,SAAVA,OAAU,CAACrB,KAAD,EAAQsB,EAAR;AAAA,eAAexB,OAAOwB,EAAP,MAAetB,KAA9B;AAAA,OAAhB;AACA,UAAIJ,MAAME,MAAN,CAAayB,KAAb,CAAmBF,OAAnB,CAAJ,EAAiC;AAC/B,eAAOzB,KAAP;AACD;AACF;;AAEDJ,cAAU,CAAC,CAACM,OAAOqB,SAAP,CAAZ,EAA+B,2BAA/B,EAA4DA,SAA5D;;AAEA,oCACKvB,KADL;AAEEW,aAAOY,SAFT;AAGErB;AAHF;AAKD;AAvL0B,CAA7B;;AA0LA0B,OAAOC,OAAP,GAAiB/B,oBAAjB","sourcesContent":["/**\n * Copyright (c) 2015-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @flow\n */\n'use strict';\n\nconst invariant = require('fbjs/lib/invariant');\n\nimport type {\n  NavigationRoute,\n  NavigationState\n} from './NavigationTypeDefinition';\n\n/**\n * Utilities to perform atomic operation with navigate state and routes.\n *\n * ```javascript\n * const state1 = {key: 'page 1'};\n * const state2 = NavigationStateUtils.push(state1, {key: 'page 2'});\n * ```\n */\nconst NavigationStateUtils = {\n\n  /**\n   * Gets a route by key. If the route isn't found, returns `null`.\n   */\n  get(state: NavigationState, key: string): ?NavigationRoute {\n    return state.routes.find(route => route.key === key) || null;\n  },\n\n  /**\n   * Returns the first index at which a given route's key can be found in the\n   * routes of the navigation state, or -1 if it is not present.\n   */\n  indexOf(state: NavigationState, key: string): number {\n    return state.routes.map(route => route.key).indexOf(key);\n  },\n\n  /**\n   * Returns `true` at which a given route's key can be found in the\n   * routes of the navigation state.\n   */\n  has(state: NavigationState, key: string): boolean {\n    return !!state.routes.some(route => route.key === key);\n  },\n\n  /**\n   * Pushes a new route into the navigation state.\n   * Note that this moves the index to the positon to where the last route in the\n   * stack is at.\n   */\n  push(state: NavigationState, route: NavigationRoute): NavigationState {\n    invariant(\n      NavigationStateUtils.indexOf(state, route.key) === -1,\n      'should not push route with duplicated key %s',\n      route.key,\n    );\n\n    const routes = state.routes.slice();\n    routes.push(route);\n\n    return {\n      ...state,\n      index: routes.length - 1,\n      routes,\n    };\n  },\n\n  /**\n   * Pops out a route from the navigation state.\n   * Note that this moves the index to the positon to where the last route in the\n   * stack is at.\n   */\n  pop(state: NavigationState): NavigationState {\n    if (state.index <= 0) {\n      // [Note]: Over-popping does not throw error. Instead, it will be no-op.\n      return state;\n    }\n    const routes = state.routes.slice(0, -1);\n    return {\n      ...state,\n      index: routes.length - 1,\n      routes,\n    };\n  },\n\n  /**\n   * Sets the focused route of the navigation state by index.\n   */\n  jumpToIndex(state: NavigationState, index: number): NavigationState {\n    if (index === state.index) {\n      return state;\n    }\n\n    invariant(!!state.routes[index], 'invalid index %s to jump to', index);\n\n    return {\n      ...state,\n      index,\n    };\n  },\n\n  /**\n   * Sets the focused route of the navigation state by key.\n   */\n  jumpTo(state: NavigationState, key: string): NavigationState {\n    const index = NavigationStateUtils.indexOf(state, key);\n    return NavigationStateUtils.jumpToIndex(state, index);\n  },\n\n  /**\n   * Sets the focused route to the previous route.\n   */\n  back(state: NavigationState): NavigationState {\n    const index = state.index - 1;\n    const route = state.routes[index];\n    return route ? NavigationStateUtils.jumpToIndex(state, index) : state;\n  },\n\n  /**\n   * Sets the focused route to the next route.\n   */\n  forward(state: NavigationState): NavigationState {\n    const index = state.index + 1;\n    const route = state.routes[index];\n    return route ? NavigationStateUtils.jumpToIndex(state, index) : state;\n  },\n\n  /**\n   * Replace a route by a key.\n   * Note that this moves the index to the positon to where the new route in the\n   * stack is at.\n   */\n  replaceAt(\n    state: NavigationState,\n    key: string,\n    route: NavigationRoute,\n  ): NavigationState {\n    const index = NavigationStateUtils.indexOf(state, key);\n    return NavigationStateUtils.replaceAtIndex(state, index, route);\n  },\n\n  /**\n   * Replace a route by a index.\n   * Note that this moves the index to the positon to where the new route in the\n   * stack is at.\n   */\n  replaceAtIndex(\n    state: NavigationState,\n    index: number,\n    route: NavigationRoute,\n  ): NavigationState {\n    invariant(\n      !!state.routes[index],\n      'invalid index %s for replacing route %s',\n      index,\n      route.key,\n    );\n\n    if (state.routes[index] === route) {\n      return state;\n    }\n\n    const routes = state.routes.slice();\n    routes[index] = route;\n\n    return {\n      ...state,\n      index,\n      routes,\n    };\n  },\n\n  /**\n   * Resets all routes.\n   * Note that this moves the index to the positon to where the last route in the\n   * stack is at if the param `index` isn't provided.\n   */\n  reset(\n    state: NavigationState,\n    routes: Array<NavigationRoute>,\n    index?: number,\n  ): NavigationState {\n    invariant(\n      routes.length && Array.isArray(routes),\n      'invalid routes to replace',\n    );\n\n    const nextIndex: number = index === undefined ? routes.length - 1 : index;\n\n    if (state.routes.length === routes.length && state.index === nextIndex) {\n      const compare = (route, ii) => routes[ii] === route;\n      if (state.routes.every(compare)) {\n        return state;\n      }\n    }\n\n    invariant(!!routes[nextIndex], 'invalid index %s to reset', nextIndex);\n\n    return {\n      ...state,\n      index: nextIndex,\n      routes,\n    };\n  },\n};\n\nmodule.exports = NavigationStateUtils;\n"]}]