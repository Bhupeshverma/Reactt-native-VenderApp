["e38255ee54ffdd378d7697cda52b071c83fba50c","da2ce00e157eaeeea14bc49bd652d0cfc2fcc46b",["./constants"],[104],{"version":3,"sources":["/home/ziddi/Desktop/venders/node_modules/redux-persist/lib/purgeStoredState.js"],"names":["exports","__esModule","default","purgeStoredState","_constants","require","config","keys","storage","keyPrefix","undefined","KEY_PREFIX","Array","isArray","Error","Promise","resolve","reject","getAllKeys","err","allKeys","process","env","NODE_ENV","console","warn","filter","key","indexOf","map","slice","length","all","removeItem","warnIfRemoveError","removeError"],"mappings":"AAAA;;AAEAA,QAAQC,UAAR,GAAqB,IAArB;AACAD,QAAQE,OAAR,GAAkBC,gBAAlB;;AAEA,IAAIC,aAAaC,QAAQ,aAAR,CAAjB;;AAEA,SAASF,gBAAT,CAA0BG,MAA1B,EAAkCC,IAAlC,EAAwC;AACtC,MAAIC,UAAUF,OAAOE,OAArB;AACA,MAAIC,YAAYH,OAAOG,SAAP,KAAqBC,SAArB,GAAiCJ,OAAOG,SAAxC,GAAoDL,WAAWO,UAA/E;;AAGA,MAAIC,MAAMC,OAAN,CAAcP,MAAd,CAAJ,EAA2B,MAAM,IAAIQ,KAAJ,CAAU,sIAAV,CAAN;AAC3B,MAAI,CAACN,OAAL,EAAc,MAAM,IAAIM,KAAJ,CAAU,4DAAV,CAAN;;AAEd,MAAI,OAAOP,IAAP,KAAgB,WAApB,EAAiC;AAE/B,WAAO,IAAIQ,OAAJ,CAAY,UAAUC,OAAV,EAAmBC,MAAnB,EAA2B;AAC5CT,cAAQU,UAAR,CAAmB,UAAUC,GAAV,EAAeC,OAAf,EAAwB;AACzC,YAAID,GAAJ,EAAS;AACP,cAAIE,QAAQC,GAAR,CAAYC,QAAZ,KAAyB,YAA7B,EAA2CC,QAAQC,IAAR,CAAa,oEAAb;AAC3CR,iBAAOE,GAAP;AACD,SAHD,MAGO;AACLH,kBAAQb,iBAAiBG,MAAjB,EAAyBc,QAAQM,MAAR,CAAe,UAAUC,GAAV,EAAe;AAC7D,mBAAOA,IAAIC,OAAJ,CAAYnB,SAAZ,MAA2B,CAAlC;AACD,WAFgC,EAE9BoB,GAF8B,CAE1B,UAAUF,GAAV,EAAe;AACpB,mBAAOA,IAAIG,KAAJ,CAAUrB,UAAUsB,MAApB,CAAP;AACD,WAJgC,CAAzB,CAAR;AAKD;AACF,OAXD;AAYD,KAbM,CAAP;AAcD,GAhBD,MAgBO;AAEL,WAAOhB,QAAQiB,GAAR,CAAYzB,KAAKsB,GAAL,CAAS,UAAUF,GAAV,EAAe;AACzC,aAAOnB,QAAQyB,UAAR,CAAmB,KAAKxB,SAAL,GAAiBkB,GAApC,EAAyCO,kBAAkBP,GAAlB,CAAzC,CAAP;AACD,KAFkB,CAAZ,CAAP;AAGD;AACF;;AAED,SAASO,iBAAT,CAA2BP,GAA3B,EAAgC;AAC9B,SAAO,SAASQ,WAAT,CAAqBhB,GAArB,EAA0B;AAC/B,QAAIA,OAAOE,QAAQC,GAAR,CAAYC,QAAZ,KAAyB,YAApC,EAAkD;AAChDC,cAAQC,IAAR,CAAa,6BAAb,EAA4CE,GAA5C,EAAiDR,GAAjD;AACD;AACF,GAJD;AAKD","sourcesContent":["'use strict';\n\nexports.__esModule = true;\nexports.default = purgeStoredState;\n\nvar _constants = require('./constants');\n\nfunction purgeStoredState(config, keys) {\n  var storage = config.storage;\n  var keyPrefix = config.keyPrefix !== undefined ? config.keyPrefix : _constants.KEY_PREFIX;\n\n  // basic validation\n  if (Array.isArray(config)) throw new Error('redux-persist: purgeStoredState requires config as a first argument (found array). An array of keys is the optional second argument.');\n  if (!storage) throw new Error('redux-persist: config.storage required in purgeStoredState');\n\n  if (typeof keys === 'undefined') {\n    // if keys is not defined, purge all keys\n    return new Promise(function (resolve, reject) {\n      storage.getAllKeys(function (err, allKeys) {\n        if (err) {\n          if (process.env.NODE_ENV !== 'production') console.warn('redux-persist: error during purgeStoredState in storage.getAllKeys');\n          reject(err);\n        } else {\n          resolve(purgeStoredState(config, allKeys.filter(function (key) {\n            return key.indexOf(keyPrefix) === 0;\n          }).map(function (key) {\n            return key.slice(keyPrefix.length);\n          })));\n        }\n      });\n    });\n  } else {\n    // otherwise purge specified keys\n    return Promise.all(keys.map(function (key) {\n      return storage.removeItem('' + keyPrefix + key, warnIfRemoveError(key));\n    }));\n  }\n}\n\nfunction warnIfRemoveError(key) {\n  return function removeError(err) {\n    if (err && process.env.NODE_ENV !== 'production') {\n      console.warn('Error storing data for key:', key, err);\n    }\n  };\n}"]}]