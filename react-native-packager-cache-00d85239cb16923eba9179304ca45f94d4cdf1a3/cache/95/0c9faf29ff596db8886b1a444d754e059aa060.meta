["c4140c7fdf8997990ec26e7cf53bdb5ab43470a8","04fb9a712bb7288681702f247a584043b55c0e08",["./alphabet","./encode","./decode","./build","./is-valid","./util/cluster-worker-id"],[38,74,108,141,175,221],{"version":3,"sources":["/home/ziddi/Desktop/venders/node_modules/shortid/lib/index.js"],"names":["alphabet","require","encode","decode","build","isValid","clusterWorkerId","seed","seedValue","module","exports","worker","workerId","characters","newCharacters","undefined","shuffled","generate"],"mappings":"AAAA;;AAEA,IAAIA,WAAWC,QAAQ,YAAR,CAAf;AACA,IAAIC,SAASD,QAAQ,UAAR,CAAb;AACA,IAAIE,SAASF,QAAQ,UAAR,CAAb;AACA,IAAIG,QAAQH,QAAQ,SAAR,CAAZ;AACA,IAAII,UAAUJ,QAAQ,YAAR,CAAd;;AAMA,IAAIK,kBAAkBL,QAAQ,0BAAR,KAAuC,CAA7D;;AAQA,SAASM,IAAT,CAAcC,SAAd,EAAyB;AACrBR,WAASO,IAAT,CAAcC,SAAd;AACA,SAAOC,OAAOC,OAAd;AACH;;AAQD,SAASC,MAAT,CAAgBC,QAAhB,EAA0B;AACtBN,oBAAkBM,QAAlB;AACA,SAAOH,OAAOC,OAAd;AACH;;AAOD,SAASG,UAAT,CAAoBC,aAApB,EAAmC;AAC/B,MAAIA,kBAAkBC,SAAtB,EAAiC;AAC7Bf,aAASa,UAAT,CAAoBC,aAApB;AACH;;AAED,SAAOd,SAASgB,QAAT,EAAP;AACH;;AAMD,SAASC,QAAT,GAAoB;AAClB,SAAOb,MAAME,eAAN,CAAP;AACD;;AAGDG,OAAOC,OAAP,GAAiBO,QAAjB;AACAR,OAAOC,OAAP,CAAeO,QAAf,GAA0BA,QAA1B;AACAR,OAAOC,OAAP,CAAeH,IAAf,GAAsBA,IAAtB;AACAE,OAAOC,OAAP,CAAeC,MAAf,GAAwBA,MAAxB;AACAF,OAAOC,OAAP,CAAeG,UAAf,GAA4BA,UAA5B;AACAJ,OAAOC,OAAP,CAAeP,MAAf,GAAwBA,MAAxB;AACAM,OAAOC,OAAP,CAAeL,OAAf,GAAyBA,OAAzB","sourcesContent":["'use strict';\n\nvar alphabet = require('./alphabet');\nvar encode = require('./encode');\nvar decode = require('./decode');\nvar build = require('./build');\nvar isValid = require('./is-valid');\n\n// if you are using cluster or multiple servers use this to make each instance\n// has a unique value for worker\n// Note: I don't know if this is automatically set when using third\n// party cluster solutions such as pm2.\nvar clusterWorkerId = require('./util/cluster-worker-id') || 0;\n\n/**\n * Set the seed.\n * Highly recommended if you don't want people to try to figure out your id schema.\n * exposed as shortid.seed(int)\n * @param seed Integer value to seed the random alphabet.  ALWAYS USE THE SAME SEED or you might get overlaps.\n */\nfunction seed(seedValue) {\n    alphabet.seed(seedValue);\n    return module.exports;\n}\n\n/**\n * Set the cluster worker or machine id\n * exposed as shortid.worker(int)\n * @param workerId worker must be positive integer.  Number less than 16 is recommended.\n * returns shortid module so it can be chained.\n */\nfunction worker(workerId) {\n    clusterWorkerId = workerId;\n    return module.exports;\n}\n\n/**\n *\n * sets new characters to use in the alphabet\n * returns the shuffled alphabet\n */\nfunction characters(newCharacters) {\n    if (newCharacters !== undefined) {\n        alphabet.characters(newCharacters);\n    }\n\n    return alphabet.shuffled();\n}\n\n/**\n * Generate unique id\n * Returns string id\n */\nfunction generate() {\n  return build(clusterWorkerId);\n}\n\n// Export all other functions as properties of the generate function\nmodule.exports = generate;\nmodule.exports.generate = generate;\nmodule.exports.seed = seed;\nmodule.exports.worker = worker;\nmodule.exports.characters = characters;\nmodule.exports.decode = decode;\nmodule.exports.isValid = isValid;\n"]}]