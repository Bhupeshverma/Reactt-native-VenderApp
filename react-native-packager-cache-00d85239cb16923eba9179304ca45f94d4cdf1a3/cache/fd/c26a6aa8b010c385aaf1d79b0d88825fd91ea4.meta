["d389287813d7f188ed229cb304470a1eae255a7a","0d0bcbd6ddc860d7523c2c92d485f84c603acf14",["prop-types","react","react-native","../config/colors","../config/ViewPropTypes"],[91,195,292,332,444],{"version":3,"sources":["/home/ziddi/Desktop/venders/node_modules/react-native-elements/src/badge/badge.js"],"names":["Badge","containerStyle","props","textStyle","wrapperStyle","onPress","component","value","children","element","attributes","Component","childElement","styles","text","console","error","isValidElement","container","badge","propTypes","style","oneOfType","arrayOf","string","number","func","create","flexDirection","padding","paddingTop","paddingBottom","backgroundColor","grey1","borderRadius","alignItems","justifyContent","fontSize","color"],"mappings":";;;;AACA;;;;AACA;;;;AACA;;AACA;;;;AACA;;;;AAEA,IAAMA,QAAQ,SAARA,KAAQ,QAAS;AAAA,MAEnBC,cAFmB,GAWjBC,KAXiB,CAEnBD,cAFmB;AAAA,MAGnBE,SAHmB,GAWjBD,KAXiB,CAGnBC,SAHmB;AAAA,MAInBC,YAJmB,GAWjBF,KAXiB,CAInBE,YAJmB;AAAA,MAKnBC,OALmB,GAWjBH,KAXiB,CAKnBG,OALmB;AAAA,MAMnBC,SANmB,GAWjBJ,KAXiB,CAMnBI,SANmB;AAAA,MAOnBC,KAPmB,GAWjBL,KAXiB,CAOnBK,KAPmB;AAAA,MAQnBC,QARmB,GAWjBN,KAXiB,CAQnBM,QARmB;AAAA,MASnBC,OATmB,GAWjBP,KAXiB,CASnBO,OATmB;AAAA,MAUhBC,UAVgB,wCAWjBR,KAXiB;;;AAarB,MAAIO,OAAJ,EAAa,OAAOA,OAAP;;AAEb,MAAIE,6BAAJ;AACA,MAAIC,eACF;AAAA;AAAA,MAAM,OAAO,CAACC,OAAOC,IAAR,EAAcX,aAAaA,SAA3B,CAAb;AACGI;AADH,GADF;;AAMA,MAAIC,QAAJ,EAAc;AACZI,mBAAeJ,QAAf;AACD;;AAED,MAAIA,YAAYD,KAAhB,EAAuB;AACrBQ,YAAQC,KAAR,CAAc,sDAAd;AACD;;AAED,MAAI,CAACV,SAAD,IAAcD,OAAlB,EAA2B;AACzBM;AACD;;AAED,MAAI,gBAAMM,cAAN,CAAqBX,SAArB,CAAJ,EAAqC;AACnCK,gBAAYL,SAAZ;AACD;;AAED,SACE;AAAA;AAAA,MAAM,OAAO,CAACO,OAAOK,SAAP,IAAoBd,YAApB,IAAoCA,YAArC,CAAb;AACE;AAAC,eAAD;AAAA;AACE,eAAO,CAACS,OAAOM,KAAR,EAAelB,kBAAkBA,cAAjC,CADT;AAEE,iBAASI;AAFX,SAGMK,UAHN;AAKGE;AALH;AADF,GADF;AAWD,CAjDD;;AAmDAZ,MAAMoB,SAAN,GAAkB;AAChBnB,kBAAgB,wBAAcoB,KADd;AAEhBjB,gBAAc,wBAAciB,KAFZ;AAGhBlB,aAAW,kBAAKiB,SAAL,CAAeC,KAHV;AAIhBb,YAAU,oBAAUc,SAAV,CAAoB,CAC5B,oBAAUb,OADkB,EAE5B,oBAAUc,OAAV,CAAkB,oBAAUd,OAA5B,CAF4B,CAApB,CAJM;AAQhBF,SAAO,oBAAUe,SAAV,CAAoB,CAAC,oBAAUE,MAAX,EAAmB,oBAAUC,MAA7B,CAApB,CARS;AAShBpB,WAAS,oBAAUqB,IATH;AAUhBpB,aAAW,oBAAUoB,IAVL;AAWhBjB,WAAS,oBAAUA;AAXH,CAAlB;;AAcA,IAAMI,SAAS,wBAAWc,MAAX,CAAkB;AAC/BT,aAAW;AACTU,mBAAe;AADN,GADoB;AAI/BT,SAAO;AACLU,aAAS,EADJ;AAELC,gBAAY,CAFP;AAGLC,mBAAe,CAHV;AAILC,qBAAiB,iBAAOC,KAJnB;AAKLC,kBAAc,EALT;AAMLC,gBAAY,QANP;AAOLC,oBAAgB;AAPX,GAJwB;AAa/BtB,QAAM;AACJuB,cAAU,EADN;AAEJC,WAAO;AAFH;AAbyB,CAAlB,CAAf;;kBAmBetC,K","sourcesContent":["/*eslint-disable no-console */\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport { Text, View, StyleSheet, TouchableOpacity } from 'react-native';\nimport colors from '../config/colors';\nimport ViewPropTypes from '../config/ViewPropTypes';\n\nconst Badge = props => {\n  const {\n    containerStyle,\n    textStyle,\n    wrapperStyle,\n    onPress,\n    component,\n    value,\n    children,\n    element,\n    ...attributes\n  } = props;\n\n  if (element) return element;\n\n  let Component = View;\n  let childElement = (\n    <Text style={[styles.text, textStyle && textStyle]}>\n      {value}\n    </Text>\n  );\n\n  if (children) {\n    childElement = children;\n  }\n\n  if (children && value) {\n    console.error('Badge can only contain either child element or value');\n  }\n\n  if (!component && onPress) {\n    Component = TouchableOpacity;\n  }\n\n  if (React.isValidElement(component)) {\n    Component = component;\n  }\n\n  return (\n    <View style={[styles.container && wrapperStyle && wrapperStyle]}>\n      <Component\n        style={[styles.badge, containerStyle && containerStyle]}\n        onPress={onPress}\n        {...attributes}\n      >\n        {childElement}\n      </Component>\n    </View>\n  );\n};\n\nBadge.propTypes = {\n  containerStyle: ViewPropTypes.style,\n  wrapperStyle: ViewPropTypes.style,\n  textStyle: Text.propTypes.style,\n  children: PropTypes.oneOfType([\n    PropTypes.element,\n    PropTypes.arrayOf(PropTypes.element),\n  ]),\n  value: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n  onPress: PropTypes.func,\n  component: PropTypes.func,\n  element: PropTypes.element,\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    flexDirection: 'row',\n  },\n  badge: {\n    padding: 12,\n    paddingTop: 3,\n    paddingBottom: 3,\n    backgroundColor: colors.grey1,\n    borderRadius: 20,\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  text: {\n    fontSize: 14,\n    color: 'white',\n  },\n});\n\nexport default Badge;\n"]}]