Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ScrollView = undefined;

var _class,
    _temp,
    _jsxFileName = '/home/ziddi/Desktop/venders/node_modules/@shoutem/ui/components/ScrollView/ScrollView.js';

var _react = require('react');

var _react2 = babelHelpers.interopRequireDefault(_react);

var _reactNative = require('react-native');

var _theme = require('@shoutem/theme');

var _lodash = require('lodash');

var _lodash2 = babelHelpers.interopRequireDefault(_lodash);

var _animation = require('@shoutem/animation');

var _ScrollDriverProvider = require('./ScrollDriverProvider.js');

var ScrollView = (_temp = _class = function (_Component) {
  babelHelpers.inherits(ScrollView, _Component);

  function ScrollView(props, context) {
    babelHelpers.classCallCheck(this, ScrollView);

    var _this = babelHelpers.possibleConstructorReturn(this, (ScrollView.__proto__ || Object.getPrototypeOf(ScrollView)).call(this, props, context));

    _this.animationDriver = props.driver || new _animation.ScrollDriver({ useNativeDriver: true });
    _this.setWrappedInstance = _this.setWrappedInstance.bind(_this);
    return _this;
  }

  babelHelpers.createClass(ScrollView, [{
    key: 'getChildContext',
    value: function getChildContext() {
      return {
        animationDriver: this.animationDriver
      };
    }
  }, {
    key: 'componentWillMount',
    value: function componentWillMount() {
      var driverProvider = this.context.driverProvider;
      var primary = this.props.primary;

      if (driverProvider) {
        driverProvider.setAnimationDriver(this.animationDriver, primary);
      }
    }
  }, {
    key: 'componentWillReceiveProps',
    value: function componentWillReceiveProps(newProps, newContext) {
      if (newProps.driver && this.animationDriver !== newProps.driver) {
        this.animationDriver = newProps.driver;
      } else if (newContext.animationDriver && this.animationDriver !== newContext.animationDriver) {
        this.animationDriver = newContext.animationDriver;
      }
    }
  }, {
    key: 'setWrappedInstance',
    value: function setWrappedInstance(component) {
      this.wrappedInstance = component;
    }
  }, {
    key: 'render',
    value: function render() {
      var props = this.props,
          animationDriver = this.animationDriver;
      var _props$style = props.style,
          style = _props$style === undefined ? {} : _props$style;

      var contentContainerStyle = babelHelpers.extends({}, style.contentContainerStyle);
      delete style.contentContainerStyle;

      return _react2.default.createElement(_reactNative.Animated.ScrollView, babelHelpers.extends({
        ref: this.setWrappedInstance,
        contentContainerStyle: contentContainerStyle
      }, animationDriver.scrollViewProps, props, {
        __source: {
          fileName: _jsxFileName,
          lineNumber: 67
        }
      }));
    }
  }]);
  return ScrollView;
}(_react.Component), _class.propTypes = babelHelpers.extends({}, _reactNative.Animated.ScrollView.propTypes), _class.contextTypes = {
  animationDriver: _animation.DriverShape,
  driverProvider: _react2.default.PropTypes.object
}, _class.childContextTypes = {
  animationDriver: _animation.DriverShape
}, _class.DriverProvider = _ScrollDriverProvider.ScrollDriverProvider, _temp);


var StyledScrollView = (0, _theme.connectStyle)('shoutem.ui.ScrollView')(ScrollView);

function getRNScrollViewComponent(context) {
  return _lodash2.default.get(context, 'wrappedInstance.wrappedInstance._component');
}

StyledScrollView.prototype.scrollTo = function scrollTo(coordinates) {
  var scrollView = getRNScrollViewComponent(this);
  if (scrollView) {
    scrollView.scrollTo(coordinates);
  }
};

StyledScrollView.prototype.scrollToEnd = function scrollToEnd(animation) {
  var scrollView = getRNScrollViewComponent(this);
  if (scrollView) {
    scrollView.scrollToEnd(animation);
  }
};

exports.ScrollView = StyledScrollView;