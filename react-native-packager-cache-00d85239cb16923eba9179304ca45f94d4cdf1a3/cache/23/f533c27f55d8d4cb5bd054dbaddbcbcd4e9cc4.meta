["a52a0696ff16645159f41695e2cc74836d4eb7e1","b074f5f45531856cf78c0ecb10da67fa3e1b5462",["react","react-native","lodash","./View","@shoutem/theme","@shoutem/animation"],[116,213,253,346,379,424],{"version":3,"sources":["/home/ziddi/Desktop/venders/node_modules/@shoutem/ui/components/GridRow.js"],"names":["renderPlaceholderViews","count","times","index","GridRow","props","children","columns","missingElementsCount","Component","propTypes","PropTypes","number","isRequired","groupByRows","data","getColumnSpan","constant","groupedData","reduce","result","element","currentRow","last","rows","elementSpan","currentRowSize","push","AnimatedGridRow","StyledGridRow"],"mappings":";;;;;AAAA;;;;AACA;;AACA;;;;AAEA;;AACA;;AACA;;AAUA,SAASA,sBAAT,CAAgCC,KAAhC,EAAuC;AACrC,SAAO,iBAAEC,KAAF,CAAQD,KAAR,EAAe,UAACE,KAAD;AAAA,WAAY,4CAAM,sBAAoBA,KAA1B,GAAZ;AAAA,GAAf,CAAP;AACD;;IAIKC,O;;;;;;;;;;6BACK;AAAA,mBACuB,KAAKC,KAD5B;AAAA,UACCC,QADD,UACCA,QADD;AAAA,UACWC,OADX,UACWA,OADX;;AAEP,UAAMC,uBAAuBD,UAAU,gBAASN,KAAT,CAAeK,QAAf,CAAvC;;AAEA,aACE;AAAA;AAAY,aAAKD,KAAjB;AACGC,gBADH;AAEGN,+BAAuBQ,oBAAvB;AAFH,OADF;AAMD;;;EAXmB,gBAAMC,S;;AAc5BL,QAAQM,SAAR;AACEH,WAAS,gBAAMI,SAAN,CAAgBC,MAAhB,CAAuBC;AADlC,GAEK,kBAAOH,SAFZ;;AAqBAN,QAAQU,WAAR,GAAsB,UAACC,IAAD,EAAOR,OAAP,EAAkD;AAAA,MAAlCS,aAAkC,uEAAlB,iBAAEC,QAAF,CAAW,CAAX,CAAkB;;AACtE,MAAMC,cAAc,iBAAEC,MAAF,CAASJ,IAAT,EAAe,UAACK,MAAD,EAASC,OAAT,EAAqB;AACtD,QAAIC,aAAa,iBAAEC,IAAF,CAAOH,OAAOI,IAAd,CAAjB;AACA,QAAMC,cAAcT,cAAcK,OAAd,CAApB;;AAEA,QAAI,CAACC,UAAD,IAAgBF,OAAOM,cAAP,GAAwBD,WAAxB,GAAsClB,OAA1D,EAAoE;AAClEe,mBAAa,EAAb;AACAF,aAAOM,cAAP,GAAwB,CAAxB;AACAN,aAAOI,IAAP,CAAYG,IAAZ,CAAiBL,UAAjB;AACD;;AAEDF,WAAOM,cAAP,IAAyBD,WAAzB;AACAH,eAAWK,IAAX,CAAgBN,OAAhB;AACA,WAAOD,MAAP;AACD,GAbmB,EAajB,EAAEM,gBAAgB,CAAlB,EAAqBF,MAAM,EAA3B,EAbiB,CAApB;;AAeA,SAAON,YAAYM,IAAnB;AACD,CAjBD;;AAmBA,IAAMI,kBAAkB,iCAAiBxB,OAAjB,CAAxB;AACA,IAAMyB,gBAAgB,yBAAa,oBAAb,EAAmCD,eAAnC,CAAtB;;QAGmBxB,O,GAAjByB,a","sourcesContent":["import React, { Children } from 'react';\nimport { View as RNView } from 'react-native';\nimport _ from 'lodash';\n\nimport { View } from './View';\nimport { connectStyle } from '@shoutem/theme';\nimport { connectAnimation } from '@shoutem/animation';\n\n/**\n * Renders empty placeholder views to fill any empty space\n * left by missing views within a row. This is necessary so that\n * the items in a row remain aligned correctly.\n *\n * @param count Number of placeholders to render\n * @returns {*} Placeholder views\n */\nfunction renderPlaceholderViews(count) {\n  return _.times(count, (index) => (<View key={`placeholder-${index}`} />));\n}\n\n// Ref needed\n// eslint-disable-next-line react/prefer-stateless-function\nclass GridRow extends React.Component {\n  render() {\n    const { children, columns } = this.props;\n    const missingElementsCount = columns - Children.count(children);\n\n    return (\n      <RNView {...this.props}>\n        {children}\n        {renderPlaceholderViews(missingElementsCount)}\n      </RNView>\n    );\n  }\n}\n\nGridRow.propTypes = {\n  columns: React.PropTypes.number.isRequired,\n  ...RNView.propTypes,\n};\n\n/* eslint-disable no-param-reassign */\n/**\n * Groups data into rows for rendering in grid views.\n * Elements may need more than one column in the grid.\n * To accomplish this, a column span can be assigned to\n * each element. The column span of an element determines\n * the number of columns it should occupy.\n *\n * @param data The data elements to group.\n * @param columns The number of columns of the grid.\n * @param getColumnSpan Optional function that returns the\n *   column span of a single element. Each element has a span\n *   of 1 by default.\n * @returns {Array} An array of rows, each row is an array of\n *   data elements.\n */\nGridRow.groupByRows = (data, columns, getColumnSpan = _.constant(1)) => {\n  const groupedData = _.reduce(data, (result, element) => {\n    let currentRow = _.last(result.rows);\n    const elementSpan = getColumnSpan(element);\n\n    if (!currentRow || (result.currentRowSize + elementSpan > columns)) {\n      currentRow = [];\n      result.currentRowSize = 0;\n      result.rows.push(currentRow);\n    }\n\n    result.currentRowSize += elementSpan;\n    currentRow.push(element);\n    return result;\n  }, { currentRowSize: 0, rows: [] });\n\n  return groupedData.rows;\n};\n\nconst AnimatedGridRow = connectAnimation(GridRow);\nconst StyledGridRow = connectStyle('shoutem.ui.GridRow')(AnimatedGridRow);\n\nexport {\n  StyledGridRow as GridRow,\n};\n"]}]