Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = undefined;
var _jsxFileName = '/home/ziddi/Desktop/venders/node_modules/react-native-material-dialog/src/SinglePickerMaterialDialog.js';

var _react = require('react');

var _react2 = babelHelpers.interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = babelHelpers.interopRequireDefault(_propTypes);

var _reactNative = require('react-native');

var _MaterialIcons = require('@expo/vector-icons/MaterialIcons');

var _MaterialIcons2 = babelHelpers.interopRequireDefault(_MaterialIcons);

var _MaterialDialog = require('./MaterialDialog');

var _MaterialDialog2 = babelHelpers.interopRequireDefault(_MaterialDialog);

var _colors = require('./colors');

var _colors2 = babelHelpers.interopRequireDefault(_colors);

var SinglePickerMaterialDialog = function (_Component) {
  babelHelpers.inherits(SinglePickerMaterialDialog, _Component);

  function SinglePickerMaterialDialog(props) {
    babelHelpers.classCallCheck(this, SinglePickerMaterialDialog);

    var _this = babelHelpers.possibleConstructorReturn(this, (SinglePickerMaterialDialog.__proto__ || Object.getPrototypeOf(SinglePickerMaterialDialog)).call(this, props));

    _this.renderRow = function (row, sectionID, rowID) {
      return _react2.default.createElement(
        _reactNative.TouchableOpacity,
        { key: row.value, onPress: function onPress() {
            return _this.onRowPress(rowID);
          }, __source: {
            fileName: _jsxFileName,
            lineNumber: 73
          }
        },
        _react2.default.createElement(
          _reactNative.View,
          {
            style: styles.rowContainer, __source: {
              fileName: _jsxFileName,
              lineNumber: 74
            }
          },
          _react2.default.createElement(
            _reactNative.View,
            { style: styles.iconContainer, __source: {
                fileName: _jsxFileName,
                lineNumber: 76
              }
            },
            _react2.default.createElement(_MaterialIcons2.default, {
              name: row.selected ? 'radio-button-checked' : 'radio-button-unchecked',
              color: _this.props.colorAccent,
              size: 24, __source: {
                fileName: _jsxFileName,
                lineNumber: 77
              }
            })
          ),
          _react2.default.createElement(
            _reactNative.Text,
            {
              style: styles.rowText, __source: {
                fileName: _jsxFileName,
                lineNumber: 84
              }
            },
            row.label
          )
        )
      );
    };

    var items = props.items,
        selectedItem = props.selectedItem;


    var rows = items.map(function (item) {
      return babelHelpers.extends({}, item, { selected: false });
    });

    var selectedIndex = void 0;
    if (selectedItem != null) {
      selectedIndex = rows.findIndex(function (item) {
        return item.value === selectedItem.value;
      });

      rows[selectedIndex] = babelHelpers.extends({}, rows[selectedIndex], {
        selected: true
      });
    }

    var dataSource = new _reactNative.ListView.DataSource({
      rowHasChanged: function rowHasChanged(r1, r2) {
        return r1.value !== r2.value || r1.selected !== r2.selected;
      }
    }).cloneWithRows(rows);

    _this.state = { dataSource: dataSource, rows: rows, selectedIndex: selectedIndex };
    return _this;
  }

  babelHelpers.createClass(SinglePickerMaterialDialog, [{
    key: 'componentWillReceiveProps',
    value: function componentWillReceiveProps(nextProps) {
      var items = nextProps.items,
          selectedItem = nextProps.selectedItem;


      var rows = items.map(function (item) {
        return babelHelpers.extends({}, item, { selected: false });
      });

      var selectedIndex = void 0;
      if (selectedItem != null) {
        selectedIndex = rows.findIndex(function (item) {
          return item.value === selectedItem.value;
        });

        rows[selectedIndex] = babelHelpers.extends({}, rows[selectedIndex], {
          selected: true
        });
      }

      var dataSource = this.state.dataSource.cloneWithRows(rows);

      this.setState({ dataSource: dataSource, rows: rows, selectedIndex: selectedIndex });
    }
  }, {
    key: 'onRowPress',
    value: function onRowPress(rowID) {
      var rows = [].concat(babelHelpers.toConsumableArray(this.state.rows));
      var selectedIndex = this.state.selectedIndex;


      if (selectedIndex != null) {
        rows[selectedIndex] = babelHelpers.extends({}, rows[selectedIndex], { selected: false });
      }
      rows[rowID] = babelHelpers.extends({}, rows[rowID], { selected: true });

      var dataSource = this.state.dataSource.cloneWithRows(rows);

      this.setState({ dataSource: dataSource, rows: rows, selectedIndex: rowID });
    }
  }, {
    key: 'render',
    value: function render() {
      var _this2 = this;

      return _react2.default.createElement(
        _MaterialDialog2.default,
        {
          title: this.props.title,
          titleColor: this.props.titleColor,
          colorAccent: this.props.colorAccent,
          visible: this.props.visible,
          okLabel: this.props.okLabel,
          scrolled: this.props.scrolled,
          onOk: function onOk() {
            return _this2.props.onOk({
              selectedItem: _this2.state.rows[_this2.state.selectedIndex]
            });
          },
          cancelLabel: this.props.cancelLabel,
          onCancel: function onCancel() {
            _this2.props.onCancel();
          }, __source: {
            fileName: _jsxFileName,
            lineNumber: 92
          }
        },
        _react2.default.createElement(_reactNative.ListView, { dataSource: this.state.dataSource, renderRow: this.renderRow, __source: {
            fileName: _jsxFileName,
            lineNumber: 110
          }
        })
      );
    }
  }]);
  return SinglePickerMaterialDialog;
}(_react.Component);

exports.default = SinglePickerMaterialDialog;


var styles = _reactNative.StyleSheet.create({
  rowContainer: {
    height: 56,
    flex: 1,
    flexDirection: 'row',
    justifyContent: 'flex-start',
    alignItems: 'center'
  },
  iconContainer: {
    marginRight: 16
  },
  rowText: babelHelpers.extends({}, _reactNative.Platform.select({
    android: {
      fontFamily: 'sans-serif-medium'
    },
    ios: {
      fontWeight: '600'
    }
  }), {
    color: _colors2.default.androidPrimaryTextColor,
    fontSize: 16
  })
});

SinglePickerMaterialDialog.propTypes = {
  visible: _propTypes2.default.bool.isRequired,
  items: _propTypes2.default.arrayOf(_propTypes2.default.object).isRequired,
  selectedItem: _propTypes2.default.object,
  title: _propTypes2.default.string,
  titleColor: _propTypes2.default.string,
  colorAccent: _propTypes2.default.string,
  onCancel: _propTypes2.default.func.isRequired,
  onOk: _propTypes2.default.func.isRequired,
  cancelLabel: _propTypes2.default.string,
  okLabel: _propTypes2.default.string,
  scrolled: _propTypes2.default.bool
};

SinglePickerMaterialDialog.defaultProps = {
  selectedItem: undefined,
  titleColor: undefined,
  colorAccent: _colors2.default.androidColorAccent,
  cancelLabel: undefined,
  okLabel: undefined,
  scrolled: false
};