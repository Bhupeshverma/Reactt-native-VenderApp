["e84c80a01b0e700dfb6383118facafa5caa07446","7bd8dce1214925e340f0c024f773858857d50dc1",["react","prop-types","react-native","@expo/vector-icons/MaterialIcons","./MaterialDialog","./colors"],[116,211,321,368,511,632],{"version":3,"sources":["/home/ziddi/Desktop/venders/node_modules/react-native-material-dialog/src/SinglePickerMaterialDialog.js"],"names":["SinglePickerMaterialDialog","props","renderRow","row","sectionID","rowID","value","onRowPress","styles","rowContainer","iconContainer","selected","colorAccent","rowText","label","items","selectedItem","rows","map","item","selectedIndex","findIndex","dataSource","DataSource","rowHasChanged","r1","r2","cloneWithRows","state","nextProps","setState","title","titleColor","visible","okLabel","scrolled","onOk","cancelLabel","onCancel","create","height","flex","flexDirection","justifyContent","alignItems","marginRight","select","android","fontFamily","ios","fontWeight","color","androidPrimaryTextColor","fontSize","propTypes","bool","isRequired","arrayOf","object","string","func","defaultProps","undefined","androidColorAccent"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { StyleSheet, Text, TouchableOpacity, View, ListView, Platform } from 'react-native';\nimport Icon from 'react-native-vector-icons/MaterialIcons';\nimport MaterialDialog from './MaterialDialog';\n\nimport colors from './colors';\n\nexport default class SinglePickerMaterialDialog extends Component {\n\n  constructor(props) {\n    super(props);\n\n    const { items, selectedItem } = props;\n\n    const rows = items.map(item => Object.assign({}, item, { selected: false }));\n\n    let selectedIndex;\n    if (selectedItem != null) {\n      selectedIndex = rows.findIndex(item => item.value === selectedItem.value);\n\n      rows[selectedIndex] = Object.assign({}, rows[selectedIndex], {\n        selected: true,\n      });\n    }\n\n    const dataSource = new ListView.DataSource({\n      rowHasChanged: (r1, r2) => r1.value !== r2.value || r1.selected !== r2.selected,\n    }).cloneWithRows(rows);\n\n    this.state = { dataSource, rows, selectedIndex };\n  }\n\n  // TODO: Extract common logic with the constructor\n  // Refreshing the dataSource when we refresh any prop (such as visible)\n  componentWillReceiveProps(nextProps) {\n    const { items, selectedItem } = nextProps;\n\n    const rows = items.map(item => Object.assign({}, item, { selected: false }));\n\n    let selectedIndex;\n    if (selectedItem != null) {\n      selectedIndex = rows.findIndex(item => item.value === selectedItem.value);\n\n      rows[selectedIndex] = Object.assign({}, rows[selectedIndex], {\n        selected: true,\n      });\n    }\n\n    const dataSource = this.state.dataSource.cloneWithRows(rows);\n\n    this.setState({ dataSource, rows, selectedIndex });\n  }\n\n  onRowPress(rowID) {\n    const rows = [...this.state.rows];\n    const { selectedIndex } = this.state;\n\n    if (selectedIndex != null) {\n      rows[selectedIndex] = Object.assign({}, rows[selectedIndex], { selected: false });\n    }\n    rows[rowID] = Object.assign({}, rows[rowID], { selected: true });\n\n    const dataSource = this\n      .state\n      .dataSource\n      .cloneWithRows(rows);\n\n    this.setState({ dataSource, rows, selectedIndex: rowID });\n  }\n\n  renderRow = (row, sectionID, rowID) => (\n    <TouchableOpacity key={row.value} onPress={() => this.onRowPress(rowID)}>\n      <View\n        style={styles.rowContainer}>\n        <View style={styles.iconContainer}>\n          <Icon\n            name={row.selected\n            ? 'radio-button-checked'\n            : 'radio-button-unchecked'}\n            color={this.props.colorAccent}\n            size={24} />\n        </View>\n        <Text\n          style={styles.rowText}>{row.label}</Text>\n      </View>\n    </TouchableOpacity>\n    );\n\n  render() {\n    return (\n      <MaterialDialog\n        title={this.props.title}\n        titleColor={this.props.titleColor}\n        colorAccent={this.props.colorAccent}\n        visible={this.props.visible}\n        okLabel={this.props.okLabel}\n        scrolled={this.props.scrolled}\n        onOk={() => this.props.onOk({\n          selectedItem: this\n          .state\n          .rows[this.state.selectedIndex],\n        })}\n        cancelLabel={this.props.cancelLabel}\n        onCancel={() => {\n          this\n          .props\n          .onCancel();\n        }}>\n        <ListView dataSource={this.state.dataSource} renderRow={this.renderRow} />\n      </MaterialDialog>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  rowContainer: {\n    height: 56,\n    flex: 1,\n    flexDirection: 'row',\n    justifyContent: 'flex-start',\n    alignItems: 'center',\n  },\n  iconContainer:\n  {\n    marginRight: 16,\n  },\n  rowText:\n  {\n    ...Platform.select({\n      android: {\n        fontFamily: 'sans-serif-medium',\n      },\n      ios:  {\n        fontWeight: '600'\n      }\n    }),\n    color: colors.androidPrimaryTextColor,\n    fontSize: 16,\n  },\n});\n\nSinglePickerMaterialDialog.propTypes = {\n  visible: PropTypes.bool.isRequired,\n  items: PropTypes.arrayOf(PropTypes.object).isRequired,\n  selectedItem: PropTypes.object,\n  title: PropTypes.string,\n  titleColor: PropTypes.string,\n  colorAccent: PropTypes.string,\n  onCancel: PropTypes.func.isRequired,\n  onOk: PropTypes.func.isRequired,\n  cancelLabel: PropTypes.string,\n  okLabel: PropTypes.string,\n  scrolled: PropTypes.bool,\n};\n\nSinglePickerMaterialDialog.defaultProps = {\n  selectedItem: undefined,\n  titleColor: undefined,\n  colorAccent: colors.androidColorAccent,\n  cancelLabel: undefined,\n  okLabel: undefined,\n  scrolled: false,\n};\n"]}]