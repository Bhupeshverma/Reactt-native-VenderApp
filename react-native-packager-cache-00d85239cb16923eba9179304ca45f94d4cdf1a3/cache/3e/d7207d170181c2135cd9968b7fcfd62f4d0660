Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ImageGalleryBase = undefined;

var _class, _temp;

var _react = require('react');

var _react2 = babelHelpers.interopRequireDefault(_react);

var _lodash = require('lodash');

var _lodash2 = babelHelpers.interopRequireDefault(_lodash);

var _index = require('../../index');

var IMAGE_PREVIEW_MODE = 'imagePreview';
var IMAGE_GALLERY_MODE = 'gallery';

var ImageGalleryBase = exports.ImageGalleryBase = (_temp = _class = function (_Component) {
  babelHelpers.inherits(ImageGalleryBase, _Component);

  function ImageGalleryBase(props) {
    babelHelpers.classCallCheck(this, ImageGalleryBase);

    var _this = babelHelpers.possibleConstructorReturn(this, (ImageGalleryBase.__proto__ || Object.getPrototypeOf(ImageGalleryBase)).call(this, props));

    _this.renderPage = _this.renderPage.bind(_this);
    _this.onIndexSelected = _this.onIndexSelected.bind(_this);
    _this.onImageTap = _this.onImageTap.bind(_this);

    _this.state = {
      selectedIndex: _this.props.selectedIndex || 0,
      imageSwitchingEnabled: true,
      collapsed: true,
      mode: IMAGE_GALLERY_MODE
    };
    return _this;
  }

  babelHelpers.createClass(ImageGalleryBase, [{
    key: 'onImageTap',
    value: function onImageTap() {
      var mode = this.state.mode;

      if (mode === IMAGE_PREVIEW_MODE) {
        this.setMode(IMAGE_GALLERY_MODE);
      } else {
        this.setMode(IMAGE_PREVIEW_MODE);
      }
    }
  }, {
    key: 'onIndexSelected',
    value: function onIndexSelected(newIndex) {
      var onIndexSelected = this.props.onIndexSelected;

      this.setState({
        selectedIndex: newIndex
      }, function () {
        if (_lodash2.default.isFunction(onIndexSelected)) {
          onIndexSelected(newIndex);
        }
      });
    }
  }, {
    key: 'setMode',
    value: function setMode(mode) {
      var onModeChanged = this.props.onModeChanged;

      if (this.state.mode === mode) {
        return;
      }

      this.setState({ mode: mode }, function () {
        if (_lodash2.default.isFunction(onModeChanged)) {
          onModeChanged(mode);
        }
      });
    }
  }, {
    key: 'renderImage',
    value: function renderImage() {}
  }, {
    key: 'renderPage',
    value: function renderPage(pageData, pageIndex) {
      var _state = this.state,
          mode = _state.mode,
          selectedIndex = _state.selectedIndex;
      var _props = this.props,
          style = _props.style,
          renderImageOverlay = _props.renderImageOverlay;

      var image = _lodash2.default.get(pageData, 'source.uri');

      if (!image) {
        return null;
      }

      var isImageVisible = pageIndex === selectedIndex;
      var transformImageProps = _index.Image.getPropsTransformer();
      var imageProps = {
        source: { uri: image },
        style: { flex: 1 }
      };
      var transformedImageProps = _lodash2.default.isFunction(transformImageProps) ? transformImageProps(imageProps) : imageProps;

      var showOverlay = _lodash2.default.isFunction(renderImageOverlay) && mode !== IMAGE_PREVIEW_MODE && isImageVisible;
      var overlay = showOverlay && renderImageOverlay(pageData, pageIndex);

      return _react2.default.createElement(
        _index.View,
        {
          key: pageIndex,
          style: style.page
        },
        this.renderImage(transformedImageProps, pageData, pageIndex),
        overlay
      );
    }
  }, {
    key: 'render',
    value: function render() {
      var _props2 = this.props,
          data = _props2.data,
          renderOverlay = _props2.renderOverlay,
          renderPlaceholder = _props2.renderPlaceholder,
          style = _props2.style;
      var _state2 = this.state,
          selectedIndex = _state2.selectedIndex,
          imageSwitchingEnabled = _state2.imageSwitchingEnabled;


      return _react2.default.createElement(
        _index.View,
        {
          style: style.container,
          driver: this.timingDriver
        },
        _react2.default.createElement(_index.HorizontalPager, {
          data: data,
          onIndexSelected: this.onIndexSelected,
          selectedIndex: selectedIndex,
          renderPage: this.renderPage,
          bounces: true,
          pageMargin: style.pageMargin,
          showNextPage: false,
          renderOverlay: renderOverlay,
          renderPlaceholder: renderPlaceholder,
          scrollEnabled: imageSwitchingEnabled
        })
      );
    }
  }]);
  return ImageGalleryBase;
}(_react.Component), _class.IMAGE_PREVIEW_MODE = IMAGE_PREVIEW_MODE, _class.IMAGE_GALLERY_MODE = IMAGE_GALLERY_MODE, _class.propTypes = {
  data: _react.PropTypes.arrayOf(_react.PropTypes.shape({
    source: _react.PropTypes.shape({
      uri: _react.PropTypes.string
    }),
    description: _react.PropTypes.string,
    title: _react.PropTypes.string
  })).isRequired,

  onIndexSelected: _react.PropTypes.func,

  selectedIndex: _react.PropTypes.number,

  onModeChanged: _react.PropTypes.func,

  style: _react.PropTypes.object,

  renderOverlay: _react.PropTypes.func,

  renderImageOverlay: _react.PropTypes.func,

  renderPlaceholder: _react.PropTypes.func
}, _class.defaultProps = {
  selectedIndex: 0,
  showNextPage: false,
  renderPlaceholder: function renderPlaceholder() {
    return _react2.default.createElement(_index.LoadingIndicator, null);
  }
}, _temp);