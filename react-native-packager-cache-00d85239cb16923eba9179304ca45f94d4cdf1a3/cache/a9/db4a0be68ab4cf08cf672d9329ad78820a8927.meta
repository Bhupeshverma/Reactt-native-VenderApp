["f0bda93bf7f05f4d8d9800577e3618d123962eaf","66cb000f8d96b773eb886a425a4f46eed951766a",["react","react-native","@shoutem/theme","./Spinner","lodash"],[137,234,273,316,353],{"version":3,"sources":["/home/ziddi/Desktop/venders/node_modules/@shoutem/ui/components/ListView.js"],"names":["scrollViewProps","keys","propTypes","Status","LOADING","LOADING_NEXT","REFRESHING","IDLE","ListDataSource","config","getSectionId","withSections","sectionHeaderHasChanged","dataSource","DataSource","data","prevSectionId","reduce","sections","item","sectionId","push","lastSectionIndex","length","cloneWithRowsAndSections","groupItemsIntoSections","cloneWithRows","ListView","props","context","handleListViewRef","bind","renderFooter","autoHideHeader","onRefresh","renderRefreshControl","listView","listDataSource","rowHasChanged","r1","r2","renderSectionHeader","s1","s2","undefined","getSectionHeaderData","dataBlob","state","status","loading","clone","nextProps","setState","setLoading","nextState","OS","setNetworkActivityIndicatorVisible","mappedProps","onEndReachedThreshold","enableEmptySections","style","list","contentContainerStyle","listContent","renderHeader","createRenderHeader","renderRow","onEndReached","createOnLoadMore","refreshControl","ref","onLoadMore","throttle","isEmpty","leading","height","nativeEvent","layout","scrollListView","y","animated","headerContainerProps","headerContainer","onLayout","scrollOptions","scrollTo","spinner","showNetworkActivity","loadMoreSpinner","refreshControlStyle","tintColor","getPropsToPass","Component","PropTypes","bool","object","array","func","scrollDriver","StyledListView","paddingBottom","paddingVertical","getRNListViewComponent","get","prototype","coordinates","scrollToEnd","animation"],"mappings":"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","sourcesContent":["import React from 'react';\nimport {\n  View,\n  ListView as RNListView,\n  RefreshControl,\n  StatusBar,\n  Platform,\n  ScrollView,\n} from 'react-native';\nimport { connectStyle } from '@shoutem/theme';\nimport { Spinner } from './Spinner';\nimport _ from 'lodash';\n\nconst scrollViewProps = _.keys(ScrollView.propTypes);\n\nconst Status = {\n  LOADING: 'loading',\n  LOADING_NEXT: 'loadingNext',\n  REFRESHING: 'refreshing',\n  IDLE: 'idle',\n};\n\n/**\n * Provides dataSource to ListView.\n * Clones items and group them by section if needed.\n */\nclass ListDataSource {\n  constructor(config, getSectionId) {\n    this.getSectionId = getSectionId;\n    this.withSections = !!config.sectionHeaderHasChanged;\n    this.dataSource = new RNListView.DataSource(config);\n  }\n\n  /**\n   * Transforms items list ([...items]) to [[...sectionItems], [...sectionItems]]\n   * @param data\n   * @returns {*}\n   */\n  groupItemsIntoSections(data) {\n    let prevSectionId;\n    return data.reduce((sections, item) => {\n      const sectionId = this.getSectionId(item);\n      if (prevSectionId !== sectionId) {\n        prevSectionId = sectionId;\n        sections.push([]);\n      }\n      const lastSectionIndex = sections.length - 1;\n      sections[lastSectionIndex].push(item);\n      return sections;\n    }, []);\n  }\n\n  /**\n   * Transforms items list [<item>, <item>]\n   * @param data\n   * @returns {*}\n   */\n  clone(data) {\n    if (this.withSections) {\n      return this.dataSource.cloneWithRowsAndSections(this.groupItemsIntoSections(data));\n    }\n    return this.dataSource.cloneWithRows(data);\n  }\n}\n\nclass ListView extends React.Component {\n  static propTypes = {\n    autoHideHeader: React.PropTypes.bool,\n    style: React.PropTypes.object,\n    data: React.PropTypes.array,\n    loading: React.PropTypes.bool,\n    onLoadMore: React.PropTypes.func,\n    onRefresh: React.PropTypes.func,\n    getSectionId: React.PropTypes.func,\n    renderRow: React.PropTypes.func,\n    renderHeader: React.PropTypes.func,\n    renderFooter: React.PropTypes.func,\n    renderSectionHeader: React.PropTypes.func,\n    scrollDriver: React.PropTypes.object,\n    // TODO(Braco) - add render separator\n  };\n\n  constructor(props, context) {\n    super(props, context);\n    this.handleListViewRef = this.handleListViewRef.bind(this);\n    this.renderFooter = this.renderFooter.bind(this);\n    this.autoHideHeader = this.autoHideHeader.bind(this);\n    this.onRefresh = this.onRefresh.bind(this);\n    this.renderRefreshControl = this.renderRefreshControl.bind(this);\n    this.listView = null;\n\n\n    this.listDataSource = new ListDataSource({\n      rowHasChanged: (r1, r2) => r1 !== r2,\n      sectionHeaderHasChanged: props.renderSectionHeader ? (s1, s2) => s1 !== s2 : undefined,\n      getSectionHeaderData: (dataBlob, sectionId) => props.getSectionId(dataBlob[sectionId][0]),\n    }, props.getSectionId);\n\n\n    this.state = {\n      status: props.loading ? Status.LOADING : Status.IDLE,\n      dataSource: this.listDataSource.clone(props.data),\n    };\n  }\n\n  componentWillReceiveProps(nextProps) {\n    if (nextProps.data !== this.props.data) {\n      this.setState({ dataSource: this.listDataSource.clone(nextProps.data) });\n    }\n\n    if (nextProps.loading !== this.props.loading) {\n      this.setLoading(nextProps.loading);\n    }\n  }\n\n  shouldComponentUpdate(nextProps, nextState) {\n    return (nextProps.data !== this.props.data) ||\n      (nextProps.loading !== this.props.loading) ||\n      (nextState.status !== this.state.status);\n  }\n\n  componentWillUnmount() {\n    if ((Platform.OS === 'ios') && (this.state.status !== Status.IDLE)) {\n      // Reset the global network indicator state\n      StatusBar.setNetworkActivityIndicatorVisible(false);\n    }\n  }\n\n  onRefresh() {\n    this.setState({\n      status: Status.REFRESHING,\n    });\n\n    if (this.props.onRefresh) {\n      this.props.onRefresh();\n    }\n  }\n\n  /**\n   * Used to map props we are passing to React Native ListView.\n   * Setting default values.\n   * @returns {{}}\n   */\n  getPropsToPass() {\n    const props = this.props;\n    const mappedProps = {\n      ...props,\n    };\n\n    // configuration\n    // default load more threshold\n    mappedProps.onEndReachedThreshold = 40;\n    // React native warning\n    // NOTE: In react 0.23 it can't be set to false\n    mappedProps.enableEmptySections = true;\n\n    // style\n    mappedProps.style = props.style.list;\n\n    mappedProps.contentContainerStyle = props.style.listContent;\n\n    // rendering\n    mappedProps.renderHeader = this.createRenderHeader(props.renderHeader, props.autoHideHeader);\n    mappedProps.renderRow = props.renderRow;\n    mappedProps.renderFooter = this.renderFooter;\n    mappedProps.renderSectionHeader = props.renderSectionHeader;\n\n    // events\n    mappedProps.onEndReached = this.createOnLoadMore();\n\n    // data to display\n    mappedProps.dataSource = this.state.dataSource;\n\n    // refresh control\n    mappedProps.refreshControl = props.onRefresh && this.renderRefreshControl();\n\n    // reference\n    mappedProps.ref = this.handleListViewRef;\n\n    return mappedProps;\n  }\n\n  setLoading(loading) {\n    if (loading) {\n      if (this.state.status !== Status.IDLE) {\n        // We are already in a loading status\n        return;\n      }\n\n      this.setState({\n        status: Status.LOADING,\n      });\n    } else {\n      this.setState({\n        status: Status.IDLE,\n      });\n    }\n  }\n\n  // eslint-disable-next-line consistent-return\n  createOnLoadMore() {\n    const { onLoadMore, data } = this.props;\n    const { status } = this.state;\n    if (onLoadMore) {\n      return _.throttle(() => {\n        if (!_.isEmpty(data) && status === Status.IDLE) {\n          onLoadMore();\n        }\n      }, 2000, { leading: true });\n    }\n  }\n\n  autoHideHeader({ nativeEvent: { layout: { height } } }) {\n    this.scrollListView({ y: height, animated: false });\n  }\n\n  createRenderHeader(renderHeader, autoHideHeader) {\n    if (!renderHeader) {\n      return;\n    }\n\n    const { style } = this.props;\n    const headerContainerProps = {\n      style: style.headerContainer,\n    };\n\n    if (autoHideHeader) {\n      headerContainerProps.onLayout = this.autoHideHeader;\n    }\n\n    // eslint-disable-next-line consistent-return\n    return () => (\n      <View {...headerContainerProps}>{renderHeader()}</View>\n    );\n  }\n\n  scrollListView(scrollOptions) {\n    this.listView.scrollTo(scrollOptions);\n  }\n\n  /**\n   * Save RN ListView ref\n   * @param listView React native ListView ref\n   */\n  handleListViewRef(listView) {\n    if (!listView) {\n      return;\n    }\n\n    this.listView = listView;\n  }\n\n  renderFooter() {\n    const { style, renderFooter } = this.props;\n    const { status } = this.state;\n    let spinner;\n\n    let showNetworkActivity = true;\n    switch (status) {\n      case Status.LOADING:\n        spinner = <View style={style.loadMoreSpinner}><Spinner /></View>;\n        break;\n      case Status.LOADING_NEXT:\n        spinner = <View style={style.loadMoreSpinner}><Spinner /></View>;\n        break;\n      case Status.REFRESHING:\n        spinner = null;\n        break;\n      default:\n        showNetworkActivity = false;\n        spinner = null;\n    }\n\n    if (Platform.OS === 'ios') {\n      StatusBar.setNetworkActivityIndicatorVisible(showNetworkActivity);\n    }\n\n    return (\n      <View>\n        {spinner}\n        {renderFooter ? renderFooter() : null}\n      </View>\n    );\n  }\n\n  renderRefreshControl() {\n    const { style } = this.props;\n    const { status } = this.state;\n    const refreshControlStyle = {\n      ...style.refreshControl,\n    };\n    delete refreshControlStyle.tintColor;\n\n    return (\n      <RefreshControl\n        onRefresh={this.onRefresh}\n        refreshing={status === Status.REFRESHING}\n        tintColor={style.refreshControl.tintColor}\n        style={refreshControlStyle}\n      />\n    );\n  }\n\n  render() {\n    return <RNListView {...this.getPropsToPass()} />;\n  }\n}\n\nconst StyledListView = connectStyle('shoutem.ui.ListView', {\n  listContent: {\n    paddingBottom: 5,\n  },\n  refreshControl: {\n    tintColor: '#ccc',\n  },\n  loadMoreSpinner: {\n    paddingVertical: 25,\n  },\n})(ListView);\n\nfunction getRNListViewComponent(context) {\n  return _.get(context, 'wrappedInstance.listView');\n}\n\nStyledListView.prototype.scrollTo = function scrollTo(coordinates) {\n  const listView = getRNListViewComponent(this);\n  if (listView) {\n    listView.scrollTo(coordinates);\n  }\n};\n\nStyledListView.prototype.scrollToEnd = function scrollToEnd(animation) {\n  const listView = getRNListViewComponent(this);\n  if (listView) {\n    listView.scrollToEnd(animation);\n  }\n};\n\nexport {\n  StyledListView as ListView,\n};\n"]}]