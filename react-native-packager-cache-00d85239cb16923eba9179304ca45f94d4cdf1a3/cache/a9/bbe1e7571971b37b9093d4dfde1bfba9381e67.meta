["f003918aaefd813b7ce4831e4a34c3733354b68c","6980ecd552c0b4b0051e0a8f34a20e2619ec3b0c",["react","react-native-drawer-layout-polyfill","../../addNavigationHelpers","./DrawerSidebar"],[116,233,421,571],{"version":3,"sources":["/home/ziddi/Desktop/venders/node_modules/react-navigation/src/views/Drawer/DrawerView.js"],"names":["DrawerView","_handleDrawerOpen","navigation","props","state","routes","index","routeName","navigate","_handleDrawerClose","_updateScreenNavigation","navigationState","find","route","_screenNavigationProp","_getNavigationState","_renderNavigationView","screenProps","router","contentComponent","contentOptions","style","nextProps","_drawer","openDrawer","closeDrawer","DrawerScreen","getComponentForRouteName","c","drawerWidth","drawerPosition","positions","Right","Left"],"mappings":"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","sourcesContent":["/* @flow */\n\nimport React, { PureComponent } from 'react';\nimport DrawerLayout from 'react-native-drawer-layout-polyfill';\n\nimport addNavigationHelpers from '../../addNavigationHelpers';\nimport DrawerSidebar from './DrawerSidebar';\n\nimport type {\n  NavigationScreenProp,\n  NavigationRoute,\n  NavigationRouter,\n  NavigationState,\n  NavigationAction,\n  NavigationDrawerScreenOptions,\n  Style,\n} from '../../TypeDefinition';\n\nexport type DrawerScene = {\n  route: NavigationRoute,\n  focused: boolean,\n  index: number,\n  tintColor?: string,\n};\n\nexport type DrawerItem = {\n  route: NavigationRoute,\n  focused: boolean,\n};\n\nexport type DrawerViewConfig = {\n  drawerWidth: number,\n  drawerPosition: 'left' | 'right',\n  contentComponent: ReactClass<*>,\n  contentOptions?: {},\n  style?: Style,\n};\n\ntype Props = DrawerViewConfig & {\n  screenProps?: {},\n  router: NavigationRouter<\n    NavigationState,\n    NavigationAction,\n    NavigationDrawerScreenOptions\n  >,\n  navigation: NavigationScreenProp<NavigationState, NavigationAction>,\n};\n\n/**\n * Component that renders the drawer.\n */\nexport default class DrawerView<T: *> extends PureComponent<void, Props, void> {\n  props: Props;\n\n  componentWillMount() {\n    this._updateScreenNavigation(this.props.navigation);\n  }\n\n  componentWillReceiveProps(nextProps: Props) {\n    if (\n      this.props.navigation.state.index !== nextProps.navigation.state.index\n    ) {\n      const { routes, index } = nextProps.navigation.state;\n      if (routes[index].routeName === 'DrawerOpen') {\n        this._drawer.openDrawer();\n      } else {\n        this._drawer.closeDrawer();\n      }\n    }\n    this._updateScreenNavigation(nextProps.navigation);\n  }\n\n  _screenNavigationProp: NavigationScreenProp<T, NavigationAction>;\n\n  _handleDrawerOpen = () => {\n    const { navigation } = this.props;\n    const { routes, index } = navigation.state;\n    if (routes[index].routeName !== 'DrawerOpen') {\n      this.props.navigation.navigate('DrawerOpen');\n    }\n  };\n\n  _handleDrawerClose = () => {\n    const { navigation } = this.props;\n    const { routes, index } = navigation.state;\n    if (routes[index].routeName !== 'DrawerClose') {\n      this.props.navigation.navigate('DrawerClose');\n    }\n  };\n\n  _updateScreenNavigation = (\n    navigation: NavigationScreenProp<NavigationState, NavigationAction>\n  ) => {\n    const navigationState = navigation.state.routes.find(\n      (route: *) => route.routeName === 'DrawerClose'\n    );\n    if (\n      this._screenNavigationProp &&\n      this._screenNavigationProp.state === navigationState\n    ) {\n      return;\n    }\n    this._screenNavigationProp = addNavigationHelpers({\n      ...navigation,\n      state: navigationState,\n    });\n  };\n\n  _getNavigationState = (\n    navigation: NavigationScreenProp<NavigationState, NavigationAction>\n  ) => {\n    const navigationState = navigation.state.routes.find(\n      (route: *) => route.routeName === 'DrawerClose'\n    );\n    return navigationState;\n  };\n\n  _renderNavigationView = () => (\n    <DrawerSidebar\n      screenProps={this.props.screenProps}\n      navigation={this._screenNavigationProp}\n      router={this.props.router}\n      contentComponent={this.props.contentComponent}\n      contentOptions={this.props.contentOptions}\n      style={this.props.style}\n    />\n  );\n\n  _drawer: any;\n\n  render() {\n    const DrawerScreen = this.props.router.getComponentForRouteName(\n      'DrawerClose'\n    );\n    return (\n      <DrawerLayout\n        ref={(c: *) => {\n          this._drawer = c;\n        }}\n        drawerWidth={this.props.drawerWidth}\n        onDrawerOpen={this._handleDrawerOpen}\n        onDrawerClose={this._handleDrawerClose}\n        renderNavigationView={this._renderNavigationView}\n        drawerPosition={\n          this.props.drawerPosition === 'right'\n            ? DrawerLayout.positions.Right\n            : DrawerLayout.positions.Left\n        }\n      >\n        <DrawerScreen\n          screenProps={this.props.screenProps}\n          navigation={this._screenNavigationProp}\n        />\n      </DrawerLayout>\n    );\n  }\n}\n"]}]