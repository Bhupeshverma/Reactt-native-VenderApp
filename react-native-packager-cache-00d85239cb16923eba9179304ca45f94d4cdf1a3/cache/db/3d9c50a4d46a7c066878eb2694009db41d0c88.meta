["d5d0a4b4367d4bb96c393e85ec580dc70018e76d","24a1c9a951edcce5d5dac373006725e5bc81c910",["react","react-native","lodash","html-entities","../Html"],[241,338,378,479,518],{"version":3,"sources":["/home/ziddi/Desktop/venders/node_modules/@shoutem/ui/html/elements/Text.js"],"names":["isText","removeWhiteSpace","decodeHtmlEntities","TextElement","html","isWhiteSpaceWrappedWithText","element","size","childElements","isWhiteSpaceString","isString","trim","length","isWhiteSpace","elementTag","get","filter","child","map","decode","props","textualChildElements","height","propTypes"],"mappings":";;;QAqBgBA,M,GAAAA,M;QAKAC,gB,GAAAA,gB;QAIAC,kB,GAAAA,kB;QAIAC,W,GAAAA,W;;AAlChB;;;;AACA;;AACA;;;;AACA;;AAEA;;AAEA,IAAMC,OAAO,mCAAb;;AAEA,SAASC,2BAAT,CAAqCC,OAArC,EAA8C;AAC5C,SAAO,iBAAEC,IAAF,CAAOD,QAAQE,aAAf,MAAkC,CAAlC,IAAuCC,mBAAmBH,QAAQE,aAAR,CAAsB,CAAtB,CAAnB,CAA9C;AACD;;AAED,SAASC,kBAAT,CAA4BH,OAA5B,EAAqC;AACnC,SAAO,iBAAEI,QAAF,CAAWJ,OAAX,KAAuBA,QAAQK,IAAR,GAAeC,MAAf,KAA0B,CAAxD;AACD;;AAED,SAASC,YAAT,CAAsBP,OAAtB,EAA+B;AAC7B,SAAOG,mBAAmBH,OAAnB,KAA+BD,4BAA4BC,OAA5B,CAAtC;AACD;;AAEM,SAASN,MAAT,CAAgBM,OAAhB,EAAyB;AAC9B,MAAMQ,aAAa,iBAAEC,GAAF,CAAMT,OAAN,EAAe,KAAf,CAAnB;AACA,SAAO,iBAAEI,QAAF,CAAWJ,OAAX,KAAuBQ,eAAe,MAA7C;AACD;;AAEM,SAASb,gBAAT,CAA0BO,aAA1B,EAAyC;AAC9C,SAAOA,cAAcQ,MAAd,CAAqB;AAAA,WAAS,CAACH,aAAaI,KAAb,CAAV;AAAA,GAArB,CAAP;AACD;;AAEM,SAASf,kBAAT,CAA4BM,aAA5B,EAA2C;AAChD,SAAO,iBAAEU,GAAF,CAAMV,aAAN,EAAqB,UAACF,OAAD;AAAA,WAAa,iBAAEI,QAAF,CAAWJ,OAAX,IAAsBF,KAAKe,MAAL,CAAYb,OAAZ,CAAtB,GAA6CA,OAA1D;AAAA,GAArB,CAAP;AACD;;AAEM,SAASH,WAAT,CAAqBiB,KAArB,EAA4B;AAGjC,MAAMC,uBAAuBnB,mBAAmBD,iBAAiBmB,MAAMZ,aAAvB,CAAnB,CAA7B;;AAEA,MAAIa,qBAAqBT,MAArB,KAAgC,CAApC,EAAuC;AAIrC,WAAO,mDAAM,OAAO,EAAEU,QAAQ,CAAV,EAAb,GAAP;AACD;;AAID,SAAO;AAAA;AAAUF,SAAV;AAAkBC;AAAlB,GAAP;AACD;;AAEDlB,YAAYoB,SAAZ;;kBAIe,iDAAgCpB,WAAhC,C","sourcesContent":["import React from 'react';\nimport { Text } from 'react-native';\nimport _ from 'lodash';\nimport { AllHtmlEntities as Entities } from 'html-entities';\n\nimport { ElementPropTypes, combineMappers, mapElementProps } from '../Html';\n\nconst html = new Entities();\n\nfunction isWhiteSpaceWrappedWithText(element) {\n  return _.size(element.childElements) === 1 && isWhiteSpaceString(element.childElements[0]);\n}\n\nfunction isWhiteSpaceString(element) {\n  return _.isString(element) && element.trim().length === 0;\n}\n\nfunction isWhiteSpace(element) {\n  return isWhiteSpaceString(element) || isWhiteSpaceWrappedWithText(element);\n}\n\nexport function isText(element) {\n  const elementTag = _.get(element, 'tag');\n  return _.isString(element) || elementTag === 'text';\n}\n\nexport function removeWhiteSpace(childElements) {\n  return childElements.filter(child => !isWhiteSpace(child));\n}\n\nexport function decodeHtmlEntities(childElements) {\n  return _.map(childElements, (element) => _.isString(element) ? html.decode(element) : element);\n}\n\nexport function TextElement(props) {\n  // Remove empty white space lines used just to move element in new line.\n  // Use \"p\" or \"br\" to add new line.\n  const textualChildElements = decodeHtmlEntities(removeWhiteSpace(props.childElements));\n\n  if (textualChildElements.length === 0) {\n    // Even if there is no children to render, the Text must be rendered\n    // because otherwise RN may render a View to wrap a \"null\" which may lead to\n    // a case where a View is in the Text.\n    return <Text style={{ height: 0 }} />;\n  }\n\n  // Must be the RN Text so that style inheritance chain\n  // doesn't break with additional layer.\n  return <Text {...props}>{textualChildElements}</Text>;\n}\n\nTextElement.propTypes = {\n  ...ElementPropTypes,\n};\n\nexport default combineMappers(mapElementProps)(TextElement);\n"]}]