["de973059cd0caa8dabfea7b4f91d2669d881df4e","6c2d190f948fe430a255e2ba4e108987e4d76679",["react-native","lodash","./DriverBase"],[127,167,267],{"version":3,"sources":["/home/ziddi/Desktop/venders/node_modules/@shoutem/animation/src/drivers/ScrollDriver.js"],"names":["ScrollDriver","options","useNativeDriver","nativeScrollEventThrottle","nativeValue","Value","addListener","debounce","value","setValue","primaryValue","onScrollViewLayout","bind","scrollViewProps","onScroll","event","nativeEvent","contentOffset","y","scrollEventThrottle","onLayout","layout","config","interpolationConfig","interpolate"],"mappings":";;;;;AAAA;;AACA;;;;AAEA;;IA0BaA,Y,WAAAA,Y;;;AACX,0BAAiF;AAAA,QAArEC,OAAqE,uEAA3D,EAAEC,iBAAiB,KAAnB,EAA0BC,2BAA2B,EAArD,EAA2D;AAAA;;AAAA;;AAG/E,QAAIF,QAAQC,eAAZ,EAA6B;AAC3B,YAAKE,WAAL,GAAmB,IAAI,sBAASC,KAAb,CAAmB,CAAnB,CAAnB;;AAEA,YAAKD,WAAL,CAAiBE,WAAjB,CAA6B,iBAAEC,QAAF,CAAW,gBAAe;AAAA,YAAZC,KAAY,QAAZA,KAAY;;AACrD,cAAKA,KAAL,CAAWC,QAAX,CAAoBD,KAApB;AACD,OAF4B,CAA7B,EAEIP,QAAQE,yBAFZ;AAGD;;AAED,UAAKO,YAAL,GAAoB,MAAKN,WAAL,IAAoB,MAAKI,KAA7C;;AAEA,UAAKG,kBAAL,GAA0B,MAAKA,kBAAL,CAAwBC,IAAxB,OAA1B;AACA,UAAKC,eAAL,GAAuB;AACrBC,gBAAU,sBAASC,KAAT,CACR,CAAC,EAAEC,aAAa,EAAEC,eAAe,EAAEC,GAAG,MAAKR,YAAV,EAAjB,EAAf,EAAD,CADQ,EAER,EAAER,iBAAiBD,QAAQC,eAA3B,EAFQ,CADW;AAKrBiB,2BAAqB,CALA;AAMrBC,gBAAU,MAAKT;AANM,KAAvB;AAd+E;AAsBhF;;;;uCAEkBI,K,EAAO;AACxB,WAAKM,MAAL,GAAcN,MAAMC,WAAN,CAAkBK,MAAhC;AACD;;;gCAaWC,M,EAAQ;AAClB,UAAId,QAAQ,KAAKA,KAAjB;AACA,UAAIc,OAAOpB,eAAP,IAA0B,KAAKE,WAAnC,EAAgD;AAC9CI,gBAAQ,KAAKJ,WAAb;AACD;;AAED,UAAMmB,+CAA2BD,MAA3B,CAAN;AACA,aAAOC,oBAAoBrB,eAA3B;;AAEA,aAAOM,MAAMgB,WAAN,CAAkBD,mBAAlB,CAAP;AACD","sourcesContent":["import { Animated } from 'react-native';\nimport _ from 'lodash';\n\nimport { DriverBase } from './DriverBase';\n\n/**\n * Animation driver that creates animated value changed on scroll event.\n * Assign onScroll as onScroll prop of React Native ScrollView, and\n * pass instance to any @shoutem/animation animation to run it\n * e.g.:\n * driver = new ScrollDriver();\n * animation = new Animation({\n *  driver\n * });\n * ...\n * <ScrollView onScroll={onScroll}>\n *\n * This driver initializes a native animated value by default, but\n * it also creates a mirrored JS value as a fallback for animations\n * that are not yet supported in native. The users can control if\n * interpolations will be performed in native or not by passing\n * `useNativeDriver` in the interpolation options.\n *\n * @param options Driver options\n * @param options.useNativeDriver Determines if the native animated value is used.\n * @param options.nativeScrollEventThrottle Native animated value changes\n *   will be debounced using this value when mirroring them to the JS value.\n *   Used only if `useNativeDriver` is `true`, defaults to 20ms.\n */\nexport class ScrollDriver extends DriverBase {\n  constructor(options = { useNativeDriver: false, nativeScrollEventThrottle: 20 }) {\n    super();\n\n    if (options.useNativeDriver) {\n      this.nativeValue = new Animated.Value(0);\n\n      this.nativeValue.addListener(_.debounce(({ value }) => {\n        this.value.setValue(value);\n      }), options.nativeScrollEventThrottle);\n    }\n\n    this.primaryValue = this.nativeValue || this.value;\n\n    this.onScrollViewLayout = this.onScrollViewLayout.bind(this);\n    this.scrollViewProps = {\n      onScroll: Animated.event(\n        [{ nativeEvent: { contentOffset: { y: this.primaryValue } } }],\n        { useNativeDriver: options.useNativeDriver }\n      ),\n      scrollEventThrottle: 1,\n      onLayout: this.onScrollViewLayout,\n    };\n  }\n\n  onScrollViewLayout(event) {\n    this.layout = event.nativeEvent.layout;\n  }\n\n  /**\n   * Creates an interpolation using the underlying animated\n   * value. This function will use the native animated value\n   * for the animation, is possible.\n   *\n   * @param config The animated interpolation config that may\n   *   define an additional `useNativeDriver` property which\n   *   controls whether this animation can be executed using\n   *   the native driver.\n   * @returns {*} The animated interpolation.\n   */\n  interpolate(config) {\n    let value = this.value;\n    if (config.useNativeDriver && this.nativeValue) {\n      value = this.nativeValue;\n    }\n\n    const interpolationConfig = { ...config };\n    delete interpolationConfig.useNativeDriver;\n\n    return value.interpolate(interpolationConfig);\n  }\n}\n"]}]