["c783baa78a40b4a420f83e2edbd6dc8f1ec30927","298618260ae62f3a021a606bf52dd8edd3be808f",["react","react-native","./TabBarIcon"],[137,234,278],{"version":3,"sources":["/home/ziddi/Desktop/venders/node_modules/react-navigation/src/views/TabView/TabBarBottom.js"],"names":["TabBarBottom","_renderLabel","scene","props","position","navigation","activeTintColor","inactiveTintColor","labelStyle","showLabel","index","routes","state","inputRange","map","x","i","outputRange","inputIndex","color","interpolate","tintColor","focused","label","getLabel","styles","_renderIcon","renderIcon","showIcon","icon","jumpToIndex","activeBackgroundColor","inactiveBackgroundColor","style","tabBar","route","backgroundColor","justifyContent","key","tab","defaultProps","create","height","flexDirection","borderTopWidth","hairlineWidth","borderTopColor","flex","alignItems","flexGrow","textAlign","fontSize","marginBottom"],"mappings":"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","sourcesContent":["/* @flow */\n\nimport React, { PureComponent } from 'react';\nimport { Animated, TouchableWithoutFeedback, StyleSheet } from 'react-native';\nimport TabBarIcon from './TabBarIcon';\n\nimport type {\n  NavigationAction,\n  NavigationRoute,\n  NavigationState,\n  NavigationScreenProp,\n  Style,\n} from '../../TypeDefinition';\n\nimport type { TabScene } from './TabView';\n\ntype DefaultProps = {\n  activeTintColor: string,\n  activeBackgroundColor: string,\n  inactiveTintColor: string,\n  inactiveBackgroundColor: string,\n  showLabel: boolean,\n};\n\ntype Props = {\n  activeTintColor: string,\n  activeBackgroundColor: string,\n  inactiveTintColor: string,\n  inactiveBackgroundColor: string,\n  position: Animated.Value,\n  navigation: NavigationScreenProp<NavigationState, NavigationAction>,\n  jumpToIndex: (index: number) => void,\n  getLabel: (scene: TabScene) => ?(React.Element<*> | string),\n  renderIcon: (scene: TabScene) => React.Element<*>,\n  showLabel: boolean,\n  style?: Style,\n  labelStyle?: Style,\n  showIcon: boolean,\n};\n\nexport default class TabBarBottom\n  extends PureComponent<DefaultProps, Props, void> {\n  // See https://developer.apple.com/library/content/documentation/UserExperience/Conceptual/UIKitUICatalog/UITabBar.html\n  static defaultProps = {\n    activeTintColor: '#3478f6', // Default active tint color in iOS 10\n    activeBackgroundColor: 'transparent',\n    inactiveTintColor: '#929292', // Default inactive tint color in iOS 10\n    inactiveBackgroundColor: 'transparent',\n    showLabel: true,\n    showIcon: true,\n  };\n\n  props: Props;\n\n  _renderLabel = (scene: TabScene) => {\n    const {\n      position,\n      navigation,\n      activeTintColor,\n      inactiveTintColor,\n      labelStyle,\n      showLabel,\n    } = this.props;\n    if (showLabel === false) {\n      return null;\n    }\n    const { index } = scene;\n    const { routes } = navigation.state;\n    // Prepend '-1', so there are always at least 2 items in inputRange\n    const inputRange = [-1, ...routes.map((x: *, i: number) => i)];\n    const outputRange = inputRange.map(\n      (inputIndex: number) =>\n        inputIndex === index ? activeTintColor : inactiveTintColor\n    );\n    const color = position.interpolate({\n      inputRange,\n      outputRange,\n    });\n\n    const tintColor = scene.focused ? activeTintColor : inactiveTintColor;\n    const label = this.props.getLabel({ ...scene, tintColor });\n    if (typeof label === 'string') {\n      return (\n        <Animated.Text style={[styles.label, { color }, labelStyle]}>\n          {label}\n        </Animated.Text>\n      );\n    }\n\n    if (typeof label === 'function') {\n      return label({ ...scene, tintColor });\n    }\n\n    return label;\n  };\n\n  _renderIcon = (scene: TabScene) => {\n    const {\n      position,\n      navigation,\n      activeTintColor,\n      inactiveTintColor,\n      renderIcon,\n      showIcon,\n    } = this.props;\n    if (showIcon === false) {\n      return null;\n    }\n    return (\n      <TabBarIcon\n        position={position}\n        navigation={navigation}\n        activeTintColor={activeTintColor}\n        inactiveTintColor={inactiveTintColor}\n        renderIcon={renderIcon}\n        scene={scene}\n        style={styles.icon}\n      />\n    );\n  };\n\n  render() {\n    const {\n      position,\n      navigation,\n      jumpToIndex,\n      activeBackgroundColor,\n      inactiveBackgroundColor,\n      style,\n    } = this.props;\n    const { routes } = navigation.state;\n    // Prepend '-1', so there are always at least 2 items in inputRange\n    const inputRange = [-1, ...routes.map((x: *, i: number) => i)];\n    return (\n      <Animated.View style={[styles.tabBar, style]}>\n        {routes.map((route: NavigationRoute, index: number) => {\n          const focused = index === navigation.state.index;\n          const scene = { route, index, focused };\n          const outputRange = inputRange.map(\n            (inputIndex: number) =>\n              inputIndex === index\n                ? activeBackgroundColor\n                : inactiveBackgroundColor\n          );\n          const backgroundColor = position.interpolate({\n            inputRange,\n            outputRange,\n          });\n          const justifyContent = this.props.showIcon ? 'flex-end' : 'center';\n          return (\n            <TouchableWithoutFeedback\n              key={route.key}\n              onPress={() => jumpToIndex(index)}\n            >\n              <Animated.View\n                style={[styles.tab, { backgroundColor, justifyContent }]}\n              >\n                {this._renderIcon(scene)}\n                {this._renderLabel(scene)}\n              </Animated.View>\n            </TouchableWithoutFeedback>\n          );\n        })}\n      </Animated.View>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  tabBar: {\n    height: 49, // Default tab bar height in iOS 10\n    flexDirection: 'row',\n    borderTopWidth: StyleSheet.hairlineWidth,\n    borderTopColor: 'rgba(0, 0, 0, .2)',\n    backgroundColor: '#f4f4f4', // Default background color in iOS 10\n  },\n  tab: {\n    flex: 1,\n    alignItems: 'stretch',\n    justifyContent: 'flex-end',\n  },\n  icon: {\n    flexGrow: 1,\n  },\n  label: {\n    textAlign: 'center',\n    fontSize: 10,\n    marginBottom: 1.5,\n    backgroundColor: 'transparent',\n  },\n});\n"]}]