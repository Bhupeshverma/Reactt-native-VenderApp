["435850669846046c40d7ccda5b35c8fe5a5e1287","713b5f596d7b1e2bc5097dd82a36aa8b7fce0de2",["prop-types","react","react-native","../config/ViewPropTypes"],[120,224,321,368],{"version":3,"sources":["/home/ziddi/Desktop/venders/node_modules/react-native-elements/src/slider/Slider.js"],"names":["TRACK_SIZE","THUMB_SIZE","DEFAULT_ANIMATION_CONFIGS","spring","friction","tension","timing","duration","easing","inOut","ease","delay","Rect","x","y","width","height","prototype","containsPoint","Slider","props","state","containerSize","trackSize","thumbSize","allMeasured","value","Value","panResponder","create","onStartShouldSetPanResponder","handleStartShouldSetPanResponder","bind","onMoveShouldSetPanResponder","handleMoveShouldSetPanResponder","onPanResponderGrant","handlePanResponderGrant","onPanResponderMove","handlePanResponderMove","onPanResponderRelease","handlePanResponderEnd","onPanResponderTerminationRequest","handlePanResponderRequestEnd","onPanResponderTerminate","nextProps","newValue","animateTransitions","setCurrentValueAnimated","setCurrentValue","setValue","animationType","animationConfig","toValue","start","_previousLeft","getThumbLeft","getCurrentValue","fireChangeEvent","e","gestureState","disabled","getValue","nativeEvent","thumbTouchRect","getThumbTouchRect","locationX","locationY","thumbHitTest","event","size","Math","max","thumbTouchSize","getTouchOverflowSize","touchOverflowStyle","undefined","verticalMargin","marginTop","marginBottom","horizontalMargin","marginLeft","marginRight","debugTouchArea","backgroundColor","opacity","name","layout","storeName","currentSize","_containerSize","_trackSize","_thumbSize","setState","handleMeasure","length","thumbLeft","dx","ratio","step","minimumValue","min","maximumValue","round","__getValue","getRatio","touchOverflowSize","positionStyle","left","top","minimumTrackTintColor","maximumTrackTintColor","thumbTintColor","containerStyle","style","trackStyle","thumbStyle","other","mainStyles","styles","interpolate","inputRange","outputRange","valueVisibleStyle","minimumTrackStyle","position","add","getTouchOverflowStyle","container","measureContainer","track","measureTrack","measureThumb","thumb","transform","translateX","translateY","touchArea","panHandlers","renderDebugThumbTouchRect","propTypes","number","bool","string","shape","onValueChange","func","onSlidingStart","onSlidingComplete","oneOf","object","defaultProps","justifyContent","borderRadius","right","bottom","debugThumbTouchArea"],"mappings":";;;;;AAAA;;;;AACA;;;;AACA;;AACA;;;;AAKA,IAAMA,aAAa,CAAnB;AACA,IAAMC,aAAa,EAAnB;;AAEA,IAAIC,4BAA4B;AAC9BC,UAAQ;AACNC,cAAU,CADJ;AAENC,aAAS;AAFH,GADsB;AAK9BC,UAAQ;AACNC,cAAU,GADJ;AAENC,YAAQ,oBAAOC,KAAP,CAAa,oBAAOC,IAApB,CAFF;AAGNC,WAAO;AAHD;AALsB,CAAhC;;AAYA,SAASC,IAAT,CAAcC,CAAd,EAAiBC,CAAjB,EAAoBC,KAApB,EAA2BC,MAA3B,EAAmC;AACjC,OAAKH,CAAL,GAASA,CAAT;AACA,OAAKC,CAAL,GAASA,CAAT;AACA,OAAKC,KAAL,GAAaA,KAAb;AACA,OAAKC,MAAL,GAAcA,MAAd;AACD;;AAEDJ,KAAKK,SAAL,CAAeC,aAAf,GAA+B,UAASL,CAAT,EAAYC,CAAZ,EAAe;AAC5C,SACED,KAAK,KAAKA,CAAV,IACAC,KAAK,KAAKA,CADV,IAEAD,KAAK,KAAKA,CAAL,GAAS,KAAKE,KAFnB,IAGAD,KAAK,KAAKA,CAAL,GAAS,KAAKE,MAJrB;AAMD,CAPD;;IASqBG,M;;;AACnB,kBAAYC,KAAZ,EAAmB;AAAA;;AAAA,4HACXA,KADW;;AAEjB,UAAKC,KAAL,GAAa;AACXC,qBAAe,EAAEP,OAAO,CAAT,EAAYC,QAAQ,CAApB,EADJ;AAEXO,iBAAW,EAAER,OAAO,CAAT,EAAYC,QAAQ,CAApB,EAFA;AAGXQ,iBAAW,EAAET,OAAO,CAAT,EAAYC,QAAQ,CAApB,EAHA;AAIXS,mBAAa,KAJF;AAKXC,aAAO,IAAI,sBAASC,KAAb,CAAmBP,MAAMM,KAAzB;AALI,KAAb;AAFiB;AASlB;;;;yCAEoB;AACnB,WAAKE,YAAL,GAAoB,0BAAaC,MAAb,CAAoB;AACtCC,sCAA8B,KAAKC,gCAAL,CAAsCC,IAAtC,CAC5B,IAD4B,CADQ;AAItCC,qCAA6B,KAAKC,+BAAL,CAAqCF,IAArC,CAC3B,IAD2B,CAJS;AAOtCG,6BAAqB,KAAKC,uBAAL,CAA6BJ,IAA7B,CAAkC,IAAlC,CAPiB;AAQtCK,4BAAoB,KAAKC,sBAAL,CAA4BN,IAA5B,CAAiC,IAAjC,CARkB;AAStCO,+BAAuB,KAAKC,qBAAL,CAA2BR,IAA3B,CAAgC,IAAhC,CATe;AAUtCS,0CAAkC,KAAKC,4BAAL,CAAkCV,IAAlC,CAChC,IADgC,CAVI;AAatCW,iCAAyB,KAAKH,qBAAL,CAA2BR,IAA3B,CAAgC,IAAhC;AAba,OAApB,CAApB;AAeD;;;8CAEyBY,S,EAAW;AACnC,UAAIC,WAAWD,UAAUlB,KAAzB;;AAEA,UAAI,KAAKN,KAAL,CAAWM,KAAX,KAAqBmB,QAAzB,EAAmC;AACjC,YAAI,KAAKzB,KAAL,CAAW0B,kBAAf,EAAmC;AACjC,eAAKC,uBAAL,CAA6BF,QAA7B;AACD,SAFD,MAEO;AACL,eAAKG,eAAL,CAAqBH,QAArB;AACD;AACF;AACF;;;oCAgCenB,K,EAAO;AACrB,WAAKL,KAAL,CAAWK,KAAX,CAAiBuB,QAAjB,CAA0BvB,KAA1B;AACD;;;4CAEuBA,K,EAAO;AAC7B,UAAIwB,gBAAgB,KAAK9B,KAAL,CAAW8B,aAA/B;AACA,UAAIC,kBAAkB,qBACpB,EADoB,EAEpBjD,0BAA0BgD,aAA1B,CAFoB,EAGpB,KAAK9B,KAAL,CAAW+B,eAHS,EAIpB;AACEC,iBAAS1B;AADX,OAJoB,CAAtB;;AASA,4BAASwB,aAAT,EAAwB,KAAK7B,KAAL,CAAWK,KAAnC,EAA0CyB,eAA1C,EAA2DE,KAA3D;AACD;;;sDAEoE;AAEnE,aAAO,KAAP;AACD;;;8CAE4D;AAC3D,WAAKC,aAAL,GAAqB,KAAKC,YAAL,CAAkB,KAAKC,eAAL,EAAlB,CAArB;AACA,WAAKC,eAAL,CAAqB,gBAArB;AACD;;;2CAEsBC,C,EAAGC,Y,EAAc;AACtC,UAAI,KAAKvC,KAAL,CAAWwC,QAAf,EAAyB;AACvB;AACD;;AAED,WAAKZ,eAAL,CAAqB,KAAKa,QAAL,CAAcF,YAAd,CAArB;AACA,WAAKF,eAAL,CAAqB,eAArB;AACD;;;mDAE8B;AAE7B,aAAO,KAAP;AACD;;;0CAEqBC,C,EAAGC,Y,EAAc;AACrC,UAAI,KAAKvC,KAAL,CAAWwC,QAAf,EAAyB;AACvB;AACD;;AAED,WAAKZ,eAAL,CAAqB,KAAKa,QAAL,CAAcF,YAAd,CAArB;AACA,WAAKF,eAAL,CAAqB,mBAArB;AACD;;;iCAEYC,C,EAAG;AACd,UAAII,cAAcJ,EAAEI,WAApB;AACA,UAAIC,iBAAiB,KAAKC,iBAAL,EAArB;AACA,aAAOD,eAAe7C,aAAf,CACL4C,YAAYG,SADP,EAELH,YAAYI,SAFP,CAAP;AAID;;;qDAEgCR,C,EAA4B;AAE3D,aAAO,KAAKS,YAAL,CAAkBT,CAAlB,CAAP;AACD;;;oCAEeU,K,EAAO;AACrB,UAAI,KAAKhD,KAAL,CAAWgD,KAAX,CAAJ,EAAuB;AACrB,aAAKhD,KAAL,CAAWgD,KAAX,EAAkB,KAAKZ,eAAL,EAAlB;AACD;AACF;;;2CAEsB;AACrB,UAAInC,QAAQ,KAAKA,KAAjB;AACA,UAAID,QAAQ,KAAKA,KAAjB;;AAEA,UAAIiD,OAAO,EAAX;AACA,UAAIhD,MAAMI,WAAN,KAAsB,IAA1B,EAAgC;AAC9B4C,aAAKtD,KAAL,GAAauD,KAAKC,GAAL,CACX,CADW,EAEXnD,MAAMoD,cAAN,CAAqBzD,KAArB,GAA6BM,MAAMG,SAAN,CAAgBT,KAFlC,CAAb;AAIAsD,aAAKrD,MAAL,GAAcsD,KAAKC,GAAL,CACZ,CADY,EAEZnD,MAAMoD,cAAN,CAAqBxD,MAArB,GAA8BK,MAAMC,aAAN,CAAoBN,MAFtC,CAAd;AAID;;AAED,aAAOqD,IAAP;AACD;;;4CAEuB;AAAA,kCACE,KAAKI,oBAAL,EADF;AAAA,UAChB1D,KADgB,yBAChBA,KADgB;AAAA,UACTC,MADS,yBACTA,MADS;;AAGtB,UAAI0D,qBAAqB,EAAzB;AACA,UAAI3D,UAAU4D,SAAV,IAAuB3D,WAAW2D,SAAtC,EAAiD;AAC/C,YAAIC,iBAAiB,CAAC5D,MAAD,GAAU,CAA/B;AACA0D,2BAAmBG,SAAnB,GAA+BD,cAA/B;AACAF,2BAAmBI,YAAnB,GAAkCF,cAAlC;;AAEA,YAAIG,mBAAmB,CAAChE,KAAD,GAAS,CAAhC;AACA2D,2BAAmBM,UAAnB,GAAgCD,gBAAhC;AACAL,2BAAmBO,WAAnB,GAAiCF,gBAAjC;AACD;;AAED,UAAI,KAAK3D,KAAL,CAAW8D,cAAX,KAA8B,IAAlC,EAAwC;AACtCR,2BAAmBS,eAAnB,GAAqC,QAArC;AACAT,2BAAmBU,OAAnB,GAA6B,GAA7B;AACD;;AAED,aAAOV,kBAAP;AACD;;;kCAEaW,I,EAAMxE,C,EAAG;AAAA,kCACGA,EAAEiD,WAAF,CAAcwB,MADjB;AAAA,UACfvE,KADe,yBACfA,KADe;AAAA,UACRC,MADQ,yBACRA,MADQ;;AAErB,UAAIqD,OAAO,EAAEtD,OAAOA,KAAT,EAAgBC,QAAQA,MAAxB,EAAX;;AAEA,UAAIuE,kBAAgBF,IAApB;AACA,UAAIG,cAAc,KAAKD,SAAL,CAAlB;AACA,UACEC,eACAzE,UAAUyE,YAAYzE,KADtB,IAEAC,WAAWwE,YAAYxE,MAHzB,EAIE;AACA;AACD;AACD,WAAKuE,SAAL,IAAkBlB,IAAlB;;AAEA,UAAI,KAAKoB,cAAL,IAAuB,KAAKC,UAA5B,IAA0C,KAAKC,UAAnD,EAA+D;AAC7D,aAAKC,QAAL,CAAc;AACZtE,yBAAe,KAAKmE,cADR;AAEZlE,qBAAW,KAAKmE,UAFJ;AAGZlE,qBAAW,KAAKmE,UAHJ;AAIZlE,uBAAa;AAJD,SAAd;AAMD;AACF;;;qCAEgBZ,C,EAAG;AAClB,WAAKgF,aAAL,CAAmB,eAAnB,EAAoChF,CAApC;AACD;;;iCAEYA,C,EAAG;AACd,WAAKgF,aAAL,CAAmB,WAAnB,EAAgChF,CAAhC;AACD;;;iCAEYA,C,EAAG;AACd,WAAKgF,aAAL,CAAmB,WAAnB,EAAgChF,CAAhC;AACD;;;6BAEQ8C,Y,EAAc;AACrB,UAAImC,SAAS,KAAKzE,KAAL,CAAWC,aAAX,CAAyBP,KAAzB,GAAiC,KAAKM,KAAL,CAAWG,SAAX,CAAqBT,KAAnE;AACA,UAAIgF,YAAY,KAAKzC,aAAL,GAAqBK,aAAaqC,EAAlD;;AAEA,UAAIC,QAAQF,YAAYD,MAAxB;;AAEA,UAAI,KAAK1E,KAAL,CAAW8E,IAAf,EAAqB;AACnB,eAAO5B,KAAKC,GAAL,CACL,KAAKnD,KAAL,CAAW+E,YADN,EAEL7B,KAAK8B,GAAL,CACE,KAAKhF,KAAL,CAAWiF,YADb,EAEE,KAAKjF,KAAL,CAAW+E,YAAX,GACE7B,KAAKgC,KAAL,CACEL,SACG,KAAK7E,KAAL,CAAWiF,YAAX,GAA0B,KAAKjF,KAAL,CAAW+E,YADxC,IAEE,KAAK/E,KAAL,CAAW8E,IAHf,IAKE,KAAK9E,KAAL,CAAW8E,IARjB,CAFK,CAAP;AAaD,OAdD,MAcO;AACL,eAAO5B,KAAKC,GAAL,CACL,KAAKnD,KAAL,CAAW+E,YADN,EAEL7B,KAAK8B,GAAL,CACE,KAAKhF,KAAL,CAAWiF,YADb,EAEEJ,SAAS,KAAK7E,KAAL,CAAWiF,YAAX,GAA0B,KAAKjF,KAAL,CAAW+E,YAA9C,IACE,KAAK/E,KAAL,CAAW+E,YAHf,CAFK,CAAP;AAQD;AACF;;;sCAEiB;AAChB,aAAO,KAAK9E,KAAL,CAAWK,KAAX,CAAiB6E,UAAjB,EAAP;AACD;;;6BAEQ7E,K,EAAO;AACd,aACE,CAACA,QAAQ,KAAKN,KAAL,CAAW+E,YAApB,KACC,KAAK/E,KAAL,CAAWiF,YAAX,GAA0B,KAAKjF,KAAL,CAAW+E,YADtC,CADF;AAID;;;iCAEYzE,K,EAAO;AAClB,UAAIuE,QAAQ,KAAKO,QAAL,CAAc9E,KAAd,CAAZ;AACA,aACEuE,SAAS,KAAK5E,KAAL,CAAWC,aAAX,CAAyBP,KAAzB,GAAiC,KAAKM,KAAL,CAAWG,SAAX,CAAqBT,KAA/D,CADF;AAGD;;;wCAEmB;AAClB,UAAIM,QAAQ,KAAKA,KAAjB;AACA,UAAID,QAAQ,KAAKA,KAAjB;AACA,UAAIqF,oBAAoB,KAAKhC,oBAAL,EAAxB;;AAEA,aAAO,IAAI7D,IAAJ,CACL6F,kBAAkB1F,KAAlB,GAA0B,CAA1B,GACE,KAAKwC,YAAL,CAAkB,KAAKC,eAAL,EAAlB,CADF,GAEE,CAACnC,MAAMG,SAAN,CAAgBT,KAAhB,GAAwBK,MAAMoD,cAAN,CAAqBzD,KAA9C,IAAuD,CAHpD,EAIL0F,kBAAkBzF,MAAlB,GAA2B,CAA3B,GACE,CAACK,MAAMC,aAAN,CAAoBN,MAApB,GAA6BI,MAAMoD,cAAN,CAAqBxD,MAAnD,IAA6D,CAL1D,EAMLI,MAAMoD,cAAN,CAAqBzD,KANhB,EAOLK,MAAMoD,cAAN,CAAqBxD,MAPhB,CAAP;AASD;;;8CAEyB+E,S,EAAW;AACnC,UAAIhC,iBAAiB,KAAKC,iBAAL,EAArB;AACA,UAAI0C,gBAAgB;AAClBC,cAAMZ,SADY;AAElBa,aAAK7C,eAAejD,CAFF;AAGlBC,eAAOgD,eAAehD,KAHJ;AAIlBC,gBAAQ+C,eAAe/C;AAJL,OAApB;AAMA,aAAO,oDAAU,IAAV,IAAe,OAAO0F,aAAtB,EAAqC,eAAc,MAAnD,GAAP;AACD;;;6BAEQ;AAAA,mBAaH,KAAKtF,KAbF;AAAA,UAEL+E,YAFK,UAELA,YAFK;AAAA,UAGLE,YAHK,UAGLA,YAHK;AAAA,UAILQ,qBAJK,UAILA,qBAJK;AAAA,UAKLC,qBALK,UAKLA,qBALK;AAAA,UAMLC,cANK,UAMLA,cANK;AAAA,UAOLC,cAPK,UAOLA,cAPK;AAAA,UAQLC,KARK,UAQLA,KARK;AAAA,UASLC,UATK,UASLA,UATK;AAAA,UAULC,UAVK,UAULA,UAVK;AAAA,UAWLjC,cAXK,UAWLA,cAXK;AAAA,UAYFkC,KAZE;AAAA,mBAqBH,KAAK/F,KArBF;AAAA,UAgBLK,KAhBK,UAgBLA,KAhBK;AAAA,UAiBLJ,aAjBK,UAiBLA,aAjBK;AAAA,UAkBLC,SAlBK,UAkBLA,SAlBK;AAAA,UAmBLC,SAnBK,UAmBLA,SAnBK;AAAA,UAoBLC,WApBK,UAoBLA,WApBK;;;AAuBP,UAAI4F,aAAaL,kBAAkBM,MAAnC;AACA,UAAIvB,YAAYrE,MAAM6F,WAAN,CAAkB;AAChCC,oBAAY,CAACrB,YAAD,EAAeE,YAAf,CADoB;AAEhCoB,qBAAa,CAAC,CAAD,EAAInG,cAAcP,KAAd,GAAsBS,UAAUT,KAApC;AAFmB,OAAlB,CAAhB;;AAMA,UAAI2G,oBAAoB,EAAxB;AACA,UAAI,CAACjG,WAAL,EAAkB;AAChBiG,0BAAkBtC,OAAlB,GAA4B,CAA5B;AACD;;AAED,UAAIuC;AACFC,kBAAU,UADR;AAEF7G,eAAO,sBAAS8G,GAAT,CAAa9B,SAAb,EAAwBvE,UAAUT,KAAV,GAAkB,CAA1C,CAFL;AAGF8D,mBAAW,CAACtD,UAAUP,MAHpB;AAIFmE,yBAAiB0B;AAJf,SAKCa,iBALD,CAAJ;;AAQA,UAAIhD,qBAAqB,KAAKoD,qBAAL,EAAzB;AACA,aACE;AAAA;AAAA,iCACMV,KADN;AAEE,iBAAO,CAACC,WAAWU,SAAZ,EAAuBd,KAAvB,CAFT;AAGE,oBAAU,KAAKe,gBAAL,CAAsBhG,IAAtB,CAA2B,IAA3B;AAHZ;AAKE;AACE,iBAAO,CACL,EAAEmD,iBAAiB2B,qBAAnB,EADK,EAELO,WAAWY,KAFN,EAGLf,UAHK,CADT;AAME,oBAAU,KAAKgB,YAAL,CAAkBlG,IAAlB,CAAuB,IAAvB;AANZ,UALF;AAaE,4DAAU,IAAV;AACE,iBAAO,CAACqF,WAAWY,KAAZ,EAAmBf,UAAnB,EAA+BS,iBAA/B;AADT,UAbF;AAgBE,4DAAU,IAAV;AACE,oBAAU,KAAKQ,YAAL,CAAkBnG,IAAlB,CAAuB,IAAvB,CADZ;AAEE,iBAAO,CACL,EAAEmD,iBAAiB4B,cAAnB,EADK,EAELM,WAAWe,KAFN,EAGLjB,UAHK;AAKHkB,uBAAW,CACT,EAAEC,YAAYvC,SAAd,EADS,EAET,EAAEwC,YAAY,EAAEhH,UAAUP,MAAV,GAAmBQ,UAAUR,MAA/B,IAAyC,CAAvD,EAFS;AALR,aASA0G,iBATA;AAFT,UAhBF;AA+BE;AAAA;AAAA;AACE,mBAAO,CAACJ,OAAOkB,SAAR,EAAmB9D,kBAAnB;AADT,aAEM,KAAK9C,YAAL,CAAkB6G,WAFxB;AAIGvD,6BAAmB,IAAnB,IAA2B,KAAKwD,yBAAL,CAA+B3C,SAA/B;AAJ9B;AA/BF,OADF;AAwCD;;;;;kBA9XkB5E,M;;;AAiYrBA,OAAOwH,SAAP,GAAmB;AASjBjH,SAAO,oBAAUkH,MATA;;AAejBhF,YAAU,oBAAUiF,IAfH;;AAoBjB1C,gBAAc,oBAAUyC,MApBP;;AAyBjBvC,gBAAc,oBAAUuC,MAzBP;;AA+BjB1C,QAAM,oBAAU0C,MA/BC;;AAqCjB/B,yBAAuB,oBAAUiC,MArChB;;AA2CjBhC,yBAAuB,oBAAUgC,MA3ChB;;AAgDjB/B,kBAAgB,oBAAU+B,MAhDT;;AAyDjBtE,kBAAgB,oBAAUuE,KAAV,CAAgB;AAC9BhI,WAAO,oBAAU6H,MADa;AAE9B5H,YAAQ,oBAAU4H;AAFY,GAAhB,CAzDC;;AAiEjBI,iBAAe,oBAAUC,IAjER;;AAuEjBC,kBAAgB,oBAAUD,IAvET;;AA6EjBE,qBAAmB,oBAAUF,IA7EZ;;AAkFjBhC,SAAO,wBAAcA,KAlFJ;;AAuFjBC,cAAY,wBAAcD,KAvFT;;AA4FjBE,cAAY,wBAAcF,KA5FT;;AAiGjB/B,kBAAgB,oBAAU2D,IAjGT;;AAsGjB/F,sBAAoB,oBAAU+F,IAtGb;;AA2GjB3F,iBAAe,oBAAUkG,KAAV,CAAgB,CAAC,QAAD,EAAW,QAAX,CAAhB,CA3GE;;AAgHjBjG,mBAAiB,oBAAUkG,MAhHV;AAiHjBrC,kBAAgB,wBAAcC;AAjHb,CAAnB;;AAoHA9F,OAAOmI,YAAP,GAAsB;AACpB5H,SAAO,CADa;AAEpByE,gBAAc,CAFM;AAGpBE,gBAAc,CAHM;AAIpBH,QAAM,CAJc;AAKpBW,yBAAuB,SALH;AAMpBC,yBAAuB,SANH;AAOpBC,kBAAgB,KAPI;AAQpBvC,kBAAgB,EAAEzD,OAAO,EAAT,EAAaC,QAAQ,EAArB,EARI;AASpBkE,kBAAgB,KATI;AAUpBhC,iBAAe;AAVK,CAAtB;;AAaA,IAAMoE,SAAS,wBAAWzF,MAAX,CAAkB;AAC/BkG,aAAW;AACT/G,YAAQ,EADC;AAETuI,oBAAgB;AAFP,GADoB;AAK/BtB,SAAO;AACLjH,YAAQhB,UADH;AAELwJ,kBAAcxJ,aAAa;AAFtB,GALwB;AAS/BoI,SAAO;AACLR,cAAU,UADL;AAEL7G,WAAOd,UAFF;AAGLe,YAAQf,UAHH;AAILuJ,kBAAcvJ,aAAa,CAJtB;AAKL2G,SAAK;AALA,GATwB;AAgB/B4B,aAAW;AACTZ,cAAU,UADD;AAETzC,qBAAiB,aAFR;AAGTyB,SAAK,CAHI;AAITD,UAAM,CAJG;AAKT8C,WAAO,CALE;AAMTC,YAAQ;AANC,GAhBoB;AAwB/BC,uBAAqB;AACnB/B,cAAU,UADS;AAEnBzC,qBAAiB,OAFE;AAGnBC,aAAS;AAHU;AAxBU,CAAlB,CAAf","sourcesContent":["import PropTypes from 'prop-types';\nimport React, { Component } from 'react';\nimport { View, StyleSheet, Animated, Easing, PanResponder } from 'react-native';\nimport ViewPropTypes from '../config/ViewPropTypes';\n\n// import shallowCompare from 'react-addons-shallow-compare';\n// import styleEqual from 'style-equal'\n\nconst TRACK_SIZE = 4;\nconst THUMB_SIZE = 20;\n\nvar DEFAULT_ANIMATION_CONFIGS = {\n  spring: {\n    friction: 7,\n    tension: 100,\n  },\n  timing: {\n    duration: 150,\n    easing: Easing.inOut(Easing.ease),\n    delay: 0,\n  },\n};\n\nfunction Rect(x, y, width, height) {\n  this.x = x;\n  this.y = y;\n  this.width = width;\n  this.height = height;\n}\n\nRect.prototype.containsPoint = function(x, y) {\n  return (\n    x >= this.x &&\n    y >= this.y &&\n    x <= this.x + this.width &&\n    y <= this.y + this.height\n  );\n};\n\nexport default class Slider extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      containerSize: { width: 0, height: 0 },\n      trackSize: { width: 0, height: 0 },\n      thumbSize: { width: 0, height: 0 },\n      allMeasured: false,\n      value: new Animated.Value(props.value),\n    };\n  }\n\n  componentWillMount() {\n    this.panResponder = PanResponder.create({\n      onStartShouldSetPanResponder: this.handleStartShouldSetPanResponder.bind(\n        this\n      ),\n      onMoveShouldSetPanResponder: this.handleMoveShouldSetPanResponder.bind(\n        this\n      ),\n      onPanResponderGrant: this.handlePanResponderGrant.bind(this),\n      onPanResponderMove: this.handlePanResponderMove.bind(this),\n      onPanResponderRelease: this.handlePanResponderEnd.bind(this),\n      onPanResponderTerminationRequest: this.handlePanResponderRequestEnd.bind(\n        this\n      ),\n      onPanResponderTerminate: this.handlePanResponderEnd.bind(this),\n    });\n  }\n\n  componentWillReceiveProps(nextProps) {\n    var newValue = nextProps.value;\n\n    if (this.props.value !== newValue) {\n      if (this.props.animateTransitions) {\n        this.setCurrentValueAnimated(newValue);\n      } else {\n        this.setCurrentValue(newValue);\n      }\n    }\n  }\n\n  // shouldComponentUpdate(nextProps, nextState) {\n  //   // We don't want to re-render in the following cases:\n  //   // - when only the 'value' prop changes as it's already handled with the Animated.Value\n  //   // - when the event handlers change (rendering doesn't depend on them)\n  //   // - when the style props haven't actually change\n  //\n  //   return shallowCompare(\n  //     { props: this._getPropsForComponentUpdate(this.props), state: this.state },\n  //     this._getPropsForComponentUpdate(nextProps),\n  //     nextState\n  //   ) || !styleEqual(this.props.style, nextProps.style)\n  //     || !styleEqual(this.props.trackStyle, nextProps.trackStyle)\n  //     || !styleEqual(this.props.thumbStyle, nextProps.thumbStyle);\n  // }\n  //\n  // _getPropsForComponentUpdate(props) {\n  //   var {\n  //     value,\n  //     onValueChange,\n  //     onSlidingStart,\n  //     onSlidingComplete,\n  //     style,\n  //     trackStyle,\n  //     thumbStyle,\n  //     ...otherProps,\n  //   } = props;\n  //\n  //   return otherProps;\n  // }\n\n  setCurrentValue(value) {\n    this.state.value.setValue(value);\n  }\n\n  setCurrentValueAnimated(value) {\n    var animationType = this.props.animationType;\n    var animationConfig = Object.assign(\n      {},\n      DEFAULT_ANIMATION_CONFIGS[animationType],\n      this.props.animationConfig,\n      {\n        toValue: value,\n      }\n    );\n\n    Animated[animationType](this.state.value, animationConfig).start();\n  }\n\n  handleMoveShouldSetPanResponder(/*e: Object, gestureState: Object*/) {\n    // Should we become active when the user moves a touch over the thumb?\n    return false;\n  }\n\n  handlePanResponderGrant(/*e: Object, gestureState: Object*/) {\n    this._previousLeft = this.getThumbLeft(this.getCurrentValue());\n    this.fireChangeEvent('onSlidingStart');\n  }\n\n  handlePanResponderMove(e, gestureState) {\n    if (this.props.disabled) {\n      return;\n    }\n\n    this.setCurrentValue(this.getValue(gestureState));\n    this.fireChangeEvent('onValueChange');\n  }\n\n  handlePanResponderRequestEnd() {\n    // Should we allow another component to take over this pan?\n    return false;\n  }\n\n  handlePanResponderEnd(e, gestureState) {\n    if (this.props.disabled) {\n      return;\n    }\n\n    this.setCurrentValue(this.getValue(gestureState));\n    this.fireChangeEvent('onSlidingComplete');\n  }\n\n  thumbHitTest(e) {\n    var nativeEvent = e.nativeEvent;\n    var thumbTouchRect = this.getThumbTouchRect();\n    return thumbTouchRect.containsPoint(\n      nativeEvent.locationX,\n      nativeEvent.locationY\n    );\n  }\n\n  handleStartShouldSetPanResponder(e /*gestureState: Object*/) {\n    // Should we become active when the user presses down on the thumb?\n    return this.thumbHitTest(e);\n  }\n\n  fireChangeEvent(event) {\n    if (this.props[event]) {\n      this.props[event](this.getCurrentValue());\n    }\n  }\n\n  getTouchOverflowSize() {\n    var state = this.state;\n    var props = this.props;\n\n    var size = {};\n    if (state.allMeasured === true) {\n      size.width = Math.max(\n        0,\n        props.thumbTouchSize.width - state.thumbSize.width\n      );\n      size.height = Math.max(\n        0,\n        props.thumbTouchSize.height - state.containerSize.height\n      );\n    }\n\n    return size;\n  }\n\n  getTouchOverflowStyle() {\n    var { width, height } = this.getTouchOverflowSize();\n\n    var touchOverflowStyle = {};\n    if (width !== undefined && height !== undefined) {\n      var verticalMargin = -height / 2;\n      touchOverflowStyle.marginTop = verticalMargin;\n      touchOverflowStyle.marginBottom = verticalMargin;\n\n      var horizontalMargin = -width / 2;\n      touchOverflowStyle.marginLeft = horizontalMargin;\n      touchOverflowStyle.marginRight = horizontalMargin;\n    }\n\n    if (this.props.debugTouchArea === true) {\n      touchOverflowStyle.backgroundColor = 'orange';\n      touchOverflowStyle.opacity = 0.5;\n    }\n\n    return touchOverflowStyle;\n  }\n\n  handleMeasure(name, x) {\n    var { width, height } = x.nativeEvent.layout;\n    var size = { width: width, height: height };\n\n    var storeName = `_${name}`;\n    var currentSize = this[storeName];\n    if (\n      currentSize &&\n      width === currentSize.width &&\n      height === currentSize.height\n    ) {\n      return;\n    }\n    this[storeName] = size;\n\n    if (this._containerSize && this._trackSize && this._thumbSize) {\n      this.setState({\n        containerSize: this._containerSize,\n        trackSize: this._trackSize,\n        thumbSize: this._thumbSize,\n        allMeasured: true,\n      });\n    }\n  }\n\n  measureContainer(x) {\n    this.handleMeasure('containerSize', x);\n  }\n\n  measureTrack(x) {\n    this.handleMeasure('trackSize', x);\n  }\n\n  measureThumb(x) {\n    this.handleMeasure('thumbSize', x);\n  }\n\n  getValue(gestureState) {\n    var length = this.state.containerSize.width - this.state.thumbSize.width;\n    var thumbLeft = this._previousLeft + gestureState.dx;\n\n    var ratio = thumbLeft / length;\n\n    if (this.props.step) {\n      return Math.max(\n        this.props.minimumValue,\n        Math.min(\n          this.props.maximumValue,\n          this.props.minimumValue +\n            Math.round(\n              ratio *\n                (this.props.maximumValue - this.props.minimumValue) /\n                this.props.step\n            ) *\n              this.props.step\n        )\n      );\n    } else {\n      return Math.max(\n        this.props.minimumValue,\n        Math.min(\n          this.props.maximumValue,\n          ratio * (this.props.maximumValue - this.props.minimumValue) +\n            this.props.minimumValue\n        )\n      );\n    }\n  }\n\n  getCurrentValue() {\n    return this.state.value.__getValue();\n  }\n\n  getRatio(value) {\n    return (\n      (value - this.props.minimumValue) /\n      (this.props.maximumValue - this.props.minimumValue)\n    );\n  }\n\n  getThumbLeft(value) {\n    var ratio = this.getRatio(value);\n    return (\n      ratio * (this.state.containerSize.width - this.state.thumbSize.width)\n    );\n  }\n\n  getThumbTouchRect() {\n    var state = this.state;\n    var props = this.props;\n    var touchOverflowSize = this.getTouchOverflowSize();\n\n    return new Rect(\n      touchOverflowSize.width / 2 +\n        this.getThumbLeft(this.getCurrentValue()) +\n        (state.thumbSize.width - props.thumbTouchSize.width) / 2,\n      touchOverflowSize.height / 2 +\n        (state.containerSize.height - props.thumbTouchSize.height) / 2,\n      props.thumbTouchSize.width,\n      props.thumbTouchSize.height\n    );\n  }\n\n  renderDebugThumbTouchRect(thumbLeft) {\n    var thumbTouchRect = this.getThumbTouchRect();\n    var positionStyle = {\n      left: thumbLeft,\n      top: thumbTouchRect.y,\n      width: thumbTouchRect.width,\n      height: thumbTouchRect.height,\n    };\n    return <Animated.View style={positionStyle} pointerEvents=\"none\" />;\n  }\n\n  render() {\n    const {\n      minimumValue,\n      maximumValue,\n      minimumTrackTintColor,\n      maximumTrackTintColor,\n      thumbTintColor,\n      containerStyle,\n      style,\n      trackStyle,\n      thumbStyle,\n      debugTouchArea,\n      ...other\n    } = this.props;\n\n    var {\n      value,\n      containerSize,\n      trackSize,\n      thumbSize,\n      allMeasured,\n    } = this.state;\n\n    var mainStyles = containerStyle || styles;\n    var thumbLeft = value.interpolate({\n      inputRange: [minimumValue, maximumValue],\n      outputRange: [0, containerSize.width - thumbSize.width],\n      //extrapolate: 'clamp',\n    });\n\n    var valueVisibleStyle = {};\n    if (!allMeasured) {\n      valueVisibleStyle.opacity = 0;\n    }\n\n    var minimumTrackStyle = {\n      position: 'absolute',\n      width: Animated.add(thumbLeft, thumbSize.width / 2),\n      marginTop: -trackSize.height,\n      backgroundColor: minimumTrackTintColor,\n      ...valueVisibleStyle,\n    };\n\n    var touchOverflowStyle = this.getTouchOverflowStyle();\n    return (\n      <View\n        {...other}\n        style={[mainStyles.container, style]}\n        onLayout={this.measureContainer.bind(this)}\n      >\n        <View\n          style={[\n            { backgroundColor: maximumTrackTintColor },\n            mainStyles.track,\n            trackStyle,\n          ]}\n          onLayout={this.measureTrack.bind(this)}\n        />\n        <Animated.View\n          style={[mainStyles.track, trackStyle, minimumTrackStyle]}\n        />\n        <Animated.View\n          onLayout={this.measureThumb.bind(this)}\n          style={[\n            { backgroundColor: thumbTintColor },\n            mainStyles.thumb,\n            thumbStyle,\n            {\n              transform: [\n                { translateX: thumbLeft },\n                { translateY: -(trackSize.height + thumbSize.height) / 2 },\n              ],\n              ...valueVisibleStyle,\n            },\n          ]}\n        />\n        <View\n          style={[styles.touchArea, touchOverflowStyle]}\n          {...this.panResponder.panHandlers}\n        >\n          {debugTouchArea === true && this.renderDebugThumbTouchRect(thumbLeft)}\n        </View>\n      </View>\n    );\n  }\n}\n\nSlider.propTypes = {\n  /**\n   * Initial value of the slider. The value should be between minimumValue\n   * and maximumValue, which default to 0 and 1 respectively.\n   * Default value is 0.\n   *\n   * *This is not a controlled component*, e.g. if you don't update\n   * the value, the component won't be reset to its inital value.\n   */\n  value: PropTypes.number,\n\n  /**\n   * If true the user won't be able to move the slider.\n   * Default value is false.\n   */\n  disabled: PropTypes.bool,\n\n  /**\n   * Initial minimum value of the slider. Default value is 0.\n   */\n  minimumValue: PropTypes.number,\n\n  /**\n   * Initial maximum value of the slider. Default value is 1.\n   */\n  maximumValue: PropTypes.number,\n\n  /**\n   * Step value of the slider. The value should be between 0 and\n   * (maximumValue - minimumValue). Default value is 0.\n   */\n  step: PropTypes.number,\n\n  /**\n   * The color used for the track to the left of the button. Overrides the\n   * default blue gradient image.\n   */\n  minimumTrackTintColor: PropTypes.string,\n\n  /**\n   * The color used for the track to the right of the button. Overrides the\n   * default blue gradient image.\n   */\n  maximumTrackTintColor: PropTypes.string,\n\n  /**\n   * The color used for the thumb.\n   */\n  thumbTintColor: PropTypes.string,\n\n  /**\n   * The size of the touch area that allows moving the thumb.\n   * The touch area has the same center has the visible thumb.\n   * This allows to have a visually small thumb while still allowing the user\n   * to move it easily.\n   * The default is {width: 40, height: 40}.\n   */\n  thumbTouchSize: PropTypes.shape({\n    width: PropTypes.number,\n    height: PropTypes.number,\n  }),\n\n  /**\n   * Callback continuously called while the user is dragging the slider.\n   */\n  onValueChange: PropTypes.func,\n\n  /**\n   * Callback called when the user starts changing the value (e.g. when\n   * the slider is pressed).\n   */\n  onSlidingStart: PropTypes.func,\n\n  /**\n   * Callback called when the user finishes changing the value (e.g. when\n   * the slider is released).\n   */\n  onSlidingComplete: PropTypes.func,\n\n  /**\n   * The style applied to the slider container.\n   */\n  style: ViewPropTypes.style,\n\n  /**\n   * The style applied to the track.\n   */\n  trackStyle: ViewPropTypes.style,\n\n  /**\n   * The style applied to the thumb.\n   */\n  thumbStyle: ViewPropTypes.style,\n\n  /**\n   * Set this to true to visually see the thumb touch rect in green.\n   */\n  debugTouchArea: PropTypes.bool,\n\n  /**\n  * Set to true to animate values with default 'timing' animation type\n  */\n  animateTransitions: PropTypes.bool,\n\n  /**\n  * Custom Animation type. 'spring' or 'timing'.\n  */\n  animationType: PropTypes.oneOf(['spring', 'timing']),\n\n  /**\n  * Used to configure the animation parameters.  These are the same parameters in the Animated library.\n  */\n  animationConfig: PropTypes.object,\n  containerStyle: ViewPropTypes.style,\n};\n\nSlider.defaultProps = {\n  value: 0,\n  minimumValue: 0,\n  maximumValue: 1,\n  step: 0,\n  minimumTrackTintColor: '#3f3f3f',\n  maximumTrackTintColor: '#b3b3b3',\n  thumbTintColor: 'red',\n  thumbTouchSize: { width: 40, height: 40 },\n  debugTouchArea: false,\n  animationType: 'timing',\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    height: 40,\n    justifyContent: 'center',\n  },\n  track: {\n    height: TRACK_SIZE,\n    borderRadius: TRACK_SIZE / 2,\n  },\n  thumb: {\n    position: 'absolute',\n    width: THUMB_SIZE,\n    height: THUMB_SIZE,\n    borderRadius: THUMB_SIZE / 2,\n    top: 22,\n  },\n  touchArea: {\n    position: 'absolute',\n    backgroundColor: 'transparent',\n    top: 0,\n    left: 0,\n    right: 0,\n    bottom: 0,\n  },\n  debugThumbTouchArea: {\n    position: 'absolute',\n    backgroundColor: 'green',\n    opacity: 0.5,\n  },\n});\n"]}]