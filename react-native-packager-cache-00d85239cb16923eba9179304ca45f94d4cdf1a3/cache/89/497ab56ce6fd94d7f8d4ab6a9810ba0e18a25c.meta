["34c46b6e81b10e8480237656c73d09d86c82b429","ac759555636d846d9032bf4a8e6e034a2c5054c6",["react","react-native","lodash","@shoutem/ui","@shoutem/theme","./services/HtmlParser","./services/ElementRegistry"],[335,432,472,563,601,647,705],{"version":3,"sources":["/home/ziddi/Desktop/venders/node_modules/@shoutem/ui/html/Html.js"],"names":["defaultElementSettings","display","BLOCK","Html","elementTag","component","settings","elementSettings","assign","tag","props","context","renderElement","bind","state","htmlTree","runAfterInteractions","updateHtmlTree","body","setState","style","get","element","elementStyle","getElementStyle","renderedElement","isUndefined","ElementComponent","console","log","htmlRootElement","getRootNode","container","propTypes","PropTypes","string","isRequired","func","object","ElementPropTypes","childElements","array","inlineStyle","children","oneOfType","arrayOf","node","isBlockElement","hasBlockElement","elements","some","combineMappers","mapFunctions","customizedProps","reduce","result","mapFunction","mapElementProps","attributes","htmlInlineStyle","renderChildElements","Children","toArray","map","renderChildren","customizeRenderElement","customizer"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { Platform, InteractionManager } from 'react-native';\nimport _ from 'lodash';\n\nimport { View, Spinner } from '@shoutem/ui';\nimport { connectStyle } from '@shoutem/theme';\n\nimport { parseHtml } from './services/HtmlParser';\nimport {\n  registerElement,\n  getElement,\n  getElementDisplay,\n  getElementProperty,\n  Display,\n} from './services/ElementRegistry';\n\nconst defaultElementSettings = {\n  display: Display.BLOCK,\n};\n\nclass Html extends Component {\n  static propTypes = {\n    body: React.PropTypes.string.isRequired,\n    renderElement: React.PropTypes.func,\n    style: React.PropTypes.object,\n  };\n\n  /**\n   * Create Element class for given element tag and add it to the ElementClassMap.\n   * Use the settings to additionally describe a Element class.\n   * @param elementTag {string} HTML element tag\n   * @param component {Component} React Native Component\n   * @param settings {Object} Default settings override\n   *   Most times a developer will only want to override one setting,\n   *   that's why settings are merged with defaultElementSettings.\n   * @param settings.display {Display || Function}\n   *   Describe component display.\n   *   Can be a function to dynamically resolve display.\n   */\n  static registerElement(elementTag, component, settings = {}) {\n    const elementSettings = _.assign({}, defaultElementSettings, settings);\n\n    registerElement(elementTag, { ...elementSettings, component });\n  }\n\n  static getElement(tag) {\n    // TODO - standardize ElementRegistry getElement\n    return getElement({ tag });\n  }\n\n  constructor(props, context) {\n    super(props, context);\n    this.renderElement = this.renderElement.bind(this);\n    this.state = {\n      htmlTree: null,\n    };\n  }\n\n  componentDidMount() {\n    InteractionManager.runAfterInteractions(() => {\n      this.updateHtmlTree();\n    });\n  }\n\n  updateHtmlTree() {\n    const { body } = this.props;\n\n    if (body) {\n      const htmlTree = parseHtml(body);\n      this.setState({ htmlTree });\n    }\n  }\n\n  /**\n   * Get element style from the Html instance style.\n   * @param element {Element}\n   * @returns {Object|undefined}\n   */\n  getElementStyle({ tag }) {\n    const { style } = this.props;\n    return _.get(style, tag, {});\n  }\n\n  /**\n   * Render HTML element as React Native component.\n   * This method is passed to both custom renderElement and\n   * element corresponding component. It is also used to render children\n   * and should be passed down the tree so that children can be rendered.\n   * If Html has style named by element tag it will be passed to rendered element.\n   * @param element {Element} Parsed HTML element\n   * @returns {Component} The element rendered as a React Native component\n   */\n  renderElement(element) {\n    const elementStyle = this.getElementStyle(element);\n    let renderedElement;\n\n    if (this.props.renderElement) {\n      renderedElement = this.props.renderElement(element, elementStyle, this.renderElement);\n    }\n\n    // Custom renderElement for the specific Html implementation\n    // has advantage over the \"global\". If custom renderElement rendered\n    // a component that component will be used, otherwise fallback to \"global\".\n    // Render element must be undefined to fallback to default,\n    // null is a valid RN type to render.\n    if (_.isUndefined(renderedElement)) {\n      const ElementComponent = getElementProperty(element, 'component');\n\n      if (!ElementComponent) {\n        console.log('Can not find component for element: ', element.tag);\n        return null;\n      }\n\n      renderedElement = (\n        <ElementComponent\n          element={element}\n          style={elementStyle}\n          renderElement={this.renderElement}\n        />\n      );\n    }\n\n    return renderedElement;\n  }\n\n  render() {\n    const { style, body } = this.props;\n    const { htmlTree } = this.state;\n\n    if (!body) {\n      return null;\n    }\n\n    if (!htmlTree) {\n      // Either still processing the Html or\n      // waiting for layout animations to complete\n      return (\n        <View styleName=\"md-gutter\">\n          <Spinner styleName=\"sm-gutter\" />\n        </View>\n      );\n    }\n\n    const htmlRootElement = htmlTree.getRootNode();\n\n    return (\n      <View style={style.container}>\n        {this.renderElement(htmlRootElement)}\n      </View>\n    );\n  }\n}\n\nexport const ElementPropTypes = {\n  childElements: React.PropTypes.array,\n  renderElement: React.PropTypes.func,\n  inlineStyle: React.PropTypes.string,\n  children: React.PropTypes.oneOfType([\n    React.PropTypes.arrayOf(React.PropTypes.node),\n    React.PropTypes.node,\n  ]),\n};\n\nexport default connectStyle('shoutem.ui.Html')(Html);\n\n\n/* Helpers */\n\n/**\n * @param element {Element}\n * @returns {boolean}\n */\nexport const isBlockElement = function (element) {\n  // eslint-disable-next-line no-use-before-define\n  return getElementDisplay(element, 'display') === Display.BLOCK;\n};\n\n/**\n * @param elements {Array}\n * @returns {boolean}\n */\nexport const hasBlockElement = function (elements) {\n  return _.some(elements, isBlockElement);\n};\n\n/**\n * Use to create an enhanced component that mapS\n * element (description) to the wrapped component props.\n * Element is default property that Html renderElement provides to the components.\n * @param mapFunctions {Array}\n *  List of functions that map element description to the component props.\n * @returns {function({element, renderElement}): Component}\n *  Returns HOC that will map component props with provided map functions.\n */\nexport const combineMappers = function (...mapFunctions) {\n  return WrappedComponent => props => {\n    // eslint-disable-next-line prefer-arrow-callback\n    const customizedProps = _.reduce(mapFunctions, function (result, mapFunction) {\n      return {\n        ...result,\n        ...mapFunction(props),\n      };\n    }, { ...props });\n\n    return <WrappedComponent {...customizedProps} />;\n  };\n};\n\n/**\n * Destruct an element description to the component props format.\n * @param props {{ element, renderElement }}\n * @returns {Object}\n */\nexport const mapElementProps = function ({ element, style }) {\n  const { childElements, attributes, tag } = element;\n  return {\n    ...attributes,\n    style,\n    childElements,\n    htmlInlineStyle: attributes.style,\n    elementTag: tag,\n  };\n};\n\n/**\n * @param childElements {Array}\n * @param renderElement {Function}\n * @returns {Children}\n */\nexport const renderChildElements = function (childElements, renderElement) {\n  return React.Children.toArray(childElements.map(renderElement));\n};\n\n/**\n * Render and map elements to the children prop.\n * @param element {Element}\n * @param renderElement {Function}\n * @returns {Object} Props with children prop\n */\nexport const renderChildren = function ({ element, renderElement }) {\n  const { childElements } = element;\n  return {\n    children: renderChildElements(childElements, renderElement),\n  };\n};\n\n/**\n * Extend the original renderElement with a customizer.\n * If the customizer doesn't render a element, renderElement will be used.\n * It can be used to customize renderElement from certain element node.\n * @param customizer {Function}\n * @param renderElement {Function}\n * @returns {Component}\n */\nexport const customizeRenderElement = function (customizer, renderElement) {\n  return function (element) {\n    const renderedElement = customizer(element);\n    if (renderedElement) {\n      return renderedElement;\n    }\n\n    return renderElement(element);\n  };\n};\n"]}]