["7cb45075cf08bfb98542b893f542550ed4c92b74","fe329bc13a194c2a3771a11ba53b319d3ed887c9",["react-native","./TouchHistoryMath","./TouchDistanceMath","react-timer-mixin"],[136,186,324,380],{"version":3,"sources":["/home/ziddi/Desktop/venders/node_modules/react-native-gesture-responder/library/createResponder.js"],"names":["create","currentCentroidXOfTouchesChangedAfter","currentCentroidYOfTouchesChangedAfter","previousCentroidXOfTouchesChangedAfter","previousCentroidYOfTouchesChangedAfter","currentCentroidX","currentCentroidY","TAP_UP_TIME_THRESHOLD","TAP_MOVE_THRESHOLD","MOVE_THRESHOLD","DEV","initializeGestureState","gestureState","moveX","moveY","x0","y0","dx","dy","vx","vy","numberActiveTouches","_accountsForMovesUpTo","previousMoveX","previousMoveY","pinch","undefined","previousPinch","singleTapUp","doubleTapUp","_singleTabFailed","updateGestureStateOnMove","touchHistory","e","movedAfter","prevX","x","prevY","y","dt","convertToMillisecIfNeeded","mostRecentTimeStamp","clearInteractionHandle","interactionState","handle","interval","cancelSingleTapConfirm","_singleTapConfirmId","clearTimeout","config","debug","stateID","Math","random","handlers","onStartShouldSetResponder","console","log","onMoveShouldSetResponder","effectiveMove","onStartShouldSetResponderCapture","nativeEvent","touches","length","onMoveShouldSetResponderCapture","onResponderGrant","createInteractionHandle","_grantTimestamp","onShouldBlockNativeResponder","onResponderReject","onResponderRelease","_lastSingleTapUp","_lastReleaseTimestamp","snapshot","timeoutId","setTimeout","onResponderSingleTapConfirmed","JSON","stringify","onResponderStart","onResponderMove","onResponderEnd","abs","onResponderTerminate","onResponderTerminationRequest","moveThreshold","minMoveDistance"],"mappings":";;AAIA;;;;;kBAkHwBA,M;;AAhHxB;;AACA;;;;AACA;;AACA;;;;AAEA,IAAMC,wCAAwC,2BAAiBA,qCAA/D;AACA,IAAMC,wCAAwC,2BAAiBA,qCAA/D;AACA,IAAMC,yCAAyC,2BAAiBA,sCAAhE;AACA,IAAMC,yCAAyC,2BAAiBA,sCAAhE;AACA,IAAMC,mBAAmB,2BAAiBA,gBAA1C;AACA,IAAMC,mBAAmB,2BAAiBA,gBAA1C;;AAEA,IAAMC,wBAAwB,GAA9B;AACA,IAAMC,qBAAqB,EAA3B;AACA,IAAMC,iBAAiB,CAAvB;;AAEA,IAAIC,MAAM,KAAV;;AAEA,SAASC,sBAAT,CAAgCC,YAAhC,EAA8C;AAC5CA,eAAaC,KAAb,GAAqB,CAArB;AACAD,eAAaE,KAAb,GAAqB,CAArB;AACAF,eAAaG,EAAb,GAAkB,CAAlB;AACAH,eAAaI,EAAb,GAAkB,CAAlB;AACAJ,eAAaK,EAAb,GAAkB,CAAlB;AACAL,eAAaM,EAAb,GAAkB,CAAlB;AACAN,eAAaO,EAAb,GAAkB,CAAlB;AACAP,eAAaQ,EAAb,GAAkB,CAAlB;AACAR,eAAaS,mBAAb,GAAmC,CAAnC;;AAEAT,eAAaU,qBAAb,GAAqC,CAArC;;AAGAV,eAAaW,aAAb,GAA6B,CAA7B;AACAX,eAAaY,aAAb,GAA6B,CAA7B;AACAZ,eAAaa,KAAb,GAAqBC,SAArB;AACAd,eAAae,aAAb,GAA6BD,SAA7B;AACAd,eAAagB,WAAb,GAA2B,KAA3B;AACAhB,eAAaiB,WAAb,GAA2B,KAA3B;AACAjB,eAAakB,gBAAb,GAAgC,KAAhC;AAED;;AAED,SAASC,wBAAT,CAAkCnB,YAAlC,EAAgDoB,YAAhD,EAA8DC,CAA9D,EAAiE;AAC/D,MAAMC,aAAatB,aAAaU,qBAAhC;AACA,MAAMa,QAAQhC,uCAAuC6B,YAAvC,EAAqDE,UAArD,CAAd;AACA,MAAME,IAAInC,sCAAsC+B,YAAtC,EAAoDE,UAApD,CAAV;AACA,MAAMG,QAAQjC,uCAAuC4B,YAAvC,EAAqDE,UAArD,CAAd;AACA,MAAMI,IAAIpC,sCAAsC8B,YAAtC,EAAoDE,UAApD,CAAV;AACA,MAAMjB,KAAKmB,IAAID,KAAf;AACA,MAAMjB,KAAKoB,IAAID,KAAf;;AAEAzB,eAAaS,mBAAb,GAAmCW,aAAaX,mBAAhD;AACAT,eAAaC,KAAb,GAAqBuB,CAArB;AACAxB,eAAaE,KAAb,GAAqBwB,CAArB;;AAIA,MAAMC,KAAKC,0BAA0BR,aAAaS,mBAAb,GAAmCP,UAA7D,CAAX;AACAtB,eAAaO,EAAb,GAAkBF,KAAKsB,EAAvB;AACA3B,eAAaQ,EAAb,GAAkBF,KAAKqB,EAAvB;AACA3B,eAAaK,EAAb,IAAmBA,EAAnB;AACAL,eAAaM,EAAb,IAAmBA,EAAnB;AACAN,eAAaU,qBAAb,GAAqCU,aAAaS,mBAAlD;;AAGA7B,eAAaW,aAAb,GAA6BY,KAA7B;AACAvB,eAAaY,aAAb,GAA6Ba,KAA7B;AACAzB,eAAaa,KAAb,GAAqB,sCAAcO,YAAd,EAA4BE,UAA5B,EAAwC,IAAxC,CAArB;AACAtB,eAAae,aAAb,GAA6B,sCAAcK,YAAd,EAA4BE,UAA5B,EAAwC,KAAxC,CAA7B;AACD;;AAED,SAASQ,sBAAT,CAAgCC,gBAAhC,EAAkD;AAChD,MAAIA,iBAAiBC,MAArB,EAA6B;AAC3B,oCAAmBF,sBAAnB,CAA0CC,iBAAiBC,MAA3D;AACAD,qBAAiBC,MAAjB,GAA0B,IAA1B;AACD;AACF;;AAQD,SAASJ,yBAAT,CAAmCK,QAAnC,EAA6C;AAC3C,MAAIA,WAAW,OAAf,EAAwB;AACtB,WAAOA,WAAW,OAAlB;AACD;AACD,SAAOA,QAAP;AACD;;AAED,SAASC,sBAAT,CAAgClC,YAAhC,EAA8C;AAC5C,MAAG,OAAOA,aAAamC,mBAApB,KAA4C,WAA/C,EAA4D;AAC1D,8BAAWC,YAAX,CAAwBpC,aAAamC,mBAArC;AACAnC,iBAAamC,mBAAb,GAAmCrB,SAAnC;AACD;AACF;;AAgBc,SAAS1B,MAAT,CAAgBiD,MAAhB,EAAwB;AACrC,MAAGA,OAAOC,KAAV,EAAiB;AACfxC,UAAM,IAAN;AACD;;AAED,MAAMiC,mBAAmB;AACvBC,YAAQ;AADe,GAAzB;AAGA,MAAMhC,eAAe;AAEnBuC,aAASC,KAAKC,MAAL;AAFU,GAArB;AAIA1C,yBAAuBC,YAAvB;;AAEA,MAAM0C,WAAW;AACfC,+BAA2B,mCAAUtB,CAAV,EAAa;AACtCvB,aAAO8C,QAAQC,GAAR,CAAY,8BAAZ,CAAP;AACAX,6BAAuBlC,YAAvB;AACA,aAAOqC,OAAOM,yBAAP,GACLN,OAAOM,yBAAP,CAAiCtB,CAAjC,EAAoCrB,YAApC,CADK,GAEL,KAFF;AAGD,KAPc;AAQf8C,8BAA0B,kCAAUzB,CAAV,EAAa;AACrCvB,aAAO8C,QAAQC,GAAR,CAAY,6BAAZ,CAAP;;AAEA,aAAOR,OAAOS,wBAAP,IAAmCC,cAAcV,MAAd,EAAsBrC,YAAtB,CAAnC,GACLqC,OAAOS,wBAAP,CAAgCzB,CAAhC,EAAmCrB,YAAnC,CADK,GAEL,KAFF;AAGD,KAdc;AAefgD,sCAAkC,0CAAU3B,CAAV,EAAa;AAC7CvB,aAAO8C,QAAQC,GAAR,CAAY,qCAAZ,CAAP;AACAX,6BAAuBlC,YAAvB;;AAGA,UAAIqB,EAAE4B,WAAF,CAAcC,OAAd,CAAsBC,MAAtB,KAAiC,CAArC,EAAwC;AACtCpD,+BAAuBC,YAAvB;AACD;AACDA,mBAAaS,mBAAb,GAAmCY,EAAED,YAAF,CAAeX,mBAAlD;AACA,aAAO4B,OAAOW,gCAAP,GACLX,OAAOW,gCAAP,CAAwC3B,CAAxC,EAA2CrB,YAA3C,CADK,GAEL,KAFF;AAGD,KA3Bc;;AA6BfoD,qCAAiC,yCAAU/B,CAAV,EAAa;AAC5CvB,aAAO8C,QAAQC,GAAR,CAAY,oCAAZ,CAAP;AACA,UAAMzB,eAAeC,EAAED,YAAvB;;AAIA,UAAIpB,aAAaU,qBAAb,KAAuCU,aAAaS,mBAAxD,EAA6E;AAC3E,eAAO,KAAP;AACD;AACDV,+BAAyBnB,YAAzB,EAAuCoB,YAAvC,EAAqDC,CAArD;AACA,aAAOgB,OAAOe,+BAAP,IAA0CL,cAAcV,MAAd,EAAsBrC,YAAtB,CAA1C,GACLqC,OAAOe,+BAAP,CAAuC/B,CAAvC,EAA0CrB,YAA1C,CADK,GAEL,KAFF;AAGD,KA1Cc;;AA4CfqD,sBAAkB,0BAAUhC,CAAV,EAAa;AAC7BvB,aAAO8C,QAAQC,GAAR,CAAY,qBAAZ,CAAP;AACAX,6BAAuBlC,YAAvB;AACA,UAAI,CAAC+B,iBAAiBC,MAAtB,EAA8B;AAC5BD,yBAAiBC,MAAjB,GAA0B,gCAAmBsB,uBAAnB,EAA1B;AACD;AACDtD,mBAAauD,eAAb,GAA+BlC,EAAED,YAAF,CAAeS,mBAA9C;AACA7B,mBAAaG,EAAb,GAAkBV,iBAAiB4B,EAAED,YAAnB,CAAlB;AACApB,mBAAaI,EAAb,GAAkBV,iBAAiB2B,EAAED,YAAnB,CAAlB;AACApB,mBAAaK,EAAb,GAAkB,CAAlB;AACAL,mBAAaM,EAAb,GAAkB,CAAlB;AACA,UAAI+B,OAAOgB,gBAAX,EAA6B;AAC3BhB,eAAOgB,gBAAP,CAAwBhC,CAAxB,EAA2BrB,YAA3B;AACD;;AAED,aAAOqC,OAAOmB,4BAAP,KAAwC1C,SAAxC,GACL,IADK,GAELuB,OAAOmB,4BAAP,EAFF;AAGD,KA9Dc;;AAgEfC,uBAAmB,2BAAUpC,CAAV,EAAa;AAC9BvB,aAAO8C,QAAQC,GAAR,CAAY,sBAAZ,CAAP;AACAf,6BAAuBC,gBAAvB;AACAM,aAAOoB,iBAAP,IAA4BpB,OAAOoB,iBAAP,CAAyBpC,CAAzB,EAA4BrB,YAA5B,CAA5B;AACD,KApEc;;AAsEf0D,wBAAoB,4BAAUrC,CAAV,EAAa;AAC/B,UAAIrB,aAAagB,WAAjB,EAA8B;AAC5B,YAAIhB,aAAa2D,gBAAjB,EAAmC;AACjC,cAAI/B,0BAA0BP,EAAED,YAAF,CAAeS,mBAAf,GAAqC7B,aAAa4D,qBAA5E,IAAqGjE,qBAAzG,EAAgI;AAC9HK,yBAAaiB,WAAb,GAA2B,IAA3B;AACD;AACF;AACDjB,qBAAa2D,gBAAb,GAAgC,IAAhC;;AAGA,YAAI,CAAC3D,aAAaiB,WAAlB,EAA+B;AAC7B,cAAM4C,WAAW,qBAAc,EAAd,EAAkB7D,YAAlB,CAAjB;AACA,cAAM8D,YAAY,0BAAWC,UAAX,CAAsB,YAAM;AAC5C,gBAAI/D,aAAamC,mBAAb,KAAqC2B,SAAzC,EAAoD;AAClDhE,qBAAO8C,QAAQC,GAAR,CAAY,kCAAZ,CAAP;AACAR,qBAAO2B,6BAAP,IAAwC3B,OAAO2B,6BAAP,CAAqC3C,CAArC,EAAwCwC,QAAxC,CAAxC;AACD;AACF,WALiB,EAKflE,qBALe,CAAlB;AAMAK,uBAAamC,mBAAb,GAAmC2B,SAAnC;AACD;AACF;AACD9D,mBAAa4D,qBAAb,GAAqCvC,EAAED,YAAF,CAAeS,mBAApD;;AAEA/B,aAAO8C,QAAQC,GAAR,CAAY,0BAA0BoB,KAAKC,SAAL,CAAelE,YAAf,CAAtC,CAAP;AACA8B,6BAAuBC,gBAAvB;AACAM,aAAOqB,kBAAP,IAA6BrB,OAAOqB,kBAAP,CAA0BrC,CAA1B,EAA6BrB,YAA7B,CAA7B;AACAD,6BAAuBC,YAAvB;AACD,KAjGc;;AAmGfmE,sBAAkB,0BAAU9C,CAAV,EAAa;AAC7BvB,aAAO8C,QAAQC,GAAR,CAAY,qBAAZ,CAAP;AACA,UAAMzB,eAAeC,EAAED,YAAvB;AACApB,mBAAaS,mBAAb,GAAmCW,aAAaX,mBAAhD;AACA,UAAI4B,OAAO8B,gBAAX,EAA6B;AAC3B9B,eAAO8B,gBAAP,CAAwB9C,CAAxB,EAA2BrB,YAA3B;AACD;AACF,KA1Gc;;AA4GfoE,qBAAiB,yBAAU/C,CAAV,EAAa;AAC5B,UAAMD,eAAeC,EAAED,YAAvB;;AAGA,UAAIpB,aAAaU,qBAAb,KAAuCU,aAAaS,mBAAxD,EAA6E;AAC3E;AACD;;AAGDV,+BAAyBnB,YAAzB,EAAuCoB,YAAvC,EAAqDC,CAArD;;AAEAvB,aAAO8C,QAAQC,GAAR,CAAY,uBAAuBoB,KAAKC,SAAL,CAAelE,YAAf,CAAnC,CAAP;AACA,UAAIqC,OAAO+B,eAAP,IAA0BrB,cAAcV,MAAd,EAAsBrC,YAAtB,CAA9B,EAAmE;AACjEqC,eAAO+B,eAAP,CAAuB/C,CAAvB,EAA0BrB,YAA1B;AACD;AACF,KA3Hc;;AA6HfqE,oBAAgB,wBAAUhD,CAAV,EAAa;AAC3B,UAAMD,eAAeC,EAAED,YAAvB;AACApB,mBAAaS,mBAAb,GAAmCW,aAAaX,mBAAhD;;AAEA,UAAIW,aAAaX,mBAAb,GAAmC,CAAnC,IACCmB,0BAA0BR,aAAaS,mBAAb,GAAmC7B,aAAauD,eAA1E,IAA6F5D,qBAD9F,IAEC6C,KAAK8B,GAAL,CAAStE,aAAaK,EAAtB,KAA6BT,kBAF9B,IAGC4C,KAAK8B,GAAL,CAAStE,aAAaM,EAAtB,KAA6BV,kBAHlC,EAIE;AACAI,qBAAakB,gBAAb,GAAgC,IAAhC;AACD;AACD,UAAI,CAAClB,aAAakB,gBAAlB,EAAoC;AAClClB,qBAAagB,WAAb,GAA2B,IAA3B;AACD;;AAEDlB,aAAO8C,QAAQC,GAAR,CAAY,sBAAsBoB,KAAKC,SAAL,CAAelE,YAAf,CAAlC,CAAP;AACA8B,6BAAuBC,gBAAvB;AACAM,aAAOgC,cAAP,IAAyBhC,OAAOgC,cAAP,CAAsBhD,CAAtB,EAAyBrB,YAAzB,CAAzB;AACD,KA/Ic;;AAiJfuE,0BAAsB,8BAAUlD,CAAV,EAAa;AACjCvB,aAAO8C,QAAQC,GAAR,CAAY,yBAAZ,CAAP;AACAf,6BAAuBC,gBAAvB;AACAM,aAAOkC,oBAAP,IAA+BlC,OAAOkC,oBAAP,CAA4BlD,CAA5B,EAA+BrB,YAA/B,CAA/B;AACAD,6BAAuBC,YAAvB;AACD,KAtJc;;AAwJfwE,mCAA+B,uCAAUnD,CAAV,EAAa;AAC1CvB,aAAO8C,QAAQC,GAAR,CAAY,kCAAZ,CAAP;AACA,aAAOR,OAAOmC,6BAAP,GACLnC,OAAOmC,6BAAP,CAAqCnD,EAAErB,YAAvC,CADK,GAEL,IAFF;AAGD;AA7Jc,GAAjB;AA+JA,kCAAW0C,QAAX;AACD;;AASD,SAASK,aAAT,CAAuBV,MAAvB,EAA+BrC,YAA/B,EAA6C;AAC3C,MAAIA,aAAaS,mBAAb,GAAmC,CAAvC,EAA0C;AAExC,WAAO,IAAP;AACD;;AAED,MAAIgE,gBAAgB5E,cAApB;AACA,MAAI,OAAOwC,OAAOoC,aAAd,KAAgC,QAApC,EAA8C;AAC5CA,oBAAgBpC,OAAOqC,eAAvB;AACD;AACD,MAAIlC,KAAK8B,GAAL,CAAStE,aAAaK,EAAtB,KAA6BoE,aAA7B,IAA8CjC,KAAK8B,GAAL,CAAStE,aAAaM,EAAtB,KAA6BmE,aAA/E,EAA8F;AAC5F,WAAO,IAAP;AACD;AACD,SAAO,KAAP;AACD","sourcesContent":["/**\n * Inspired by 'PanResponder' from Facebook.\n */\n\n'use strict';\n\nimport {InteractionManager} from 'react-native';\nimport TouchHistoryMath from './TouchHistoryMath'; //copied from react/lib/TouchHistoryMath.js\nimport {pinchDistance} from './TouchDistanceMath';\nimport TimerMixin from 'react-timer-mixin';\n\nconst currentCentroidXOfTouchesChangedAfter = TouchHistoryMath.currentCentroidXOfTouchesChangedAfter;\nconst currentCentroidYOfTouchesChangedAfter = TouchHistoryMath.currentCentroidYOfTouchesChangedAfter;\nconst previousCentroidXOfTouchesChangedAfter = TouchHistoryMath.previousCentroidXOfTouchesChangedAfter;\nconst previousCentroidYOfTouchesChangedAfter = TouchHistoryMath.previousCentroidYOfTouchesChangedAfter;\nconst currentCentroidX = TouchHistoryMath.currentCentroidX;\nconst currentCentroidY = TouchHistoryMath.currentCentroidY;\n\nconst TAP_UP_TIME_THRESHOLD = 400;\nconst TAP_MOVE_THRESHOLD = 10;\nconst MOVE_THRESHOLD = 2;\n\nlet DEV = false;\n\nfunction initializeGestureState(gestureState) {\n  gestureState.moveX = 0;\n  gestureState.moveY = 0;\n  gestureState.x0 = 0;\n  gestureState.y0 = 0;\n  gestureState.dx = 0;\n  gestureState.dy = 0;\n  gestureState.vx = 0;\n  gestureState.vy = 0;\n  gestureState.numberActiveTouches = 0;\n  // All `gestureState` accounts for timeStamps up until:\n  gestureState._accountsForMovesUpTo = 0;\n\n\n  gestureState.previousMoveX = 0;\n  gestureState.previousMoveY = 0;\n  gestureState.pinch = undefined;\n  gestureState.previousPinch = undefined;\n  gestureState.singleTapUp = false;\n  gestureState.doubleTapUp = false;\n  gestureState._singleTabFailed = false;\n\n}\n\nfunction updateGestureStateOnMove(gestureState, touchHistory, e) {\n  const movedAfter = gestureState._accountsForMovesUpTo;\n  const prevX = previousCentroidXOfTouchesChangedAfter(touchHistory, movedAfter);\n  const x = currentCentroidXOfTouchesChangedAfter(touchHistory, movedAfter);\n  const prevY = previousCentroidYOfTouchesChangedAfter(touchHistory, movedAfter);\n  const y = currentCentroidYOfTouchesChangedAfter(touchHistory, movedAfter);\n  const dx = x - prevX;\n  const dy = y - prevY;\n\n  gestureState.numberActiveTouches = touchHistory.numberActiveTouches;\n  gestureState.moveX = x;\n  gestureState.moveY = y;\n\n  // TODO: This must be filtered intelligently.\n  //const dt = touchHistory.mostRecentTimeStamp - movedAfter;\n  const dt = convertToMillisecIfNeeded(touchHistory.mostRecentTimeStamp - movedAfter);\n  gestureState.vx = dx / dt;\n  gestureState.vy = dy / dt;\n  gestureState.dx += dx;\n  gestureState.dy += dy;\n  gestureState._accountsForMovesUpTo = touchHistory.mostRecentTimeStamp;\n\n\n  gestureState.previousMoveX = prevX;\n  gestureState.previousMoveY = prevY;\n  gestureState.pinch = pinchDistance(touchHistory, movedAfter, true);\n  gestureState.previousPinch = pinchDistance(touchHistory, movedAfter, false);\n}\n\nfunction clearInteractionHandle(interactionState) {\n  if (interactionState.handle) {\n    InteractionManager.clearInteractionHandle(interactionState.handle);\n    interactionState.handle = null;\n  }\n}\n\n/**\n * Due to commit https://github.com/facebook/react-native/commit/f2c1868b56bdfc8b0d6f448733848eafed2cd440,\n * Android is using nanoseconds while iOS is using milliseconds.\n * @param interval\n * @returns {*}\n */\nfunction convertToMillisecIfNeeded(interval) {\n  if (interval > 1000000) {\n    return interval / 1000000;\n  }\n  return interval;\n}\n\nfunction cancelSingleTapConfirm(gestureState) {\n  if(typeof gestureState._singleTapConfirmId !== 'undefined') {\n    TimerMixin.clearTimeout(gestureState._singleTapConfirmId);\n    gestureState._singleTapConfirmId = undefined;\n  }\n}\n\n/**\n * The config object contains same callbacks as the default gesture responder(https://facebook.github.io/react-native/docs/gesture-responder-system.html).\n * And every callback are called with an additional argument 'gestureState', like PanResponder.\n * @param config\n * @returns {{}}\n */\n\n/**\n * The config object contains same callbacks as the default gesture responder(https://facebook.github.io/react-native/docs/gesture-responder-system.html).\n * And every callback are called with an additional argument 'gestureState', like PanResponder.\n * @param config\n * @param debug true to enable debug logs\n * @returns {{}}\n */\nexport default function create(config) {\n  if(config.debug) {\n    DEV = true;\n  }\n\n  const interactionState = {\n    handle: null\n  };\n  const gestureState = {\n    // Useful for debugging\n    stateID: Math.random(),\n  };\n  initializeGestureState(gestureState);\n\n  const handlers = {\n    onStartShouldSetResponder: function (e) {\n      DEV && console.log('onStartShouldSetResponder...');\n      cancelSingleTapConfirm(gestureState);\n      return config.onStartShouldSetResponder ?\n        config.onStartShouldSetResponder(e, gestureState) :\n        false;\n    },\n    onMoveShouldSetResponder: function (e) {\n      DEV && console.log('onMoveShouldSetResponder...');\n\n      return config.onMoveShouldSetResponder && effectiveMove(config, gestureState) ?\n        config.onMoveShouldSetResponder(e, gestureState) :\n        false;\n    },\n    onStartShouldSetResponderCapture: function (e) {\n      DEV && console.log('onStartShouldSetResponderCapture...');\n      cancelSingleTapConfirm(gestureState);\n      // TODO: Actually, we should reinitialize the state any time\n      // touches.length increases from 0 active to > 0 active.\n      if (e.nativeEvent.touches.length === 1) {\n        initializeGestureState(gestureState);\n      }\n      gestureState.numberActiveTouches = e.touchHistory.numberActiveTouches;\n      return config.onStartShouldSetResponderCapture ?\n        config.onStartShouldSetResponderCapture(e, gestureState) :\n        false;\n    },\n\n    onMoveShouldSetResponderCapture: function (e) {\n      DEV && console.log('onMoveShouldSetResponderCapture...');\n      const touchHistory = e.touchHistory;\n      // Responder system incorrectly dispatches should* to current responder\n      // Filter out any touch moves past the first one - we would have\n      // already processed multi-touch geometry during the first event.\n      if (gestureState._accountsForMovesUpTo === touchHistory.mostRecentTimeStamp) {\n        return false;\n      }\n      updateGestureStateOnMove(gestureState, touchHistory, e);\n      return config.onMoveShouldSetResponderCapture && effectiveMove(config, gestureState) ?\n        config.onMoveShouldSetResponderCapture(e, gestureState) :\n        false;\n    },\n\n    onResponderGrant: function (e) {\n      DEV && console.log('onResponderGrant...');\n      cancelSingleTapConfirm(gestureState);\n      if (!interactionState.handle) {\n        interactionState.handle = InteractionManager.createInteractionHandle();\n      }\n      gestureState._grantTimestamp = e.touchHistory.mostRecentTimeStamp;\n      gestureState.x0 = currentCentroidX(e.touchHistory);\n      gestureState.y0 = currentCentroidY(e.touchHistory);\n      gestureState.dx = 0;\n      gestureState.dy = 0;\n      if (config.onResponderGrant) {\n        config.onResponderGrant(e, gestureState);\n      }\n      // TODO: t7467124 investigate if this can be removed\n      return config.onShouldBlockNativeResponder === undefined ?\n        true :\n        config.onShouldBlockNativeResponder();\n    },\n\n    onResponderReject: function (e) {\n      DEV && console.log('onResponderReject...');\n      clearInteractionHandle(interactionState);\n      config.onResponderReject && config.onResponderReject(e, gestureState);\n    },\n\n    onResponderRelease: function (e) {\n      if (gestureState.singleTapUp) {\n        if (gestureState._lastSingleTapUp) {\n          if (convertToMillisecIfNeeded(e.touchHistory.mostRecentTimeStamp - gestureState._lastReleaseTimestamp) < TAP_UP_TIME_THRESHOLD) {\n            gestureState.doubleTapUp = true;\n          }\n        }\n        gestureState._lastSingleTapUp = true;\n\n        //schedule to confirm single tap\n        if (!gestureState.doubleTapUp) {\n          const snapshot = Object.assign({}, gestureState);\n          const timeoutId = TimerMixin.setTimeout(() => {\n            if (gestureState._singleTapConfirmId === timeoutId) {\n              DEV && console.log('onResponderSingleTapConfirmed...');\n              config.onResponderSingleTapConfirmed && config.onResponderSingleTapConfirmed(e, snapshot);\n            }\n          }, TAP_UP_TIME_THRESHOLD);\n          gestureState._singleTapConfirmId = timeoutId;\n        }\n      }\n      gestureState._lastReleaseTimestamp = e.touchHistory.mostRecentTimeStamp;\n\n      DEV && console.log('onResponderRelease...' + JSON.stringify(gestureState));\n      clearInteractionHandle(interactionState);\n      config.onResponderRelease && config.onResponderRelease(e, gestureState);\n      initializeGestureState(gestureState);\n    },\n\n    onResponderStart: function (e) {\n      DEV && console.log('onResponderStart...');\n      const touchHistory = e.touchHistory;\n      gestureState.numberActiveTouches = touchHistory.numberActiveTouches;\n      if (config.onResponderStart) {\n        config.onResponderStart(e, gestureState);\n      }\n    },\n\n    onResponderMove: function (e) {\n      const touchHistory = e.touchHistory;\n      // Guard against the dispatch of two touch moves when there are two\n      // simultaneously changed touches.\n      if (gestureState._accountsForMovesUpTo === touchHistory.mostRecentTimeStamp) {\n        return;\n      }\n      // Filter out any touch moves past the first one - we would have\n      // already processed multi-touch geometry during the first event.\n      updateGestureStateOnMove(gestureState, touchHistory, e);\n\n      DEV && console.log('onResponderMove...' + JSON.stringify(gestureState));\n      if (config.onResponderMove && effectiveMove(config, gestureState)) {\n        config.onResponderMove(e, gestureState);\n      }\n    },\n\n    onResponderEnd: function (e) {\n      const touchHistory = e.touchHistory;\n      gestureState.numberActiveTouches = touchHistory.numberActiveTouches;\n\n      if (touchHistory.numberActiveTouches > 0\n        || convertToMillisecIfNeeded(touchHistory.mostRecentTimeStamp - gestureState._grantTimestamp) > TAP_UP_TIME_THRESHOLD\n        || Math.abs(gestureState.dx) >= TAP_MOVE_THRESHOLD\n        || Math.abs(gestureState.dy) >= TAP_MOVE_THRESHOLD\n      ) {\n        gestureState._singleTabFailed = true;\n      }\n      if (!gestureState._singleTabFailed) {\n        gestureState.singleTapUp = true;\n      }\n\n      DEV && console.log('onResponderEnd...' + JSON.stringify(gestureState));\n      clearInteractionHandle(interactionState);\n      config.onResponderEnd && config.onResponderEnd(e, gestureState);\n    },\n\n    onResponderTerminate: function (e) {\n      DEV && console.log('onResponderTerminate...');\n      clearInteractionHandle(interactionState);\n      config.onResponderTerminate && config.onResponderTerminate(e, gestureState);\n      initializeGestureState(gestureState);\n    },\n\n    onResponderTerminationRequest: function (e) {\n      DEV && console.log('onResponderTerminationRequest...');\n      return config.onResponderTerminationRequest ?\n        config.onResponderTerminationRequest(e.gestureState) :\n        true;\n    }\n  };\n  return {...handlers};\n}\n\n/**\n * On Android devices, the default gesture responder is too sensitive that a single tap(no move intended) may trigger a move event.\n * We can use a moveThreshold config to avoid those unwanted move events.\n * @param config\n * @param gestureState\n * @returns {boolean}\n */\nfunction effectiveMove(config, gestureState) {\n  if (gestureState.numberActiveTouches > 1) {\n    // on iOS simulator, a pinch gesture(move with alt pressed) will not change gestureState.dx(always 0)\n    return true;\n  }\n\n  let moveThreshold = MOVE_THRESHOLD;\n  if (typeof config.moveThreshold === 'number') {\n    moveThreshold = config.minMoveDistance;\n  }\n  if (Math.abs(gestureState.dx) >= moveThreshold || Math.abs(gestureState.dy) >= moveThreshold) {\n    return true;\n  }\n  return false;\n}"]}]