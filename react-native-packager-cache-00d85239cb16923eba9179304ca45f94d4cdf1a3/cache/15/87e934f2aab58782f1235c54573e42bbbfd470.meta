["0f7e39c05f65d7ae3387cbf33877dfb3e37d55f9","b0795dbb3396fc4e3a4c4a0375a08a36112134b4",["react","react-native","react-native/Libraries/Image/resolveAssetSource"],[138,235,286],{"version":3,"sources":["/home/ziddi/Desktop/venders/node_modules/react-native-photo-view/PhotoView.android.js"],"names":["resolveAssetSource","require","PhotoView","source","props","loadingIndicatorSource","uri","console","warn","src","onLoadStart","onLoad","onLoadEnd","nativeProps","shouldNotifyLoadEvents","loadingIndicatorSrc","propTypes","oneOfType","shape","string","number","fadeDuration","minimumZoomScale","maximumZoomScale","scale","androidZoomTransitionDuration","androidScaleType","oneOf","func","onTap","onViewTap","onScale","cfg","nativeOnly","PhotoViewAndroid"],"mappings":";;;;;;;AAAA;;;;AACA;;AAEA,IAAMA,qBAAqBC,OAArB,mDAAN;;IAEqBC,S;;;;;;;;;;iCA+BR;AACL,gBAAMC,SAASH,mBAAmB,KAAKI,KAAL,CAAWD,MAA9B,CAAf;AACA,gBAAIE,yBAAyBL,mBAAmB,KAAKI,KAAL,CAAWC,sBAA9B,CAA7B;;AAEA,gBAAIF,UAAUA,OAAOG,GAAP,KAAe,EAA7B,EAAiC;AAC7BC,wBAAQC,IAAR,CAAa,0CAAb;AACH;;AAED,gBAAI,KAAKJ,KAAL,CAAWK,GAAf,EAAoB;AAChBF,wBAAQC,IAAR,CAAa,2EAAb;AACH;;AAED,gBAAIL,UAAUA,OAAOG,GAArB,EAA0B;AAAA,6BACiB,KAAKF,KADtB;AAAA,oBACjBM,WADiB,UACjBA,WADiB;AAAA,oBACJC,MADI,UACJA,MADI;AAAA,oBACIC,SADJ,UACIA,SADJ;;;AAGtB,oBAAIC,uCACG,KAAKT,KADR;AAEAU,4CAAwB,CAAC,EAAEJ,eAAeC,MAAf,IAAyBC,SAA3B,CAFzB;AAGAH,yBAAKN,OAAOG,GAHZ;AAIAS,yCAAqBV,yBAAyBA,uBAAuBC,GAAhD,GAAsD;AAJ3E,kBAAJ;;AAOA,uBAAO,8BAAC,gBAAD,EAAsBO,WAAtB,CAAP;AACH;AACD,mBAAO,IAAP;AACH;;;4BAvDMG,S;AACHb,YAAQ,iBAAUc,SAAV,CAAoB,CACxB,iBAAUC,KAAV,CAAgB;AACZZ,aAAK,iBAAUa;AADH,KAAhB,CADwB,EAKxB,iBAAUC,MALc,CAApB,C;AAORf,4BAAwB,iBAAUY,SAAV,CAAoB,CACxC,iBAAUC,KAAV,CAAgB;AACZZ,aAAK,iBAAUa;AADH,KAAhB,CADwC,EAKxC,iBAAUC,MAL8B,CAApB,C;AAOxBC,kBAAc,iBAAUD,M;AACxBE,sBAAkB,iBAAUF,M;AAC5BG,sBAAkB,iBAAUH,M;AAC5BI,WAAO,iBAAUJ,M;AACjBK,mCAA+B,iBAAUL,M;AACzCM,sBAAkB,iBAAUC,KAAV,CAAgB,CAAC,QAAD,EAAW,YAAX,EAAyB,cAAzB,EAAyC,WAAzC,EAAsD,UAAtD,EAAkE,QAAlE,EAA4E,OAA5E,EAAqF,QAArF,CAAhB,C;AAClBjB,iBAAa,iBAAUkB,I;AACvBjB,YAAQ,iBAAUiB,I;AAClBhB,eAAW,iBAAUgB,I;AACrBC,WAAO,iBAAUD,I;AACjBE,eAAW,iBAAUF,I;AACrBG,aAAS,iBAAUH;GAChB,kBAAKZ,S;kBA5BKd,S;;;AA2DrB,IAAI8B,MAAM;AACNC,gBAAY;AACRxB,aAAK,IADG;AAERM,6BAAqB,IAFb;AAGRD,gCAAwB;AAHhB;AADN,CAAV;AAOA,IAAMoB,mBAAmB,yCAAuB,kBAAvB,EAA2ChC,SAA3C,EAAsD8B,GAAtD,CAAzB","sourcesContent":["import React, {Component, PropTypes} from 'react';\nimport {requireNativeComponent, View} from 'react-native';\n\nconst resolveAssetSource = require('react-native/Libraries/Image/resolveAssetSource');\n\nexport default class PhotoView extends Component {\n    static propTypes = {\n        source: PropTypes.oneOfType([\n            PropTypes.shape({\n                uri: PropTypes.string\n            }),\n            // Opaque type returned by require('./image.jpg')\n            PropTypes.number\n        ]),\n        loadingIndicatorSource: PropTypes.oneOfType([\n            PropTypes.shape({\n                uri: PropTypes.string\n            }),\n            // Opaque type returned by require('./image.jpg')\n            PropTypes.number\n        ]),\n        fadeDuration: PropTypes.number,\n        minimumZoomScale: PropTypes.number,\n        maximumZoomScale: PropTypes.number,\n        scale: PropTypes.number,\n        androidZoomTransitionDuration: PropTypes.number,\n        androidScaleType: PropTypes.oneOf([\"center\", \"centerCrop\", \"centerInside\", \"fitCenter\", \"fitStart\", \"fitEnd\", \"fitXY\", \"matrix\"]),\n        onLoadStart: PropTypes.func,\n        onLoad: PropTypes.func,\n        onLoadEnd: PropTypes.func,\n        onTap: PropTypes.func,\n        onViewTap: PropTypes.func,\n        onScale: PropTypes.func,\n        ...View.propTypes\n    };\n\n    render() {\n        const source = resolveAssetSource(this.props.source);\n        var loadingIndicatorSource = resolveAssetSource(this.props.loadingIndicatorSource);\n\n        if (source && source.uri === '') {\n            console.warn('source.uri should not be an empty string');\n        }\n\n        if (this.props.src) {\n            console.warn('The <PhotoView> component requires a `source` property rather than `src`.');\n        }\n\n        if (source && source.uri) {\n            var {onLoadStart, onLoad, onLoadEnd} = this.props;\n\n            var nativeProps = {\n                ...this.props,\n                shouldNotifyLoadEvents: !!(onLoadStart || onLoad || onLoadEnd),\n                src: source.uri,\n                loadingIndicatorSrc: loadingIndicatorSource ? loadingIndicatorSource.uri : null,\n            };\n\n            return <PhotoViewAndroid {...nativeProps} />\n        }\n        return null\n    }\n}\n\nvar cfg = {\n    nativeOnly: {\n        src: true,\n        loadingIndicatorSrc: true,\n        shouldNotifyLoadEvents: true\n    }\n};\nconst PhotoViewAndroid = requireNativeComponent('PhotoViewAndroid', PhotoView, cfg);\n"]}]