["9b9702170f64ca373c1ab1bb1bcc8e21ff805f3e","6c85c539749c8ab5dedae376f28f9306ec0cfa00",["react","lodash","../../index"],[145,237,331],{"version":3,"sources":["/home/ziddi/Desktop/venders/node_modules/@shoutem/ui/components/ImageGallery/ImageGalleryBase.js"],"names":["IMAGE_PREVIEW_MODE","IMAGE_GALLERY_MODE","ImageGalleryBase","props","renderPage","bind","onIndexSelected","onImageTap","state","selectedIndex","imageSwitchingEnabled","collapsed","mode","setMode","newIndex","setState","isFunction","onModeChanged","pageData","pageIndex","style","renderImageOverlay","image","get","isImageVisible","transformImageProps","getPropsTransformer","imageProps","source","uri","flex","transformedImageProps","showOverlay","overlay","page","renderImage","data","renderOverlay","renderPlaceholder","container","timingDriver","pageMargin","propTypes","arrayOf","shape","string","description","title","isRequired","func","number","object","defaultProps","showNextPage"],"mappings":"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","sourcesContent":["import React, { Component, PropTypes } from 'react';\n\nimport _ from 'lodash';\n\nimport {\n  View,\n  HorizontalPager,\n  LoadingIndicator,\n  Image,\n} from '../../index';\n\n\nconst IMAGE_PREVIEW_MODE = 'imagePreview';\nconst IMAGE_GALLERY_MODE = 'gallery';\n\nexport class ImageGalleryBase extends Component {\n  /**\n   * The image preview mode is the mode in which\n   * the user can zoom in/out and pan the image around.\n   */\n  static IMAGE_PREVIEW_MODE = IMAGE_PREVIEW_MODE;\n\n  /**\n   * The gallery mode is the mode in which\n   * the user can scroll between images, and can see\n   * additional info about each image.\n   */\n  static IMAGE_GALLERY_MODE = IMAGE_GALLERY_MODE;\n\n  static propTypes = {\n    // Array containing objects with gallery data (shape defined below)\n    data: PropTypes.arrayOf(\n      PropTypes.shape({\n        source: PropTypes.shape({\n          uri: PropTypes.string,\n        }),\n        description: PropTypes.string,\n        title: PropTypes.string,\n      }),\n    ).isRequired,\n    // Callback function called when user swipes between pages (images)\n    // Index of new (selected) page is passed to this callback\n    onIndexSelected: PropTypes.func,\n    // Initially selected page in gallery\n    selectedIndex: PropTypes.number,\n    // onModeChanged(mode), callback function triggered when user taps on single photo\n    // Or when user transforms (zooms etc.) image\n    // Useful for hiding external controls (i.e. navigation bar)\n    // Mode can be `gallery` or `imagePreview`\n    onModeChanged: PropTypes.func,\n    // Style prop used to override default (theme) styling\n    style: PropTypes.object,\n    // Renders an overlay over all images\n    // For example page indicators using the `PageIndicators` component\n    // renderOverlay(imageData, imageIndex)\n    renderOverlay: PropTypes.func,\n    // Renders an overlay over a single image\n    // For example image gallery overlay using the `ImageGalleryOverlay` component\n    // renderOverlay(imageData, imageIndex)\n    renderImageOverlay: PropTypes.func,\n    // Callback function that can be used to define placeholder\n    // that appears when content is loading\n    renderPlaceholder: PropTypes.func,\n  };\n\n  static defaultProps = {\n    selectedIndex: 0,\n    showNextPage: false,\n    renderPlaceholder: () => <LoadingIndicator />,\n  };\n\n  constructor(props) {\n    super(props);\n    this.renderPage = this.renderPage.bind(this);\n    this.onIndexSelected = this.onIndexSelected.bind(this);\n    this.onImageTap = this.onImageTap.bind(this);\n\n    this.state = {\n      selectedIndex: this.props.selectedIndex || 0,\n      imageSwitchingEnabled: true,\n      collapsed: true,\n      mode: IMAGE_GALLERY_MODE,\n    };\n  }\n\n  onImageTap() {\n    const { mode } = this.state;\n\n    // We are toggling between image preview and\n    // gallery modes when the user taps on an image.\n    if (mode === IMAGE_PREVIEW_MODE) {\n      this.setMode(IMAGE_GALLERY_MODE);\n    } else {\n      this.setMode(IMAGE_PREVIEW_MODE);\n    }\n  }\n\n  onIndexSelected(newIndex) {\n    const { onIndexSelected } = this.props;\n    this.setState({\n      selectedIndex: newIndex,\n    }, () => {\n      if (_.isFunction(onIndexSelected)) {\n        onIndexSelected(newIndex);\n      }\n    });\n  }\n\n  setMode(mode) {\n    const { onModeChanged } = this.props;\n    if (this.state.mode === mode) {\n      return;\n    }\n\n    this.setState({ mode }, () => {\n      if (_.isFunction(onModeChanged)) {\n        onModeChanged(mode);\n      }\n    });\n  }\n\n  renderImage() {\n    // Override this to provide platform specific UI\n  }\n\n  renderPage(pageData, pageIndex) {\n    const { mode, selectedIndex } = this.state;\n    const { style, renderImageOverlay } = this.props;\n    const image = _.get(pageData, 'source.uri');\n\n    if (!image) {\n      return null;\n    }\n\n    const isImageVisible = (pageIndex === selectedIndex);\n    const transformImageProps = Image.getPropsTransformer();\n    const imageProps = {\n      source: { uri: image },\n      style: { flex: 1 },\n    };\n    const transformedImageProps = _.isFunction(transformImageProps) ?\n      transformImageProps(imageProps) :\n      imageProps;\n\n    const showOverlay = _.isFunction(renderImageOverlay) &&\n      // Nothing should be rendered above an image if the user is in\n      // the preview mode (pinching, and panning the image).\n      (mode !== IMAGE_PREVIEW_MODE) &&\n      // We are not rendering overlays above images that are not visible\n      isImageVisible;\n    const overlay = showOverlay && renderImageOverlay(pageData, pageIndex);\n\n    return (\n      <View\n        key={pageIndex}\n        style={style.page}\n      >\n        {this.renderImage(transformedImageProps, pageData, pageIndex)}\n        {overlay}\n      </View>\n    );\n  }\n\n  render() {\n    const { data, renderOverlay, renderPlaceholder, style } = this.props;\n    const { selectedIndex, imageSwitchingEnabled } = this.state;\n\n    return (\n      <View\n        style={style.container}\n        driver={this.timingDriver}\n      >\n        <HorizontalPager\n          data={data}\n          onIndexSelected={this.onIndexSelected}\n          selectedIndex={selectedIndex}\n          renderPage={this.renderPage}\n          bounces\n          pageMargin={style.pageMargin}\n          showNextPage={false}\n          renderOverlay={renderOverlay}\n          renderPlaceholder={renderPlaceholder}\n          scrollEnabled={imageSwitchingEnabled}\n        />\n      </View>\n    );\n  }\n}\n"]}]