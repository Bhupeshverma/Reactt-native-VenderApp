["29e2611d1876876e60a0d49def425b23fc0be3b4","a823ce08b88d329982c7856cb5921fc2c5e9fb3e",["react","react-native","../../withCachedChildNavigation"],[87,184,243],{"version":3,"sources":["/home/ziddi/Desktop/venders/node_modules/react-navigation/src/views/Drawer/DrawerSidebar.js"],"names":["DrawerSidebar","_getScreenOptions","routeKey","DrawerScreen","props","router","getComponentForRouteName","getScreenOptions","childNavigationProps","screenProps","_getLabel","focused","tintColor","route","key","drawerLabel","title","routeName","_renderIcon","drawerIcon","_onItemPress","navigation","navigate","ContentComponent","contentComponent","state","styles","container","style","contentOptions","routes","index","create","flex","backgroundColor"],"mappings":";;;;AAEA;;;;AACA;;AAEA;;;;IAkCMA,a;;;;;;;;;;;;;;gNAGJC,iB,GAAoB,UAACC,QAAD,EAAsB;AACxC,UAAMC,eAAe,MAAKC,KAAL,CAAWC,MAAX,CAAkBC,wBAAlB,CACnB,aADmB,CAArB;AAGA,aAAOH,aAAaE,MAAb,CAAoBE,gBAApB,CACL,MAAKH,KAAL,CAAWI,oBAAX,CAAgCN,QAAhC,CADK,EAEL,MAAKE,KAAL,CAAWK,WAFN,CAAP;AAID,K,QAEDC,S,GAAY,iBAAgD;AAAA,UAA7CC,OAA6C,SAA7CA,OAA6C;AAAA,UAApCC,SAAoC,SAApCA,SAAoC;AAAA,UAAzBC,KAAyB,SAAzBA,KAAyB;;AAAA,kCAC3B,MAAKZ,iBAAL,CAAuBY,MAAMC,GAA7B,CAD2B;AAAA,UAClDC,WADkD,yBAClDA,WADkD;AAAA,UACrCC,KADqC,yBACrCA,KADqC;;AAE1D,UAAID,WAAJ,EAAiB;AACf,eAAO,OAAOA,WAAP,KAAuB,UAAvB,GACHA,YAAY,EAAEH,oBAAF,EAAaD,gBAAb,EAAZ,CADG,GAEHI,WAFJ;AAGD;;AAED,UAAI,OAAOC,KAAP,KAAiB,QAArB,EAA+B;AAC7B,eAAOA,KAAP;AACD;;AAED,aAAOH,MAAMI,SAAb;AACD,K,QAEDC,W,GAAc,iBAAgD;AAAA,UAA7CP,OAA6C,SAA7CA,OAA6C;AAAA,UAApCC,SAAoC,SAApCA,SAAoC;AAAA,UAAzBC,KAAyB,SAAzBA,KAAyB;;AAAA,mCACrC,MAAKZ,iBAAL,CAAuBY,MAAMC,GAA7B,CADqC;AAAA,UACpDK,UADoD,0BACpDA,UADoD;;AAE5D,UAAIA,UAAJ,EAAgB;AACd,eAAO,OAAOA,UAAP,KAAsB,UAAtB,GACHA,WAAW,EAAEP,oBAAF,EAAaD,gBAAb,EAAX,CADG,GAEHQ,UAFJ;AAGD;AACD,aAAO,IAAP;AACD,K,QAEDC,Y,GAAe,iBAA2B;AAAA,UAAxBP,KAAwB,SAAxBA,KAAwB;;AACxC,YAAKT,KAAL,CAAWiB,UAAX,CAAsBC,QAAtB,CAA+B,aAA/B;AACA,YAAKlB,KAAL,CAAWiB,UAAX,CAAsBC,QAAtB,CAA+BT,MAAMI,SAArC;AACD,K;;;;;6BAEQ;AACP,UAAMM,mBAAmB,KAAKnB,KAAL,CAAWoB,gBAApC;AADO,UAECC,KAFD,GAEW,KAAKrB,KAAL,CAAWiB,UAFtB,CAECI,KAFD;;AAGP,aACE;AAAA;AAAA,UAAM,OAAO,CAACC,OAAOC,SAAR,EAAmB,KAAKvB,KAAL,CAAWwB,KAA9B,CAAb;AACE,sCAAC,gBAAD,2BACM,KAAKxB,KAAL,CAAWyB,cADjB;AAEE,sBAAY,KAAKzB,KAAL,CAAWiB,UAFzB;AAGE,iBAAOI,MAAMK,MAHf;AAIE,yBACEL,MAAMK,MAAN,CAAaL,MAAMM,KAAnB,KAA6BN,MAAMK,MAAN,CAAaL,MAAMM,KAAnB,EAA0BjB,GAL3D;AAOE,uBAAa,KAAKV,KAAL,CAAWK,WAP1B;AAQE,oBAAU,KAAKC,SARjB;AASE,sBAAY,KAAKQ,WATnB;AAUE,uBAAa,KAAKE,YAVpB;AAWE,kBAAQ,KAAKhB,KAAL,CAAWC;AAXrB;AADF,OADF;AAiBD;;;;;kBAGY,yCAA0BL,aAA1B,C;;;AAEf,IAAM0B,SAAS,wBAAWM,MAAX,CAAkB;AAC/BL,aAAW;AACTM,UAAM,CADG;AAETC,qBAAiB;AAFR;AADoB,CAAlB,CAAf","sourcesContent":["/* @flow */\n\nimport React, { PureComponent } from 'react';\nimport { StyleSheet, View } from 'react-native';\n\nimport withCachedChildNavigation from '../../withCachedChildNavigation';\n\nimport type {\n  NavigationScreenProp,\n  NavigationRoute,\n  NavigationAction,\n  NavigationRouter,\n  NavigationDrawerScreenOptions,\n  NavigationState,\n  NavigationStateRoute,\n  Style,\n} from '../../TypeDefinition';\n\nimport type { DrawerScene, DrawerItem } from './DrawerView';\n\ntype Navigation = NavigationScreenProp<NavigationStateRoute, NavigationAction>;\n\ntype Props = {\n  router: NavigationRouter<\n    NavigationState,\n    NavigationAction,\n    NavigationDrawerScreenOptions\n  >,\n  navigation: Navigation,\n  childNavigationProps: { [key: string]: Navigation },\n  contentComponent: ReactClass<*>,\n  contentOptions?: {},\n  screenProps?: {},\n  style?: Style,\n};\n\n/**\n * Component that renders the sidebar screen of the drawer.\n */\nclass DrawerSidebar extends PureComponent<void, Props, void> {\n  props: Props;\n\n  _getScreenOptions = (routeKey: string) => {\n    const DrawerScreen = this.props.router.getComponentForRouteName(\n      'DrawerClose'\n    );\n    return DrawerScreen.router.getScreenOptions(\n      this.props.childNavigationProps[routeKey],\n      this.props.screenProps\n    );\n  };\n\n  _getLabel = ({ focused, tintColor, route }: DrawerScene) => {\n    const { drawerLabel, title } = this._getScreenOptions(route.key);\n    if (drawerLabel) {\n      return typeof drawerLabel === 'function'\n        ? drawerLabel({ tintColor, focused })\n        : drawerLabel;\n    }\n\n    if (typeof title === 'string') {\n      return title;\n    }\n\n    return route.routeName;\n  };\n\n  _renderIcon = ({ focused, tintColor, route }: DrawerScene) => {\n    const { drawerIcon } = this._getScreenOptions(route.key);\n    if (drawerIcon) {\n      return typeof drawerIcon === 'function'\n        ? drawerIcon({ tintColor, focused })\n        : drawerIcon;\n    }\n    return null;\n  };\n\n  _onItemPress = ({ route }: DrawerItem) => {\n    this.props.navigation.navigate('DrawerClose');\n    this.props.navigation.navigate(route.routeName);\n  };\n\n  render() {\n    const ContentComponent = this.props.contentComponent;\n    const { state } = this.props.navigation;\n    return (\n      <View style={[styles.container, this.props.style]}>\n        <ContentComponent\n          {...this.props.contentOptions}\n          navigation={this.props.navigation}\n          items={state.routes}\n          activeItemKey={\n            state.routes[state.index] && state.routes[state.index].key\n          }\n          screenProps={this.props.screenProps}\n          getLabel={this._getLabel}\n          renderIcon={this._renderIcon}\n          onItemPress={this._onItemPress}\n          router={this.props.router}\n        />\n      </View>\n    );\n  }\n}\n\nexport default withCachedChildNavigation(DrawerSidebar);\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#fff',\n  },\n});\n"]}]