["0a444d17bf047dc0b253cc6a7191ea644a3de1ce","324285cc81ea77e8b013a5ceeda06469a6fb1a0b",["react","./View","../drivers/DriverShape"],[135,225,264],{"version":3,"sources":["/home/ziddi/Desktop/venders/node_modules/@shoutem/animation/src/animations/FadeIn.js"],"names":["FadeIn","props","driver","children","inputRange","style","opacity","propTypes","isRequired","PropTypes","node","array"],"mappings":";;;;;;;AAAA;;;;AACA;;AACA;;IA0BaA,M,WAAAA,M;;;;;;;;;;6BAiBF;AAAA,mBACkD,KAAKC,KADvD;AAAA,UACCC,MADD,UACCA,MADD;AAAA,UACSC,QADT,UACSA,QADT;AAAA,qCACmBC,UADnB;AAAA,UACmBA,UADnB,qCACgC,CAAC,CAAD,EAAI,CAAJ,CADhC;AAAA,UACwCC,KADxC,UACwCA,KADxC;;;AAGP,aACE;AAAA;AAAA;AACE,kBAAQH,MADV;AAEE,yBAAc,QAFhB;AAGE,4BAAkB,EAAEE,sBAAF,EAHpB;AAIE,wCAASE,SAAS,CAAlB,IAAwBD,KAAxB;AAJF;AAMGF;AANH,OADF;AAUD;;;4BA7BMI,S,GAAY;AAIjBL,UAAQ,yBAAYM,UAJH;;AAQjBL,YAAU,gBAAMM,SAAN,CAAgBC,IART;;AAajBN,cAAY,gBAAMK,SAAN,CAAgBE;AAbX,C","sourcesContent":["import React, { Component } from 'react';\nimport { View } from './View';\nimport { DriverShape } from '../drivers/DriverShape';\n/*\n * FadeIn Component adds fade in effect to its children components.\n * Connect it to an animation driver and pass the input range to animate it.\n * e.g.:\n * ...\n * const driver = new ScrollDriver();\n *\n * return (\n *  <ScrollView\n *    {...driver.scrollViewProps}\n *  >\n *    <FadeIn\n *      driver={driver}\n *      inputRange={[100,150]}\n *    >\n *      <Image />\n *    </FadeIn>\n *  </ScrollView>\n * );\n *\n * ...\n * Above code will create scroll dependent fade in animation over Image component\n * from scroll position 100, to scroll position 150 where image is fully transparent at\n * scroll position 100, and opaque at scroll position 150\n */\nexport class FadeIn extends Component {\n  static propTypes = {\n    /**\n     * An instance of animation driver, usually ScrollDriver\n     */\n    driver: DriverShape.isRequired,\n    /**\n     * Components to which an effect will be applied\n     */\n    children: React.PropTypes.node,\n    /**\n     * pair of [start, end] values from animation driver, how\n     * children would fade in\n     */\n    inputRange: React.PropTypes.array,\n  }\n\n  render() {\n    const { driver, children, inputRange = [0, 1], style } = this.props;\n\n    return (\n      <View\n        driver={driver}\n        animationName=\"fadeIn\"\n        animationOptions={{ inputRange }}\n        style={{ opacity: 0, ...style }}\n      >\n        {children}\n      </View>\n    );\n  }\n}\n"]}]