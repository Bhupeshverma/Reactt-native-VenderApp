Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = undefined;

var _react = require('react');

var _react2 = babelHelpers.interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = babelHelpers.interopRequireDefault(_propTypes);

var _reactNative = require('react-native');

var _colors = require('./colors');

var _colors2 = babelHelpers.interopRequireDefault(_colors);

var _Dimensions$get = _reactNative.Dimensions.get('window'),
    height = _Dimensions$get.height,
    width = _Dimensions$get.width;

var ActionButton = function (_Component) {
  babelHelpers.inherits(ActionButton, _Component);

  function ActionButton() {
    babelHelpers.classCallCheck(this, ActionButton);
    return babelHelpers.possibleConstructorReturn(this, (ActionButton.__proto__ || Object.getPrototypeOf(ActionButton)).apply(this, arguments));
  }

  babelHelpers.createClass(ActionButton, [{
    key: 'render',
    value: function render() {
      return _react2.default.createElement(
        _reactNative.TouchableHighlight,
        {
          style: styles.actionContainer,
          underlayColor: _colors2.default.androidPressedUnderlay,
          onPress: this.props.onPress },
        _react2.default.createElement(
          _reactNative.Text,
          {
            style: [styles.actionText, { color: this.props.colorAccent }] },
          this.props.label
        )
      );
    }
  }]);
  return ActionButton;
}(_react.Component);

var MaterialDialog = function (_Component2) {
  babelHelpers.inherits(MaterialDialog, _Component2);

  function MaterialDialog() {
    babelHelpers.classCallCheck(this, MaterialDialog);
    return babelHelpers.possibleConstructorReturn(this, (MaterialDialog.__proto__ || Object.getPrototypeOf(MaterialDialog)).apply(this, arguments));
  }

  babelHelpers.createClass(MaterialDialog, [{
    key: 'render',
    value: function render() {
      return _react2.default.createElement(
        _reactNative.Modal,
        {
          animationType: 'fade',
          transparent: true,
          hardwareAccelerated: true,
          visible: this.props.visible,
          onRequestClose: this.props.onCancel },
        _react2.default.createElement(
          _reactNative.TouchableWithoutFeedback,
          { onPress: this.props.onCancel },
          _react2.default.createElement(
            _reactNative.View,
            { style: styles.backgroundOverlay },
            _react2.default.createElement(
              _reactNative.KeyboardAvoidingView,
              { behavior: _reactNative.Platform.OS === 'ios' ? 'padding' : null },
              _react2.default.createElement(
                _reactNative.View,
                { style: [styles.modalContainer, { backgroundColor: this.props.backgroundColor }] },
                _react2.default.createElement(
                  _reactNative.TouchableWithoutFeedback,
                  null,
                  _react2.default.createElement(
                    _reactNative.View,
                    null,
                    this.props.title != null ? _react2.default.createElement(
                      _reactNative.View,
                      {
                        style: this.props.scrolled ? styles.titleContainerScrolled : styles.titleContainer },
                      _react2.default.createElement(
                        _reactNative.Text,
                        {
                          style: [styles.titleText, { color: this.props.titleColor }] },
                        this.props.title
                      )
                    ) : null,
                    _react2.default.createElement(
                      _reactNative.View,
                      {
                        style: this.props.scrolled ? styles.contentContainerScrolled : styles.contentContainer },
                      this.props.children
                    ),
                    this.props.onOk != null && this.props.onCancel != null ? _react2.default.createElement(
                      _reactNative.View,
                      {
                        style: this.props.scrolled ? styles.actionsContainerScrolled : styles.actionsContainer },
                      _react2.default.createElement(ActionButton, {
                        colorAccent: this.props.colorAccent,
                        onPress: this.props.onCancel,
                        label: this.props.cancelLabel }),
                      _react2.default.createElement(ActionButton, {
                        colorAccent: this.props.colorAccent,
                        onPress: this.props.onOk,
                        label: this.props.okLabel })
                    ) : null
                  )
                )
              )
            )
          )
        )
      );
    }
  }]);
  return MaterialDialog;
}(_react.Component);

exports.default = MaterialDialog;


var styles = _reactNative.StyleSheet.create({
  backgroundOverlay: {
    flex: 1,
    flexDirection: 'row',
    justifyContent: 'center',
    alignItems: 'center',
    backgroundColor: _colors2.default.backgroundOverlay
  },
  modalContainer: {
    marginHorizontal: 16,
    marginVertical: 106,
    paddingTop: 24,
    minWidth: 280,
    borderRadius: 2,
    elevation: 24,
    overflow: 'hidden'
  },
  titleContainer: {
    paddingHorizontal: 24,
    paddingBottom: 20,
    flexDirection: 'row',
    justifyContent: 'flex-start',
    alignItems: 'center'
  },
  titleContainerScrolled: {
    paddingHorizontal: 24,
    paddingBottom: 20,
    flexDirection: 'row',
    justifyContent: 'flex-start',
    alignItems: 'center',
    borderBottomWidth: _reactNative.StyleSheet.hairlineWidth,
    borderColor: _colors2.default.androidBorderColor
  },
  titleText: babelHelpers.extends({
    fontSize: 20
  }, _reactNative.Platform.select({
    android: {
      fontFamily: 'sans-serif-medium'
    },
    ios: {
      fontWeight: '600'
    }
  })),
  contentContainer: {
    flex: -1,
    paddingHorizontal: 24,
    paddingBottom: 24
  },
  contentContainerScrolled: {
    flex: -1,
    maxHeight: height - 264,
    paddingHorizontal: 24
  },
  actionsContainer: {
    height: 52,
    flexDirection: 'row',
    justifyContent: 'flex-end',
    alignItems: 'center',
    paddingLeft: 8
  },
  actionsContainerScrolled: {
    height: 52,
    flexDirection: 'row',
    justifyContent: 'flex-end',
    alignItems: 'center',
    paddingLeft: 8,
    borderTopWidth: _reactNative.StyleSheet.hairlineWidth,
    borderColor: _colors2.default.androidBorderColor
  },
  actionContainer: {
    marginRight: 8,
    paddingHorizontal: 8,
    paddingVertical: 8,
    minWidth: 64,
    flexDirection: 'row',
    justifyContent: 'center',
    alignItems: 'center'
  },
  actionText: babelHelpers.extends({
    fontSize: 14
  }, _reactNative.Platform.select({
    android: {
      fontFamily: 'sans-serif-medium'
    },
    ios: {
      fontWeight: '600'
    }
  }))
});

MaterialDialog.propTypes = {
  visible: _propTypes2.default.bool.isRequired,
  children: _propTypes2.default.element.isRequired,
  onCancel: _propTypes2.default.func.isRequired,
  onOk: _propTypes2.default.func,
  cancelLabel: _propTypes2.default.string,
  okLabel: _propTypes2.default.string,
  title: _propTypes2.default.string,
  titleColor: _propTypes2.default.string,
  colorAccent: _propTypes2.default.string,
  scrolled: _propTypes2.default.bool
};

MaterialDialog.defaultProps = {
  okLabel: 'OK',
  cancelLabel: 'CANCEL',
  titleColor: _colors2.default.androidPrimaryTextColor,
  backgroundColor: _colors2.default.background,
  colorAccent: _colors2.default.androidColorAccent,
  scrolled: false
};

ActionButton.propTypes = {
  colorAccent: _propTypes2.default.string.isRequired,
  label: _propTypes2.default.string.isRequired,
  onPress: _propTypes2.default.func.isRequired
};