["c3216524ed7988955bc66a6243f91ceb99348fee","bf9a30a88575baf0d4e2b551607afa12ab1ece83",["react","react-native","@shoutem/theme","lodash","../../components/Image","../../components/Lightbox"],[136,233,272,314,408,460],{"version":3,"sources":["/home/ziddi/Desktop/venders/node_modules/@shoutem/ui/html/components/Image.js"],"names":["HtmlImage","props","state","width","height","imageSizeLoaded","bind","getSize","source","uri","imageSizeLoadFailed","setState","console","log","children","style","allowUpscale","warn","imageWidth","min","imageHeight","lightbox","isEmpty","styleName","propTypes","PropTypes","bool","defaultProps"],"mappings":";;;;;;;AAAA;;;;AACA;;AACA;;AACA;;;;AAEA;;AACA;;IAQqBA,S;;;AAYnB,qBAAYC,KAAZ,EAAmB;AAAA;;AAAA,kIACXA,KADW;;AAGjB,UAAKC,KAAL,GAAa;AACXC,aAAO,IADI;AAEXC,cAAQ;AAFG,KAAb;;AAKA,UAAKC,eAAL,GAAuB,MAAKA,eAAL,CAAqBC,IAArB,OAAvB;AACA,uBAAQC,OAAR,CAAgBN,MAAMO,MAAN,CAAaC,GAA7B,EAAkC,MAAKJ,eAAvC,EAAwD,MAAKK,mBAA7D;AATiB;AAUlB;;;;oCAEeP,K,EAAOC,M,EAAQ;AAC7B,WAAKO,QAAL,CAAc,EAAER,YAAF,EAASC,cAAT,EAAd;AACD;;;0CAEqB;AAEpBQ,cAAQC,GAAR,CAAY,uCAAZ,EAAqD,KAAKZ,KAAL,CAAWO,MAAX,CAAkBC,GAAvE;AACD;;;6BAEQ;AAAA,mBACmC,KAAKR,KADxC;AAAA,UACCa,QADD,UACCA,QADD;AAAA,UACWC,KADX,UACWA,KADX;AAAA,UACkBC,YADlB,UACkBA,YADlB;AAAA,mBAEmB,KAAKd,KAFxB;AAAA,UAECC,KAFD,UAECA,KAFD;AAAA,UAEQC,MAFR,UAEQA,MAFR;;;AAIP,UAAI,CAACW,KAAL,EAAY;AACVH,gBAAQK,IAAR,CAAa,4DAAb;AACA,eAAO,IAAP;AACD;;AAGD,UAAI,CAACb,MAAD,IAAW,CAACD,KAAhB,EAAuB;AACrB,eAAO,IAAP;AACD;;AAKD,UAAMe,aAAaF,gBAAgBD,MAAMZ,KAAtB,GAA8BY,MAAMZ,KAApC,GAA4C,iBAAEgB,GAAF,CAAM,CAAChB,KAAD,EAAQY,MAAMZ,KAAd,CAAN,CAA/D;;AAEA,UAAMiB,cAAcL,MAAMX,MAAN,IAAiBc,aAAaf,KAAd,GAAuBC,MAA3D;AAnBO,oBAoBsB,KAAKH,KApB3B;AAAA,UAoBCO,MApBD,WAoBCA,MApBD;AAAA,UAoBSa,QApBT,WAoBSA,QApBT;;;AAsBP,UAAI,iBAAEC,OAAF,CAAUR,QAAV,KAAuBO,QAA3B,EAAqC;AAGnC,eACE;AAAA;AAAA;AACE,yBAAa,EAAEE,WAAW,iBAAb,EADf;AAEE,uBAAU;AAFZ;AAIE,+EACM,KAAKtB,KADX;AAEE,2CAAUE,OAAOe,UAAjB,EAA6Bd,QAAQgB,WAArC,IAAqDZ,MAArD;AAFF;AAJF,SADF;AAWD;;AAGD,aACE;AAAA;AAAA,iCACM,KAAKP,KADX;AAEE,yCAAUE,OAAOe,UAAjB,EAA6Bd,QAAQgB,WAArC,IAAqDZ,MAArD;AAFF;AAIGM;AAJH,OADF;AAQD;;;4BA/EMU,S,4BACF,mBAAQA,S;AACXH,YAAU,gBAAMI,SAAN,CAAgBC,I;AAC1BV,gBAAc,gBAAMS,SAAN,CAAgBC;WAGzBC,Y,GAAe;AACpBN,YAAU,IADU;AAEpBL,gBAAc;AAFM,C;kBAPHhB,S","sourcesContent":["import React, { Component } from 'react';\nimport { Image as RNImage } from 'react-native';\nimport { connectStyle } from '@shoutem/theme';\nimport _ from 'lodash';\n\nimport { Image } from '../../components/Image';\nimport { Lightbox } from '../../components/Lightbox';\n\n/**\n * Remote images must have width and height to display correctly.\n * To get the best layout, correct image dimensions are needed.\n * Image is not going to be shown before dimensions are determined,\n * this component will determine the Image dimensions before rendering an image.\n */\nexport default class HtmlImage extends Component {\n  static propTypes = {\n    ...RNImage.propTypes,\n    lightbox: React.PropTypes.bool,\n    allowUpscale: React.PropTypes.bool,\n  };\n\n  static defaultProps = {\n    lightbox: true,\n    allowUpscale: false,\n  };\n\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      width: null,\n      height: null,\n    };\n\n    this.imageSizeLoaded = this.imageSizeLoaded.bind(this);\n    RNImage.getSize(props.source.uri, this.imageSizeLoaded, this.imageSizeLoadFailed);\n  }\n\n  imageSizeLoaded(width, height) {\n    this.setState({ width, height });\n  }\n\n  imageSizeLoadFailed() {\n    // TODO - handle properly\n    console.log('Could not load image size for image: ', this.props.source.uri);\n  }\n\n  render() {\n    const { children, style, allowUpscale } = this.props;\n    const { width, height } = this.state;\n\n    if (!style) {\n      console.warn('Invalid Html image style. Html image requires style.width.');\n      return null;\n    }\n\n    // Image can not be rendered without width and height.\n    if (!height || !width) {\n      return null;\n    }\n\n    // Do not enlarge image.\n    // If image is smaller then image style width,\n    // width that fits the screen best, use actual image width.\n    const imageWidth = allowUpscale && style.width ? style.width : _.min([width, style.width]);\n\n    const imageHeight = style.height || (imageWidth / width) * height;\n    const { source, lightbox } = this.props;\n\n    if (_.isEmpty(children) && lightbox) {\n      // Showing image as part of the content, can be opened (zoomed).\n      // Not background image (if it has any children)\n      return (\n        <Lightbox\n          activeProps={{ styleName: 'preview wrapper' }}\n          styleName=\"wrapper\"\n        >\n          <Image\n            {...this.props}\n            source={{ width: imageWidth, height: imageHeight, ...source }}\n          />\n        </Lightbox>\n      );\n    }\n\n    // Showing image as background, can't be opened (zoomed).\n    return (\n      <Image\n        {...this.props}\n        source={{ width: imageWidth, height: imageHeight, ...source }}\n      >\n        {children}\n      </Image>\n    );\n  }\n}\n"]}]