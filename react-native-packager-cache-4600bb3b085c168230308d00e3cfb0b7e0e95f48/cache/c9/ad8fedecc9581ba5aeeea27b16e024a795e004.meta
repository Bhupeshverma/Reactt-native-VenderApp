["1f2bc95f2ab03e01488dd0f9ad54946469122ec1","e6ff5b329b19928c713e80735dfa431030aa20f9",["react","prop-types","react-native","./config/ViewPropTypes","./Layout"],[151,246,356,403,528],{"version":3,"sources":["/home/ziddi/Desktop/Bhupesh/venders/node_modules/react-native-tab-navigator/Tab.js"],"names":["Tab","props","context","_handlePress","bind","title","badge","icon","Children","count","children","only","allowFontScaling","styles","titleStyle","cloneElement","style","tabStyle","container","untitledContainer","hidesTabTouch","OS","Version","testID","Ripple","undefined","event","onPress","Component","propTypes","string","element","func","bool","create","position","top","right","flex","flexDirection","justifyContent","alignItems","paddingBottom","color","fontSize","textAlign","alignSelf","marginTop","marginBottom","pixel"],"mappings":"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","sourcesContent":["'use strict';\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport {\n  StyleSheet,\n  Text,\n  TouchableOpacity,\n  TouchableNativeFeedback,\n  Platform,\n  View,\n} from 'react-native';\n\nimport ViewPropTypes from './config/ViewPropTypes';\nimport Layout from './Layout';\n\nexport default class Tab extends React.Component {\n  static propTypes = {\n    testID : PropTypes.string,\n    title: PropTypes.string,\n    titleStyle: Text.propTypes.style,\n    badge: PropTypes.element,\n    onPress: PropTypes.func,\n    hidesTabTouch: PropTypes.bool,\n    allowFontScaling: PropTypes.bool,\n    style: ViewPropTypes.style,\n  };\n\n  constructor(props, context) {\n    super(props, context);\n\n    this._handlePress = this._handlePress.bind(this);\n  }\n\n  render() {\n    let { title, badge } = this.props;\n    let icon = null;\n    if (React.Children.count(this.props.children) > 0) {\n      icon = React.Children.only(this.props.children);\n    }\n\n    if (title) {\n      title =\n        <Text\n          numberOfLines={1}\n          allowFontScaling={!!this.props.allowFontScaling}\n          style={[styles.title, this.props.titleStyle]}>\n          {title}\n        </Text>;\n    }\n\n    if (badge) {\n      badge = React.cloneElement(badge, {\n        style: [styles.badge, badge.props.style],\n      });\n    }\n\n    let tabStyle = [\n      styles.container,\n      title ? null : styles.untitledContainer,\n      this.props.style,\n    ];\n    if (\n      !this.props.hidesTabTouch &&\n      Platform.OS === 'android' &&\n      Platform.Version >= 21\n    ) {\n      return (\n        <TouchableNativeFeedback\n          testID={this.props.testID}\n          background={TouchableNativeFeedback.Ripple(undefined, true)}\n          onPress={this._handlePress}>\n          <View style={tabStyle}>\n            <View>\n              {icon}\n              {badge}\n            </View>\n            {title}\n          </View>\n        </TouchableNativeFeedback>\n      );\n    }\n    return (\n      <TouchableOpacity\n        testID={this.props.testID}\n        activeOpacity={this.props.hidesTabTouch ? 1.0 : 0.8}\n        onPress={this._handlePress}\n        style={tabStyle}>\n        <View>\n          {icon}\n          {badge}\n        </View>\n        {title}\n      </TouchableOpacity>\n    );\n  }\n\n  _handlePress(event) {\n    if (this.props.onPress) {\n      this.props.onPress(event);\n    }\n  }\n}\n\nlet styles = StyleSheet.create({\n  badge: {\n    position: 'absolute',\n    top: -6,\n    right: -10,\n  },\n  container: {\n    flex: 1,\n    flexDirection: 'column',\n    justifyContent: 'flex-end',\n    alignItems: 'center',\n  },\n  untitledContainer: {\n    paddingBottom: 13,\n  },\n  title: {\n    color: '#929292',\n    fontSize: 10,\n    textAlign: 'center',\n    alignSelf: 'stretch',\n    marginTop: 4,\n    marginBottom: 1 + Layout.pixel,\n  },\n});\n"]}]