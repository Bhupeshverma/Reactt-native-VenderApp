Object.defineProperty(exports,"__esModule",{value:true});exports.customizeRenderElement=exports.renderChildren=exports.renderChildElements=exports.mapElementProps=exports.combineMappers=exports.hasBlockElement=exports.isBlockElement=exports.ElementPropTypes=undefined;var _class,_temp;var _react=require("react");var _react2=babelHelpers.interopRequireDefault(_react);
var _reactNative=require("react-native");
var _lodash=require("lodash");var _lodash2=babelHelpers.interopRequireDefault(_lodash);

var _ui=require("@shoutem/ui");
var _theme=require("@shoutem/theme");

var _HtmlParser=require("./services/HtmlParser");
var _ElementRegistry=require("./services/ElementRegistry");







var defaultElementSettings={
display:_ElementRegistry.Display.BLOCK};var


Html=(_temp=_class=function(_Component){babelHelpers.inherits(Html,_Component);babelHelpers.createClass(Html,null,[{key:"registerElement",






/**
   * Create Element class for given element tag and add it to the ElementClassMap.
   * Use the settings to additionally describe a Element class.
   * @param elementTag {string} HTML element tag
   * @param component {Component} React Native Component
   * @param settings {Object} Default settings override
   *   Most times a developer will only want to override one setting,
   *   that's why settings are merged with defaultElementSettings.
   * @param settings.display {Display || Function}
   *   Describe component display.
   *   Can be a function to dynamically resolve display.
   */value:function registerElement(
elementTag,component){var settings=arguments.length>2&&arguments[2]!==undefined?arguments[2]:{};
var elementSettings=_lodash2.default.assign({},defaultElementSettings,settings);

(0,_ElementRegistry.registerElement)(elementTag,babelHelpers.extends({},elementSettings,{component:component}));
}},{key:"getElement",value:function getElement(

tag){
// TODO - standardize ElementRegistry getElement
return(0,_ElementRegistry.getElement)({tag:tag});
}}]);

function Html(props,context){babelHelpers.classCallCheck(this,Html);var _this=babelHelpers.possibleConstructorReturn(this,(Html.__proto__||Object.getPrototypeOf(Html)).call(this,
props,context));
_this.renderElement=_this.renderElement.bind(_this);
_this.state={
htmlTree:null};return _this;

}babelHelpers.createClass(Html,[{key:"componentDidMount",value:function componentDidMount()

{var _this2=this;
_reactNative.InteractionManager.runAfterInteractions(function(){
_this2.updateHtmlTree();
});
}},{key:"updateHtmlTree",value:function updateHtmlTree()

{var
body=this.props.body;

if(body){
var htmlTree=(0,_HtmlParser.parseHtml)(body);
this.setState({htmlTree:htmlTree});
}
}

/**
   * Get element style from the Html instance style.
   * @param element {Element}
   * @returns {Object|undefined}
   */},{key:"getElementStyle",value:function getElementStyle(_ref)
{var tag=_ref.tag;var
style=this.props.style;
return _lodash2.default.get(style,tag,{});
}

/**
   * Render HTML element as React Native component.
   * This method is passed to both custom renderElement and
   * element corresponding component. It is also used to render children
   * and should be passed down the tree so that children can be rendered.
   * If Html has style named by element tag it will be passed to rendered element.
   * @param element {Element} Parsed HTML element
   * @returns {Component} The element rendered as a React Native component
   */},{key:"renderElement",value:function renderElement(
element){
var elementStyle=this.getElementStyle(element);
var renderedElement=void 0;

if(this.props.renderElement){
renderedElement=this.props.renderElement(element,elementStyle,this.renderElement);
}

// Custom renderElement for the specific Html implementation
// has advantage over the "global". If custom renderElement rendered
// a component that component will be used, otherwise fallback to "global".
// Render element must be undefined to fallback to default,
// null is a valid RN type to render.
if(_lodash2.default.isUndefined(renderedElement)){
var ElementComponent=(0,_ElementRegistry.getElementProperty)(element,'component');

if(!ElementComponent){
console.log('Can not find component for element: ',element.tag);
return null;
}

renderedElement=
_react2.default.createElement(ElementComponent,{
element:element,
style:elementStyle,
renderElement:this.renderElement});


}

return renderedElement;
}},{key:"render",value:function render()

{var _props=
this.props,style=_props.style,body=_props.body;var
htmlTree=this.state.htmlTree;

if(!body){
return null;
}

if(!htmlTree){
// Either still processing the Html or
// waiting for layout animations to complete
return(
_react2.default.createElement(_ui.View,{styleName:"md-gutter"},
_react2.default.createElement(_ui.Spinner,{styleName:"sm-gutter"})));


}

var htmlRootElement=htmlTree.getRootNode();

return(
_react2.default.createElement(_ui.View,{style:style.container},
this.renderElement(htmlRootElement)));


}}]);return Html;}(_react.Component),_class.propTypes={body:_react2.default.PropTypes.string.isRequired,renderElement:_react2.default.PropTypes.func,style:_react2.default.PropTypes.object},_temp);


var ElementPropTypes=exports.ElementPropTypes={
childElements:_react2.default.PropTypes.array,
renderElement:_react2.default.PropTypes.func,
inlineStyle:_react2.default.PropTypes.string,
children:_react2.default.PropTypes.oneOfType([
_react2.default.PropTypes.arrayOf(_react2.default.PropTypes.node),
_react2.default.PropTypes.node])};exports.default=



(0,_theme.connectStyle)('shoutem.ui.Html')(Html);


/* Helpers */

/**
 * @param element {Element}
 * @returns {boolean}
 */
var isBlockElement=exports.isBlockElement=function isBlockElement(element){
// eslint-disable-next-line no-use-before-define
return(0,_ElementRegistry.getElementDisplay)(element,'display')===_ElementRegistry.Display.BLOCK;
};

/**
 * @param elements {Array}
 * @returns {boolean}
 */
var hasBlockElement=exports.hasBlockElement=function hasBlockElement(elements){
return _lodash2.default.some(elements,isBlockElement);
};

/**
 * Use to create an enhanced component that mapS
 * element (description) to the wrapped component props.
 * Element is default property that Html renderElement provides to the components.
 * @param mapFunctions {Array}
 *  List of functions that map element description to the component props.
 * @returns {function({element, renderElement}): Component}
 *  Returns HOC that will map component props with provided map functions.
 */
var combineMappers=exports.combineMappers=function combineMappers(){for(var _len=arguments.length,mapFunctions=Array(_len),_key=0;_key<_len;_key++){mapFunctions[_key]=arguments[_key];}
return function(WrappedComponent){return function(props){
// eslint-disable-next-line prefer-arrow-callback
var customizedProps=_lodash2.default.reduce(mapFunctions,function(result,mapFunction){
return babelHelpers.extends({},
result,
mapFunction(props));

},babelHelpers.extends({},props));

return _react2.default.createElement(WrappedComponent,customizedProps);
};};
};

/**
 * Destruct an element description to the component props format.
 * @param props {{ element, renderElement }}
 * @returns {Object}
 */
var mapElementProps=exports.mapElementProps=function mapElementProps(_ref2){var element=_ref2.element,style=_ref2.style;var
childElements=element.childElements,attributes=element.attributes,tag=element.tag;
return babelHelpers.extends({},
attributes,{
style:style,
childElements:childElements,
htmlInlineStyle:attributes.style,
elementTag:tag});

};

/**
 * @param childElements {Array}
 * @param renderElement {Function}
 * @returns {Children}
 */
var renderChildElements=exports.renderChildElements=function renderChildElements(childElements,renderElement){
return _react2.default.Children.toArray(childElements.map(renderElement));
};

/**
 * Render and map elements to the children prop.
 * @param element {Element}
 * @param renderElement {Function}
 * @returns {Object} Props with children prop
 */
var renderChildren=exports.renderChildren=function renderChildren(_ref3){var element=_ref3.element,renderElement=_ref3.renderElement;var
childElements=element.childElements;
return{
children:renderChildElements(childElements,renderElement)};

};

/**
 * Extend the original renderElement with a customizer.
 * If the customizer doesn't render a element, renderElement will be used.
 * It can be used to customize renderElement from certain element node.
 * @param customizer {Function}
 * @param renderElement {Function}
 * @returns {Component}
 */
var customizeRenderElement=exports.customizeRenderElement=function customizeRenderElement(customizer,renderElement){
return function(element){
var renderedElement=customizer(element);
if(renderedElement){
return renderedElement;
}

return renderElement(element);
};
};