["09e514147df0b10f03b7565b198519f446906342","35d57c223d5b508c5a658e00e7de5596849639d7",["react-native","./CardStackStyleInterpolator"],[93,153],{"version":3,"sources":["/home/ziddi/Desktop/Bhupesh/venders/node_modules/react-navigation/src/views/TransitionConfigs.js"],"names":["DefaultTransitionSpec","duration","easing","inOut","ease","timing","IOSTransitionSpec","bezier","SlideFromRightIOS","transitionSpec","screenInterpolator","forHorizontal","ModalSlideFromBottomIOS","forVertical","FadeInFromBottomAndroid","out","poly","forFadeFromBottomAndroid","FadeOutToBottomAndroid","in","defaultTransitionConfig","transitionProps","prevTransitionProps","isModal","OS","index","getTransitionConfig","transitionConfigurer","defaultConfig"],"mappings":";;;;AAEA;;AAQA;;;;AAGA,IAAMA,wBAAyB;AAC7BC,YAAU,GADmB;AAE7BC,UAAQ,oBAAOC,KAAP,CAAa,oBAAOC,IAApB,CAFqB;AAG7BC,UAAQ,sBAASA;AAHY,CAA/B;;AAMA,IAAMC,oBAAqB;AACzBL,YAAU,GADe;AAEzBC,UAAQ,oBAAOK,MAAP,CAAc,MAAd,EAAsB,IAAtB,EAA4B,OAA5B,EAAqC,IAArC,CAFiB;AAGzBF,UAAQ,sBAASA;AAHQ,CAA3B;;AAOA,IAAMG,oBAAqB;AACzBC,kBAAgBH,iBADS;AAEzBI,sBAAoB,qCAA2BC;AAFtB,CAA3B;;AAMA,IAAMC,0BAA2B;AAC/BH,kBAAgBH,iBADe;AAE/BI,sBAAoB,qCAA2BG;AAFhB,CAAjC;;AAMA,IAAMC,0BAA2B;AAE/BL,kBAAgB;AACdR,cAAU,GADI;AAEdC,YAAQ,oBAAOa,GAAP,CAAW,oBAAOC,IAAP,CAAY,CAAZ,CAAX,CAFM;AAGdX,YAAQ,sBAASA;AAHH,GAFe;AAO/BK,sBAAoB,qCAA2BO;AAPhB,CAAjC;;AAWA,IAAMC,yBAA0B;AAE9BT,kBAAgB;AACdR,cAAU,GADI;AAEdC,YAAQ,oBAAOiB,EAAP,CAAU,oBAAOH,IAAP,CAAY,CAAZ,CAAV,CAFM;AAGdX,YAAQ,sBAASA;AAHH,GAFc;AAO9BK,sBAAoB,qCAA2BO;AAPjB,CAAhC;;AAUA,SAASG,uBAAT,CAEEC,eAFF,EAIEC,mBAJF,EAMEC,OANF,EAOoB;AAClB,MAAI,sBAASC,EAAT,KAAgB,SAApB,EAA+B;AAG7B,QACEF,uBACAD,gBAAgBI,KAAhB,GAAwBH,oBAAoBG,KAF9C,EAGE;AAEA,aAAOP,sBAAP;AACD;AACD,WAAOJ,uBAAP;AACD;;AAED,MAAIS,OAAJ,EAAa;AACX,WAAOX,uBAAP;AACD;AACD,SAAOJ,iBAAP;AACD;;AAED,SAASkB,mBAAT,CACEC,oBADF,EAGEN,eAHF,EAKEC,mBALF,EAMEC,OANF,EAOoB;AAClB,MAAMK,gBAAgBR,wBACpBC,eADoB,EAEpBC,mBAFoB,EAGpBC,OAHoB,CAAtB;AAKA,MAAII,oBAAJ,EAA0B;AACxB,oCACKC,aADL,EAEKD,sBAFL;AAID;AACD,SAAOC,aAAP;AACD;;kBAEc;AACb5B,8CADa;AAEboB,kDAFa;AAGbM;AAHa,C","sourcesContent":["/* @flow */\n\nimport { Animated, Easing, Platform } from 'react-native';\n\nimport type {\n  NavigationTransitionProps,\n  NavigationTransitionSpec,\n  TransitionConfig,\n} from '../TypeDefinition';\n\nimport CardStackStyleInterpolator from './CardStackStyleInterpolator';\n\n// Used for all animations unless overriden\nconst DefaultTransitionSpec = ({\n  duration: 250,\n  easing: Easing.inOut(Easing.ease),\n  timing: Animated.timing,\n}: NavigationTransitionSpec);\n\nconst IOSTransitionSpec = ({\n  duration: 500,\n  easing: Easing.bezier(0.2833, 0.99, 0.31833, 0.99),\n  timing: Animated.timing,\n}: NavigationTransitionSpec);\n\n// Standard iOS navigation transition\nconst SlideFromRightIOS = ({\n  transitionSpec: IOSTransitionSpec,\n  screenInterpolator: CardStackStyleInterpolator.forHorizontal,\n}: TransitionConfig);\n\n// Standard iOS navigation transition for modals\nconst ModalSlideFromBottomIOS = ({\n  transitionSpec: IOSTransitionSpec,\n  screenInterpolator: CardStackStyleInterpolator.forVertical,\n}: TransitionConfig);\n\n// Standard Android navigation transition when opening an Activity\nconst FadeInFromBottomAndroid = ({\n  // See http://androidxref.com/7.1.1_r6/xref/frameworks/base/core/res/res/anim/activity_open_enter.xml\n  transitionSpec: {\n    duration: 350,\n    easing: Easing.out(Easing.poly(5)), // decelerate\n    timing: Animated.timing,\n  },\n  screenInterpolator: CardStackStyleInterpolator.forFadeFromBottomAndroid,\n}: TransitionConfig);\n\n// Standard Android navigation transition when closing an Activity\nconst FadeOutToBottomAndroid = ({\n  // See http://androidxref.com/7.1.1_r6/xref/frameworks/base/core/res/res/anim/activity_close_exit.xml\n  transitionSpec: {\n    duration: 230,\n    easing: Easing.in(Easing.poly(4)), // accelerate\n    timing: Animated.timing,\n  },\n  screenInterpolator: CardStackStyleInterpolator.forFadeFromBottomAndroid,\n}: TransitionConfig);\n\nfunction defaultTransitionConfig(\n  // props for the new screen\n  transitionProps: NavigationTransitionProps,\n  // props for the old screen\n  prevTransitionProps: NavigationTransitionProps,\n  // whether we're animating in/out a modal screen\n  isModal: boolean\n): TransitionConfig {\n  if (Platform.OS === 'android') {\n    // Use the default Android animation no matter if the screen is a modal.\n    // Android doesn't have full-screen modals like iOS does, it has dialogs.\n    if (\n      prevTransitionProps &&\n      transitionProps.index < prevTransitionProps.index\n    ) {\n      // Navigating back to the previous screen\n      return FadeOutToBottomAndroid;\n    }\n    return FadeInFromBottomAndroid;\n  }\n  // iOS and other platforms\n  if (isModal) {\n    return ModalSlideFromBottomIOS;\n  }\n  return SlideFromRightIOS;\n}\n\nfunction getTransitionConfig(\n  transitionConfigurer?: () => TransitionConfig,\n  // props for the new screen\n  transitionProps: NavigationTransitionProps,\n  // props for the old screen\n  prevTransitionProps: NavigationTransitionProps,\n  isModal: boolean\n): TransitionConfig {\n  const defaultConfig = defaultTransitionConfig(\n    transitionProps,\n    prevTransitionProps,\n    isModal\n  );\n  if (transitionConfigurer) {\n    return {\n      ...defaultConfig,\n      ...transitionConfigurer(),\n    };\n  }\n  return defaultConfig;\n}\n\nexport default {\n  DefaultTransitionSpec,\n  defaultTransitionConfig,\n  getTransitionConfig,\n};\n"]}]