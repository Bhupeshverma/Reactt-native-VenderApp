["d40688a3ea6154a18a6328beca4fae9706e5cdbd","0433d949b04d715d695025975fc08ff6033f2451",["prop-types","react","react-native","../config/colors","../helpers/normalizeText","../config/ViewPropTypes"],[91,195,292,332,444,578],{"version":3,"sources":["/home/ziddi/Desktop/Bhupesh/venders/node_modules/react-native-elements/src/form/FormInput.js"],"names":["get","width","FormInput","props","getRef","input","refs","textInputRef","getRefHandler","shake","bind","shakeAnimationValue","Value","nextProps","focus","blur","clear","setValue","timing","duration","toValue","ease","bounce","start","containerStyle","inputStyle","containerRef","selectionColor","normalizeFontSize","attributes","translateX","interpolate","inputRange","outputRange","styles","container","transform","grey3","fontSize","propTypes","style","string","oneOfType","func","bool","object","number","array","defaultProps","create","marginLeft","marginRight","select","ios","borderBottomColor","grey4","borderBottomWidth","android","minHeight","color"],"mappings":"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","sourcesContent":["import PropTypes from 'prop-types';\nimport React, { Component } from 'react';\nimport {\n  Animated,\n  Easing,\n  TextInput,\n  StyleSheet,\n  Platform,\n  Dimensions,\n  Text as NativeText,\n} from 'react-native';\nimport colors from '../config/colors';\nimport normalize from '../helpers/normalizeText';\nimport ViewPropTypes from '../config/ViewPropTypes';\n\nconst { width } = Dimensions.get('window');\n\nclass FormInput extends Component {\n  constructor(props) {\n    super(props);\n    this.shake = this.shake.bind(this);\n  }\n\n  componentWillMount() {\n    this.shakeAnimationValue = new Animated.Value(0);\n    this.props.shake && this.shake();\n  }\n\n  componentWillReceiveProps(nextProps) {\n    nextProps.shake && this.props.shake !== nextProps.shake && this.shake();\n  }\n\n  getRef = () => {\n    return this.input || this.refs[this.props.textInputRef];\n  };\n\n  getRefHandler = () => {\n    if (this.props.textInputRef) {\n      if (typeof this.props.textInputRef === 'function') {\n        return input => {\n          this.input = input;\n          this.props.textInputRef(input);\n        };\n      } else {\n        return this.props.textInputRef;\n      }\n    } else {\n      return input => this.input = input;\n    }\n  };\n\n  focus() {\n    this.getRef() && this.getRef().focus();\n  }\n\n  blur() {\n    this.getRef() && this.getRef().blur();\n  }\n\n  clearText() {\n    this.getRef() && this.getRef().clear();\n  }\n\n  shake() {\n    const { shakeAnimationValue } = this;\n    shakeAnimationValue.setValue(0);\n    Animated.timing(shakeAnimationValue, {\n      duration: 375,\n      toValue: 3,\n      ease: Easing.bounce,\n    }).start();\n  }\n\n  render() {\n    const {\n      containerStyle,\n      inputStyle,\n      containerRef,\n      selectionColor,\n      normalizeFontSize,\n      ...attributes\n    } = this.props;\n    const translateX = this.shakeAnimationValue.interpolate({\n      inputRange: [0, 0.5, 1, 1.5, 2, 2.5, 3],\n      outputRange: [0, -15, 0, 15, 0, -15, 0],\n    });\n    return (\n      <Animated.View\n        ref={containerRef}\n        style={[\n          styles.container,\n          containerStyle && containerStyle,\n          {\n            transform: [{ translateX }],\n          },\n        ]}\n      >\n        <TextInput\n          ref={this.getRefHandler()}\n          selectionColor={selectionColor || colors.grey3}\n          style={[\n            styles.input,\n            { fontSize: normalizeFontSize ? normalize(14) : 14 },\n            inputStyle && inputStyle,\n          ]}\n          {...attributes}\n        />\n      </Animated.View>\n    );\n  }\n}\n\nFormInput.propTypes = {\n  containerStyle: ViewPropTypes.style,\n  inputStyle: NativeText.propTypes.style,\n  selectionColor: PropTypes.string,\n  // Deprecated\n  textInputRef: PropTypes.oneOfType([PropTypes.string, PropTypes.func]),\n  // Deprecated\n  containerRef: PropTypes.oneOfType([PropTypes.string, PropTypes.func]),\n  normalizeFontSize: PropTypes.bool,\n  shake: PropTypes.oneOfType([\n    PropTypes.string,\n    PropTypes.bool,\n    PropTypes.object,\n    PropTypes.number,\n    PropTypes.array,\n  ]),\n};\n\nFormInput.defaultProps = {\n  normalizeFontSize: true,\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    marginLeft: 15,\n    marginRight: 15,\n    ...Platform.select({\n      ios: {\n        borderBottomColor: colors.grey4,\n        borderBottomWidth: 1,\n        marginLeft: 20,\n        marginRight: 20,\n      },\n    }),\n  },\n  input: {\n    ...Platform.select({\n      android: {\n        minHeight: 46,\n        width: width - 30,\n      },\n      ios: {\n        minHeight: 36,\n        width: width,\n      },\n    }),\n    // breaks tests - fix before release\n    // Invariant Violation: Invalid undefined `width` of type `string`\n    // supplied to `StyleSheet input`, expected `number`.\n    // width: '100%',\n    color: colors.grey3,\n  },\n});\n\nexport default FormInput;\n"]}]