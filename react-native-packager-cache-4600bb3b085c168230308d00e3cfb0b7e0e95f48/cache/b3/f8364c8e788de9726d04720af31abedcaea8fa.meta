["c1e39a961f5fe371100290e486414d59107ca6c0","d00dec03565d7f1310d7fb67708ccf464845953b",["react","react-native","../drivers/DriverShape","../components/measure"],[137,234,350,401],{"version":3,"sources":["/home/ziddi/Desktop/Bhupesh/venders/node_modules/@shoutem/animation/src/animations/Parallax.js"],"names":["Parallax","props","translation","Value","calculateTranslation","bind","scrollOffset","pageY","state","layout","driver","scrollHeight","height","setValue","value","animationListener","addListener","removeListener","scrollSpeed","children","extrapolation","insideScroll","style","header","scrollVector","scrollFactor","animatedValue","transform","translateY","interpolate","inputRange","outputRange","propTypes","isRequired","PropTypes","node","object","number","bool","defaultProps","measuredParralax"],"mappings":";;;;;;;AAAA;;;;AACA;;;;AAEA;;AACA;;IA4BMA,Q;;;AAsCJ,oBAAYC,KAAZ,EAAmB;AAAA;;AAAA,gIACXA,KADW;;AAEjB,UAAKC,WAAL,GAAmB,IAAI,sBAASC,KAAb,CAAmB,CAAnB,CAAnB;AACA,UAAKC,oBAAL,GAA4B,MAAKA,oBAAL,CAA0BC,IAA1B,OAA5B;AAHiB;AAIlB;;;;yCAEoBC,Y,EAAc;AAAA,UACzBC,KADyB,GACf,KAAKC,KAAL,CAAWC,MADI,CACzBF,KADyB;AAAA,UAEzBG,MAFyB,GAEd,KAAKT,KAFS,CAEzBS,MAFyB;;AAGjC,UAAMC,eAAeD,OAAOD,MAAP,CAAcG,MAAnC;AACA,WAAKV,WAAL,CAAiBW,QAAjB,CAA0BP,aAAaQ,KAAb,IAAsBP,QAAQI,eAAe,CAA7C,CAA1B;AACD;;;yCAEoB;AAAA,UACXD,MADW,GACA,KAAKT,KADL,CACXS,MADW;;AAEnB,WAAKK,iBAAL,GAAyBL,OAAOI,KAAP,CAAaE,WAAb,CAAyB,KAAKZ,oBAA9B,CAAzB;AACD;;;2CAEsB;AAAA,UACbM,MADa,GACF,KAAKT,KADH,CACbS,MADa;;AAErBA,aAAOI,KAAP,CAAaG,cAAb,CAA4B,KAAKF,iBAAjC;AACD;;;6BAEQ;AAAA,mBASH,KAAKd,KATF;AAAA,UAELiB,WAFK,UAELA,WAFK;AAAA,UAGLC,QAHK,UAGLA,QAHK;AAAA,UAILC,aAJK,UAILA,aAJK;AAAA,UAKLC,YALK,UAKLA,YALK;AAAA,UAMLC,KANK,UAMLA,KANK;AAAA,UAOLZ,MAPK,UAOLA,MAPK;AAAA,UAQLa,MARK,UAQLA,MARK;;AAUP,UAAMC,eAAeH,eAAe,CAAC,CAAhB,GAAoB,CAAzC;AACA,UAAMI,eAAeD,gBAAgBN,cAAc,CAA9B,CAArB;AACA,UAAMQ,gBAAgBH,SAASb,OAAOI,KAAhB,GAAwB,KAAKZ,WAAnD;;AAEA,aACE;AAAA,8BAAU,IAAV;AAAA;AACE,iBAAO,CAACoB,KAAD,EAAQ;AACbK,uBAAW,CACT;AACEC,0BAAYF,cAAcG,WAAd;AACVC,4BAAY,CAAC,CAAC,GAAF,EAAO,GAAP,CADF;AAEVC,6BAAa,CAAC,CAACN,YAAD,GAAgB,GAAjB,EAAsBA,eAAe,GAArC;AAFH,iBAGPL,aAHO;AADd,aADS;AADE,WAAR;AADT;AAaGD;AAbH,OADF;AAiBD;;;4BA3FMa,S,GAAY;AAIjBtB,UAAQ,yBAAYuB,UAJH;;AAQjBd,YAAU,gBAAMe,SAAN,CAAgBC,IART;;AAejBf,iBAAe,gBAAMc,SAAN,CAAgBE,MAfd;;AAmBjBlB,eAAa,gBAAMgB,SAAN,CAAgBG,MAnBZ;;AAuBjBhB,gBAAc,gBAAMa,SAAN,CAAgBI,IAvBb;;AA2BjBf,UAAQ,gBAAMW,SAAN,CAAgBI,IA3BP;;AA6BjBhB,SAAO,gBAAMY,SAAN,CAAgBE;AA7BN,C,SAgCZG,Y,GAAe;AACpBlB,gBAAc,IADM;AAEpBE,UAAQ;AAFY,C;;;AA8DxB,IAAMiB,mBAAmB,sBAAQxC,QAAR,CAAzB;;QAGsBA,Q,GAApBwC,gB","sourcesContent":["import React, { Component } from 'react';\nimport ReactNative, { Animated, View, Dimensions } from 'react-native';\n\nimport { DriverShape } from '../drivers/DriverShape';\nimport { measure } from '../components/measure';\n/*\n * Parallax Component adds parallax effect to its children components.\n * Connect it to driver to animate it. By default children will by\n * translated dependent on scroll speed, but you can pass extrapolation options\n * to limit translation.\n * e.g.:\n * ...\n * const driver = new ScrollDriver();\n *\n * return (\n *  <ScrollView\n *    {...driver.scrollViewProps}\n *  >\n *    <Parallax\n *      driver={driver}\n *      scrollSpeed={2}\n *    >\n *      <Image />\n *    </Parallax>\n *    <Title>Title</Title>\n *  </ScrollView>\n * );\n *\n * ...\n * Above code will create scroll dependent parallax animation over Image component\n * where image will be scrolled 2 times faster than Title\n */\nclass Parallax extends Component {\n  static propTypes = {\n    /**\n     * An instance of animation driver, usually ScrollDriver\n     */\n    driver: DriverShape.isRequired,\n    /**\n     * Components to which an effect will be applied\n     */\n    children: React.PropTypes.node,\n    /**\n     * extrapolation options for parallax translation\n     * if not passed children would be translated by\n     * scrollVector * (scrollSpeed - 1) * driver.value\n     * where scroll vector is defined by scrolling direction\n     */\n    extrapolation: React.PropTypes.object,\n    /**\n     * how fast passed children would scroll\n     */\n    scrollSpeed: React.PropTypes.number,\n    /**\n     * Is Parallax placed in or outside the ScrollView\n     */\n    insideScroll: React.PropTypes.bool,\n    /**\n     * Is parallax used as header\n     */\n    header: React.PropTypes.bool,\n\n    style: React.PropTypes.object,\n  }\n\n  static defaultProps = {\n    insideScroll: true,\n    header: false,\n  }\n\n  constructor(props) {\n    super(props);\n    this.translation = new Animated.Value(0);\n    this.calculateTranslation = this.calculateTranslation.bind(this);\n  }\n\n  calculateTranslation(scrollOffset) {\n    const { pageY } = this.state.layout;\n    const { driver } = this.props;\n    const scrollHeight = driver.layout.height;\n    this.translation.setValue(scrollOffset.value - (pageY - scrollHeight / 2));\n  }\n\n  componentWillMount() {\n    const { driver } = this.props;\n    this.animationListener = driver.value.addListener(this.calculateTranslation);\n  }\n\n  componentWillUnmount() {\n    const { driver } = this.props;\n    driver.value.removeListener(this.animationListener);\n  }\n\n  render() {\n    const {\n      scrollSpeed,\n      children,\n      extrapolation,\n      insideScroll,\n      style,\n      driver,\n      header,\n    } = this.props;\n    const scrollVector = insideScroll ? -1 : 1;\n    const scrollFactor = scrollVector * (scrollSpeed - 1);\n    const animatedValue = header ? driver.value : this.translation;\n\n    return (\n      <Animated.View\n        style={[style, {\n          transform: [\n            {\n              translateY: animatedValue.interpolate({\n                inputRange: [-100, 100],\n                outputRange: [-scrollFactor * 100, scrollFactor * 100],\n                ...extrapolation,\n              }),\n            },\n          ],\n        }]}\n      >\n        {children}\n      </Animated.View>\n    );\n  }\n}\n\nconst measuredParralax = measure(Parallax);\n\nexport {\n  measuredParralax as Parallax\n};\n"]}]