["63a105eee2639d019b5098d210f614f07ee1956b","6e4216a5cde5c0a1999aed56fe30af0a080c378b",["react-native","./NavigationAbstractPanResponder","./clamp"],[39,91,165,223],{"version":3,"sources":["/home/ziddi/Desktop/Bhupesh/venders/node_modules/react-native-navigation-experimental-compat/src/NavigationCardStackPanResponder.js"],"names":["Animated","require","I18nManager","NavigationAbstractPanResponder","clamp","emptyFunction","ANIMATION_DURATION","POSITION_THRESHOLD","RESPOND_THRESHOLD","DISTANCE_THRESHOLD","Directions","NavigationCardStackPanResponder","direction","props","_isResponding","_isVertical","VERTICAL","_props","_startValue","_addNativeListener","layout","width","height","position","event","gesture","navigationState","index","scene","isVertical","currentDragDistance","currentDragPosition","maxDragDistance","__getValue","positionMax","gestureResponseDistance","Math","abs","stopAnimation","value","axis","distance","currentValue","isRTL","setValue","_reset","onNavigateBack","timing","toValue","duration","useNativeDriver","__isNative","start","animatedValue","Object","keys","_listeners","length","addListener","createPanHandlers","responder","panHandlers","forHorizontal","HORIZONTAL","forVertical","module","exports"],"mappings":"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","sourcesContent":["/**\n * Copyright (c) 2013-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @flow\n */\n'use strict';\n\nconst Animated = require('react-native').Animated;\nconst I18nManager = require('react-native').I18nManager;\nconst NavigationAbstractPanResponder = require('./NavigationAbstractPanResponder');\n\nconst clamp = require('./clamp');\n\nimport type {\n  NavigationPanPanHandlers,\n  NavigationSceneRendererProps,\n} from './NavigationTypeDefinition';\n\nconst emptyFunction = () => {};\n\n/**\n * The duration of the card animation in milliseconds.\n */\nconst ANIMATION_DURATION = 250;\n\n/**\n * The threshold to invoke the `onNavigateBack` action.\n * For instance, `1 / 3` means that moving greater than 1 / 3 of the width of\n * the view will navigate.\n */\nconst POSITION_THRESHOLD = 1 / 3;\n\n/**\n * The threshold (in pixels) to start the gesture action.\n */\nconst RESPOND_THRESHOLD = 15;\n\n/**\n * The threshold (in pixels) to finish the gesture action.\n */\nconst DISTANCE_THRESHOLD = 100;\n\n/**\n * Primitive gesture directions.\n */\nconst Directions = {\n  'HORIZONTAL': 'horizontal',\n  'VERTICAL': 'vertical',\n};\n\nexport type NavigationGestureDirection =  'horizontal' | 'vertical';\n\ntype Props = NavigationSceneRendererProps & {\n  onNavigateBack: ?Function,\n  /**\n  * The distance from the edge of the navigator which gesture response can start for.\n  **/\n  gestureResponseDistance: ?number,\n};\n\n/**\n * Pan responder that handles gesture for a card in the cards stack.\n *\n *     +------------+\n *   +-+            |\n * +-+ |            |\n * | | |            |\n * | | |  Focused   |\n * | | |   Card     |\n * | | |            |\n * +-+ |            |\n *   +-+            |\n *     +------------+\n */\nclass NavigationCardStackPanResponder extends NavigationAbstractPanResponder {\n\n  _isResponding: boolean;\n  _isVertical: boolean;\n  _props: Props;\n  _startValue: number;\n\n  constructor(\n    direction: NavigationGestureDirection,\n    props: Props,\n  ) {\n    super();\n    this._isResponding = false;\n    this._isVertical = direction === Directions.VERTICAL;\n    this._props = props;\n    this._startValue = 0;\n\n    // Hack to make this work with native driven animations. We add a single listener\n    // so the JS value of the following animated values gets updated. We rely on\n    // some Animated private APIs and not doing so would require using a bunch of\n    // value listeners but we'd have to remove them to not leak and I'm not sure\n    // when we'd do that with the current structure we have. `stopAnimation` callback\n    // is also broken with native animated values that have no listeners so if we\n    // want to remove this we have to fix this too.\n    this._addNativeListener(this._props.layout.width);\n    this._addNativeListener(this._props.layout.height);\n    this._addNativeListener(this._props.position);\n  }\n\n  onMoveShouldSetPanResponder(event: any, gesture: any): boolean {\n    const props = this._props;\n\n    if (props.navigationState.index !== props.scene.index) {\n      return false;\n    }\n\n    const layout = props.layout;\n    const isVertical = this._isVertical;\n    const index = props.navigationState.index;\n    const currentDragDistance = gesture[isVertical ? 'dy' : 'dx'];\n    const currentDragPosition = gesture[isVertical ? 'moveY' : 'moveX'];\n    const maxDragDistance = isVertical ?\n      layout.height.__getValue() :\n      layout.width.__getValue();\n\n    const positionMax = isVertical ?\n      props.gestureResponseDistance :\n      /**\n      * For horizontal scroll views, a distance of 30 from the left of the screen is the\n      * standard maximum position to start touch responsiveness.\n      */\n      props.gestureResponseDistance || 30;\n\n    if (positionMax != null && currentDragPosition > positionMax) {\n      return false;\n    }\n\n    return (\n      Math.abs(currentDragDistance) > RESPOND_THRESHOLD &&\n      maxDragDistance > 0 &&\n      index > 0\n    );\n  }\n\n  onPanResponderGrant(): void {\n    this._isResponding = false;\n    this._props.position.stopAnimation((value: number) => {\n      this._isResponding = true;\n      this._startValue = value;\n    });\n  }\n\n  onPanResponderMove(event: any, gesture: any): void {\n    if (!this._isResponding) {\n      return;\n    }\n\n    const props = this._props;\n    const layout = props.layout;\n    const isVertical = this._isVertical;\n    const axis = isVertical ? 'dy' : 'dx';\n    const index = props.navigationState.index;\n    const distance = isVertical ?\n      layout.height.__getValue() :\n      layout.width.__getValue();\n    const currentValue = I18nManager.isRTL && axis === 'dx' ?\n      this._startValue + (gesture[axis] / distance) :\n      this._startValue - (gesture[axis] / distance);\n\n    const value = clamp(\n      index - 1,\n      currentValue,\n      index\n    );\n\n    props.position.setValue(value);\n  }\n\n  onPanResponderRelease(event: any, gesture: any): void {\n    if (!this._isResponding) {\n      return;\n    }\n\n    this._isResponding = false;\n\n    const props = this._props;\n    const isVertical = this._isVertical;\n    const axis = isVertical ? 'dy' : 'dx';\n    const index = props.navigationState.index;\n    const distance = I18nManager.isRTL && axis === 'dx' ?\n      -gesture[axis] :\n      gesture[axis];\n\n    props.position.stopAnimation((value: number) => {\n      this._reset();\n\n      if (!props.onNavigateBack) {\n        return;\n      }\n\n      if (\n        distance > DISTANCE_THRESHOLD  ||\n        value <= index - POSITION_THRESHOLD\n      ) {\n        props.onNavigateBack();\n      }\n    });\n  }\n\n  onPanResponderTerminate(): void {\n    this._isResponding = false;\n    this._reset();\n  }\n\n  _reset(): void {\n    const props = this._props;\n    Animated.timing(\n      props.position,\n      {\n        toValue: props.navigationState.index,\n        duration: ANIMATION_DURATION,\n        useNativeDriver: props.position.__isNative,\n      }\n    ).start();\n  }\n\n  _addNativeListener(animatedValue) {\n    if (!animatedValue.__isNative) {\n      return;\n    }\n\n    if (Object.keys(animatedValue._listeners).length === 0) {\n      animatedValue.addListener(emptyFunction);\n    }\n  }\n}\n\nfunction createPanHandlers(\n  direction: NavigationGestureDirection,\n  props: Props,\n): NavigationPanPanHandlers {\n  const responder = new NavigationCardStackPanResponder(direction, props);\n  return responder.panHandlers;\n}\n\nfunction forHorizontal(\n  props: Props,\n): NavigationPanPanHandlers {\n  return createPanHandlers(Directions.HORIZONTAL, props);\n}\n\nfunction forVertical(\n  props: Props,\n): NavigationPanPanHandlers {\n  return createPanHandlers(Directions.VERTICAL, props);\n}\n\nmodule.exports = {\n  // constants\n  ANIMATION_DURATION,\n  DISTANCE_THRESHOLD,\n  POSITION_THRESHOLD,\n  RESPOND_THRESHOLD,\n\n  // enums\n  Directions,\n\n  // methods.\n  forHorizontal,\n  forVertical,\n};\n"]}]