["bcd9f8174a31a2cc176936bfdb4c4fdb230370d1","d7f24da3ecae4ddba90d2ecb504b4efa474f7a7a",["react","react-native","./animated/Circle"],[137,234,274],{"version":3,"sources":["/home/ziddi/Desktop/Bhupesh/venders/node_modules/react-native-loader/src/Pulse.js"],"names":["Surface","Pulse","state","pulse","ValueXY","x","y","animate","unmounted","timing","toValue","duration","start","setValue","props","size","color","width","height","propTypes","number","string","defaultProps"],"mappings":";;;;;;;AAAA;;;;AACA;;AAGA;;;;IAFQA,O,oBAAAA,O;IAIaC,K;;;;;;;;;;;;;;gMAWnBC,K,GAAQ;AACNC,aAAO,IAAI,sBAASC,OAAb,CAAqB;AAC1BC,WAAG,GADuB;AAE1BC,WAAG;AAFuB,OAArB;AADD,K;;;;;wCAOY;AAClB,WAAKC,OAAL;AACD;;;2CAEsB;AACrB,WAAKC,SAAL,GAAiB,IAAjB;AACD;;;8BAES;AAAA;;AACR,4BACGC,MADH,CACU,KAAKP,KAAL,CAAWC,KADrB,EAC4B;AACxBO,iBAAS;AACPL,aAAG,CADI;AAEPC,aAAG;AAFI,SADe;AAKxBK,kBAAU;AALc,OAD5B,EAQGC,KARH,CAQS,YAAM;AACX,YAAI,CAAC,OAAKJ,SAAV,EAAqB;AACnB,iBAAKN,KAAL,CAAWC,KAAX,CAAiBU,QAAjB,CAA0B;AACxBR,eAAG,CADqB;AAExBC,eAAG;AAFqB,WAA1B;AAIA,iBAAKC,OAAL;AACD;AACF,OAhBH;AAiBD;;;6BAEQ;AAAA,mBACiB,KAAKO,KADtB;AAAA,UACCC,IADD,UACCA,IADD;AAAA,UACOC,KADP,UACOA,KADP;AAAA,UAECb,KAFD,GAEW,KAAKD,KAFhB,CAECC,KAFD;;AAGP,UAAMc,QAAQF,OAAO,CAArB;AACA,UAAMG,SAASH,OAAO,CAAtB;;AAEA,aAAQ;AAAC,eAAD;AAAA,UAAS,OAAOE,KAAhB,EAAuB,QAAQC,MAA/B;AACN;AACE,kBAAQH,IADV;AAEE,gBAAMC,KAFR;AAGE,iBAAOb,MAAME,CAHf;AAIE,mBAASF,MAAMG,CAJjB;AAKE,aAAGS,IALL;AAME,aAAGA;AANL;AADM,OAAR;AAUD;;;4BA7DMI,S,GAAY;AACjBJ,QAAM,iBAAUK,MADC;AAEjBJ,SAAO,iBAAUK;AAFA,C,SAKZC,Y,GAAe;AACpBP,QAAM,EADc;AAEpBC,SAAO;AAFa,C;kBANHf,K","sourcesContent":["import React, { Component, PropTypes } from 'react';\nimport { Animated, ART } from 'react-native';\nconst { Surface } = ART;\n\nimport Circle from './animated/Circle';\n\nexport default class Pulse extends Component {\n  static propTypes = {\n    size: PropTypes.number,\n    color: PropTypes.string\n  };\n\n  static defaultProps = {\n    size: 14,\n    color: '#000'\n  };\n\n  state = {\n    pulse: new Animated.ValueXY({\n      x: 0.5,\n      y: 1\n    })\n  };\n\n  componentDidMount() {\n    this.animate();\n  }\n\n  componentWillUnmount() {\n    this.unmounted = true;\n  }\n\n  animate() {\n    Animated\n      .timing(this.state.pulse, {\n        toValue: {\n          x: 1,\n          y: 0\n        },\n        duration: 1000\n      })\n      .start(() => {\n        if (!this.unmounted) {\n          this.state.pulse.setValue({\n            x: 0,\n            y: 1\n          });\n          this.animate();\n        }\n      });\n  }\n\n  render() {\n    const { size, color } = this.props;\n    const { pulse } = this.state;\n    const width = size * 2;\n    const height = size * 2;\n\n    return (<Surface width={width} height={height}>\n      <Circle\n        radius={size}\n        fill={color}\n        scale={pulse.x}\n        opacity={pulse.y}\n        x={size}\n        y={size}\n      />\n    </Surface>);\n  }\n}\n"]}]