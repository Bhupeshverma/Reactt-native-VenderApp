["7b601b0773a81b2547c4aea238be16b56e897bac","4bcffd301d6f87e5d4012ffb64449516f451f63b",["react-native","./NavigationCard","./NavigationCardStackPanResponder","./NavigationCardStackStyleInterpolator","./NavigationPropTypes","./NavigationTransitioner","react"],[71,152,219,308,385,448,497,532,579],{"version":3,"sources":["/home/ziddi/Desktop/Bhupesh/venders/node_modules/react-native-navigation-experimental-compat/src/NavigationCardStack.js"],"names":["NativeAnimatedModule","require","NativeModules","NavigationCard","NavigationCardStackPanResponder","NavigationCardStackStyleInterpolator","NavigationPropTypes","NavigationTransitioner","React","StyleSheet","View","PropTypes","Directions","NavigationCardStack","props","context","_configureTransition","isVertical","direction","animationConfig","enableGestures","canUseNativeDriver","useNativeDriver","_render","bind","_renderScene","navigationState","style","renderHeader","header","scenes","map","scene","styles","container","scenesStyle","interpolator","cardStyleInterpolator","forVertical","forHorizontal","panHandlers","panHandlersProps","onNavigateBack","gestureResponseDistance","key","renderScene","cardStyle","Component","propTypes","any","oneOf","HORIZONTAL","VERTICAL","number","func","bool","isRequired","defaultProps","create","flex","flexDirection","module","exports"],"mappings":"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","sourcesContent":["/**\n * Copyright (c) 2013-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * Facebook, Inc. (\"Facebook\") owns all right, title and interest, including\n * all intellectual property and other proprietary rights, in and to the React\n * Native CustomComponents software (the \"Software\").  Subject to your\n * compliance with these terms, you are hereby granted a non-exclusive,\n * worldwide, royalty-free copyright license to (1) use and copy the Software;\n * and (2) reproduce and distribute the Software as part of your own software\n * (\"Your Software\").  Facebook reserves all rights not expressly granted to\n * you in this license agreement.\n *\n * THE SOFTWARE AND DOCUMENTATION, IF ANY, ARE PROVIDED \"AS IS\" AND ANY EXPRESS\n * OR IMPLIED WARRANTIES (INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE) ARE DISCLAIMED.\n * IN NO EVENT SHALL FACEBOOK OR ITS AFFILIATES, OFFICERS, DIRECTORS OR\n * EMPLOYEES BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,\n * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,\n * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;\n * OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR\n * OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THE SOFTWARE, EVEN IF\n * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n *\n * @flow\n */\n'use strict';\n\nconst NativeAnimatedModule = require('react-native').NativeModules.NativeAnimatedModule;\nconst NavigationCard = require('./NavigationCard');\nconst NavigationCardStackPanResponder = require('./NavigationCardStackPanResponder');\nconst NavigationCardStackStyleInterpolator = require('./NavigationCardStackStyleInterpolator');\nconst NavigationPropTypes = require('./NavigationPropTypes');\nconst NavigationTransitioner = require('./NavigationTransitioner');\nconst React = require('react');\nconst StyleSheet = require('react-native').StyleSheet;\nconst View = require('react-native').View;\n\nconst {PropTypes} = React;\nconst {Directions} = NavigationCardStackPanResponder;\n\nimport type {\n  NavigationState,\n  NavigationSceneRenderer,\n  NavigationSceneRendererProps,\n  NavigationTransitionProps,\n  NavigationStyleInterpolator,\n} from './NavigationTypeDefinition';\n\nimport type {\n  NavigationGestureDirection,\n} from './NavigationCardStackPanResponder';\n\ntype Props = {\n  direction: NavigationGestureDirection,\n  navigationState: NavigationState,\n  onNavigateBack?: Function,\n  renderHeader: ?NavigationSceneRenderer,\n  renderScene: NavigationSceneRenderer,\n  cardStyle?: any,\n  style: any,\n  gestureResponseDistance?: ?number,\n  enableGestures: ?boolean,\n  cardStyleInterpolator?: ?NavigationStyleInterpolator,\n  scenesStyle?: any,\n};\n\ntype DefaultProps = {\n  direction: NavigationGestureDirection,\n  enableGestures: boolean,\n};\n\n/**\n * A controlled navigation view that renders a stack of cards.\n *\n * ```html\n *     +------------+\n *   +-|   Header   |\n * +-+ |------------|\n * | | |            |\n * | | |  Focused   |\n * | | |   Card     |\n * | | |            |\n * +-+ |            |\n *   +-+            |\n *     +------------+\n * ```\n *\n * ## Example\n *\n * ```js\n *\n * class App extends React.Component {\n *   constructor(props, context) {\n *     this.state = {\n *       navigation: {\n *         index: 0,\n *         routes: [\n *           {key: 'page 1'},\n *         },\n *       },\n *     };\n *   }\n *\n *   render() {\n *     return (\n *       <NavigationCardStack\n *         navigationState={this.state.navigation}\n *         renderScene={this._renderScene}\n *       />\n *     );\n *   }\n *\n *   _renderScene: (props) => {\n *     return (\n *       <View>\n *         <Text>{props.scene.route.key}</Text>\n *       </View>\n *     );\n *   };\n * ```\n */\nclass NavigationCardStack extends React.Component<DefaultProps, Props, void> {\n  _render : NavigationSceneRenderer;\n  _renderScene : NavigationSceneRenderer;\n\n  static propTypes = {\n    /**\n     * Custom style applied to the card.\n     */\n    cardStyle: PropTypes.any,\n\n    /**\n     * Direction of the cards movement. Value could be `horizontal` or\n     * `vertical`. Default value is `horizontal`.\n     */\n    direction: PropTypes.oneOf([Directions.HORIZONTAL, Directions.VERTICAL]),\n\n    /**\n     * The distance from the edge of the card which gesture response can start\n     * for. Default value is `30`.\n     */\n    gestureResponseDistance: PropTypes.number,\n\n    /**\n     * An interpolator function that is passed an object parameter of type\n     * NavigationSceneRendererProps and should return a style object to apply to\n     * the transitioning navigation card.\n     *\n     * Default interpolator transitions translateX, scale, and opacity.\n     */\n    cardStyleInterpolator: PropTypes.func,\n\n    /**\n     * Enable gestures. Default value is true.\n     *\n     * When disabled, transition animations will be handled natively, which\n     * improves performance of the animation. In future iterations, gestures\n     * will also work with native-driven animation.\n     */\n    enableGestures: PropTypes.bool,\n\n    /**\n     * The controlled navigation state. Typically, the navigation state\n     * look like this:\n     *\n     * ```js\n     * const navigationState = {\n     *   index: 0, // the index of the selected route.\n     *   routes: [ // A list of routes.\n     *     {key: 'page 1'}, // The 1st route.\n     *     {key: 'page 2'}, // The second route.\n     *   ],\n     * };\n     * ```\n     */\n    navigationState: NavigationPropTypes.navigationState.isRequired,\n\n    /**\n     * Callback that is called when the \"back\" action is performed.\n     * This happens when the back button is pressed or the back gesture is\n     * performed.\n     */\n    onNavigateBack: PropTypes.func,\n\n    /**\n     * Function that renders the header.\n     */\n    renderHeader: PropTypes.func,\n\n    /**\n     * Function that renders the a scene for a route.\n     */\n    renderScene: PropTypes.func.isRequired,\n\n    /**\n     * Custom style applied to the cards stack.\n     */\n    style: View.propTypes.style,\n\n    /**\n     * Custom style applied to the scenes stack.\n     */\n    scenesStyle: View.propTypes.style,\n  };\n\n  static defaultProps: DefaultProps = {\n    direction: Directions.HORIZONTAL,\n    enableGestures: true,\n  };\n\n  constructor(props: Props, context: any) {\n    super(props, context);\n  }\n\n  componentWillMount(): void {\n    this._render = this._render.bind(this);\n    this._renderScene = this._renderScene.bind(this);\n  }\n\n  render(): React.Element<any> {\n    return (\n      <NavigationTransitioner\n        configureTransition={this._configureTransition}\n        navigationState={this.props.navigationState}\n        render={this._render}\n        style={this.props.style}\n      />\n    );\n  }\n\n  _configureTransition = () => {\n    const isVertical = this.props.direction === 'vertical';\n    const animationConfig = {};\n    if (\n      !!NativeAnimatedModule\n\n      // Gestures do not work with the current iteration of native animation\n      // driving. When gestures are disabled, we can drive natively.\n      && !this.props.enableGestures\n\n      // Native animation support also depends on the transforms used:\n      && NavigationCardStackStyleInterpolator.canUseNativeDriver(isVertical)\n    ) {\n      animationConfig.useNativeDriver = true;\n    }\n    return animationConfig;\n  }\n\n  _render(props: NavigationTransitionProps): React.Element<any> {\n    const {\n      renderHeader,\n    } = this.props;\n\n    const header = renderHeader ? <View>{renderHeader(props)}</View> : null;\n\n    const scenes = props.scenes.map(\n     scene => this._renderScene({\n       ...props,\n       scene,\n     })\n    );\n\n    return (\n      <View style={styles.container}>\n        <View\n          style={[styles.scenes, this.props.scenesStyle]}>\n          {scenes}\n        </View>\n        {header}\n      </View>\n    );\n  }\n\n  _renderScene(props: NavigationSceneRendererProps): React.Element<any> {\n    const isVertical = this.props.direction === 'vertical';\n\n    const interpolator = this.props.cardStyleInterpolator || (isVertical ?\n      NavigationCardStackStyleInterpolator.forVertical :\n      NavigationCardStackStyleInterpolator.forHorizontal);\n\n    const style = interpolator(props);\n\n    let panHandlers = null;\n\n    if (this.props.enableGestures) {\n      const panHandlersProps = {\n        ...props,\n        onNavigateBack: this.props.onNavigateBack,\n        gestureResponseDistance: this.props.gestureResponseDistance,\n      };\n      panHandlers = isVertical ?\n        NavigationCardStackPanResponder.forVertical(panHandlersProps) :\n        NavigationCardStackPanResponder.forHorizontal(panHandlersProps);\n    }\n\n    return (\n      <NavigationCard\n        {...props}\n        key={'card_' + props.scene.key}\n        panHandlers={panHandlers}\n        renderScene={this.props.renderScene}\n        style={[style, this.props.cardStyle]}\n      />\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    // Header is physically rendered after scenes so that Header won't be\n    // covered by the shadows of the scenes.\n    // That said, we'd have use `flexDirection: 'column-reverse'` to move\n    // Header above the scenes.\n    flexDirection: 'column-reverse',\n  },\n  scenes: {\n    flex: 1,\n  },\n});\n\nmodule.exports = NavigationCardStack;\n"]}]