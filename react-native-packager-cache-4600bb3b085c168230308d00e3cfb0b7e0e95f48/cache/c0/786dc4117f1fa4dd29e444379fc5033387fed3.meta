["2f468108951e6f1543d4b6c93702b8293b9fe657","e142aeb76fd62b0e6f7b71dfad7f8e4eeef9ebf3",["react","./Theme"],[136,227],{"version":3,"sources":["/home/ziddi/Desktop/Bhupesh/venders/node_modules/@shoutem/theme/src/StyleProvider.js"],"names":["StyleProvider","props","context","state","theme","createTheme","nextProps","style","setState","children","only","Component","propTypes","element","isRequired","PropTypes","object","defaultProps","childContextTypes"],"mappings":";;;;;;;AAAA;;;;AACA;;;;IAKqBA,a;;;AAcnB,yBAAYC,KAAZ,EAAmBC,OAAnB,EAA4B;AAAA;;AAAA,0IACpBD,KADoB,EACbC,OADa;;AAE1B,UAAKC,KAAL,GAAa;AACXC,aAAO,MAAKC,WAAL,CAAiBJ,KAAjB;AADI,KAAb;AAF0B;AAK3B;;;;sCAEiB;AAChB,aAAO;AACLG,eAAO,KAAKD,KAAL,CAAWC;AADb,OAAP;AAGD;;;8CAEyBE,S,EAAW;AACnC,UAAIA,UAAUC,KAAV,KAAoB,KAAKN,KAAL,CAAWM,KAAnC,EAA0C;AACxC,aAAKC,QAAL,CAAc;AACZJ,iBAAO,KAAKC,WAAL,CAAiBC,SAAjB;AADK,SAAd;AAGD;AACF;;;gCAEWL,K,EAAO;AACjB,aAAO,oBAAUA,MAAMM,KAAhB,CAAP;AACD;;;6BAEQ;AAAA,UACCE,QADD,GACc,KAAKR,KADnB,CACCQ,QADD;;;AAGP,aAAO,gBAASC,IAAT,CAAcD,QAAd,CAAP;AACD;;;EA3CwC,gBAAME,S,UACxCC,S,GAAY;AACjBH,YAAU,iBAAUI,OAAV,CAAkBC,UADX;AAEjBP,SAAO,gBAAMQ,SAAN,CAAgBC;AAFN,C,SAKZC,Y,GAAe;AACpBV,SAAO;AADa,C,SAIfW,iB,GAAoB;AACzBd,SAAO,kBAAWU;AADO,C;kBAVRd,a","sourcesContent":["import React, { Children, PropTypes } from 'react';\nimport Theme, { ThemeShape } from './Theme';\n\n/**\n *  Provides a theme to child components trough context.\n */\nexport default class StyleProvider extends React.Component {\n  static propTypes = {\n    children: PropTypes.element.isRequired,\n    style: React.PropTypes.object,\n  };\n\n  static defaultProps = {\n    style: {},\n  };\n\n  static childContextTypes = {\n    theme: ThemeShape.isRequired,\n  };\n\n  constructor(props, context) {\n    super(props, context);\n    this.state = {\n      theme: this.createTheme(props),\n    };\n  }\n\n  getChildContext() {\n    return {\n      theme: this.state.theme,\n    };\n  }\n\n  componentWillReceiveProps(nextProps) {\n    if (nextProps.style !== this.props.style) {\n      this.setState({\n        theme: this.createTheme(nextProps),\n      });\n    }\n  }\n\n  createTheme(props) {\n    return new Theme(props.style);\n  }\n\n  render() {\n    const { children } = this.props;\n\n    return Children.only(children);\n  }\n}\n"]}]