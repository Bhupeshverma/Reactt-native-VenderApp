["c41b2a18a22d0b932c21ff86906293ebece225dc","0ba2cf216484dfab88c488e0da64f787a9f3c219",["./encode","./alphabet"],[36,72],{"version":3,"sources":["/home/ziddi/Desktop/Bhupesh/venders/node_modules/shortid/lib/build.js"],"names":["encode","require","alphabet","REDUCE_TIME","version","counter","previousSeconds","build","clusterWorkerId","str","seconds","Math","floor","Date","now","lookup","module","exports"],"mappings":"AAAA;;AAEA,IAAIA,SAASC,QAAQ,UAAR,CAAb;AACA,IAAIC,WAAWD,QAAQ,YAAR,CAAf;;AAKA,IAAIE,cAAc,aAAlB;;AAIA,IAAIC,UAAU,CAAd;;AAGA,IAAIC,OAAJ;;AAGA,IAAIC,eAAJ;;AAMA,SAASC,KAAT,CAAeC,eAAf,EAAgC;;AAE5B,QAAIC,MAAM,EAAV;;AAEA,QAAIC,UAAUC,KAAKC,KAAL,CAAW,CAACC,KAAKC,GAAL,KAAaX,WAAd,IAA6B,KAAxC,CAAd;;AAEA,QAAIO,YAAYJ,eAAhB,EAAiC;AAC7BD;AACH,KAFD,MAEO;AACHA,kBAAU,CAAV;AACAC,0BAAkBI,OAAlB;AACH;;AAEDD,UAAMA,MAAMT,OAAOE,SAASa,MAAhB,EAAwBX,OAAxB,CAAZ;AACAK,UAAMA,MAAMT,OAAOE,SAASa,MAAhB,EAAwBP,eAAxB,CAAZ;AACA,QAAIH,UAAU,CAAd,EAAiB;AACbI,cAAMA,MAAMT,OAAOE,SAASa,MAAhB,EAAwBV,OAAxB,CAAZ;AACH;AACDI,UAAMA,MAAMT,OAAOE,SAASa,MAAhB,EAAwBL,OAAxB,CAAZ;;AAEA,WAAOD,GAAP;AACH;;AAEDO,OAAOC,OAAP,GAAiBV,KAAjB","sourcesContent":["'use strict';\n\nvar encode = require('./encode');\nvar alphabet = require('./alphabet');\n\n// Ignore all milliseconds before a certain time to reduce the size of the date entropy without sacrificing uniqueness.\n// This number should be updated every year or so to keep the generated id short.\n// To regenerate `new Date() - 0` and bump the version. Always bump the version!\nvar REDUCE_TIME = 1459707606518;\n\n// don't change unless we change the algos or REDUCE_TIME\n// must be an integer and less than 16\nvar version = 6;\n\n// Counter is used when shortid is called multiple times in one second.\nvar counter;\n\n// Remember the last time shortid was called in case counter is needed.\nvar previousSeconds;\n\n/**\n * Generate unique id\n * Returns string id\n */\nfunction build(clusterWorkerId) {\n\n    var str = '';\n\n    var seconds = Math.floor((Date.now() - REDUCE_TIME) * 0.001);\n\n    if (seconds === previousSeconds) {\n        counter++;\n    } else {\n        counter = 0;\n        previousSeconds = seconds;\n    }\n\n    str = str + encode(alphabet.lookup, version);\n    str = str + encode(alphabet.lookup, clusterWorkerId);\n    if (counter > 0) {\n        str = str + encode(alphabet.lookup, counter);\n    }\n    str = str + encode(alphabet.lookup, seconds);\n\n    return str;\n}\n\nmodule.exports = build;\n"]}]