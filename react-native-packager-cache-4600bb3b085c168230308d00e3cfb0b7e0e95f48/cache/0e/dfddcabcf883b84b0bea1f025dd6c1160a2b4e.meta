["53d3bfe626ce92d791e29b4d09ef3df0cca6029a","dec9a1bacb4e034873c22a38f1bcf646d4cd37a8",[],[],{"version":3,"sources":["/home/ziddi/Desktop/Bhupesh/venders/node_modules/rn-host-detect/index.js"],"names":["getByRemoteConfig","hostname","remoteModuleConfig","window","__fbBatchedBridgeConfig","Array","isArray","constants","find","getConstants","serverHost","ServerHost","split","config","module","exports","__fbBatchedBridge","originalWarn","console","warn","arguments","indexOf","apply","NativeModules","PlatformConstants","AndroidConstants","__DEV__","require"],"mappings":"AAAA;;AAMA,SAASA,iBAAT,CAA2BC,QAA3B,EAAqC;AACnC,MAAIC,qBAAqB,OAAOC,MAAP,KAAkB,WAAlB,IACvBA,OAAOC,uBADgB,IAEvBD,OAAOC,uBAAP,CAA+BF,kBAFjC;AAGA,MACE,CAACG,MAAMC,OAAN,CAAcJ,kBAAd,CAAD,IACAD,aAAa,WAAb,IAA4BA,aAAa,WAF3C,EAGE,OAAOA,QAAP;;AAEF,MAAIM,YAAY,CACdL,mBAAmBM,IAAnB,CAAwBC,YAAxB,KAAyC,EAD3B,EAEd,CAFc,CAAhB;AAGA,MAAIF,SAAJ,EAAe;AACb,QAAIG,aAAaH,UAAUI,UAAV,IAAwBV,QAAzC;AACA,WAAOS,WAAWE,KAAX,CAAiB,GAAjB,EAAsB,CAAtB,CAAP;AACD;AACD,SAAOX,QAAP;AACD;;AAED,SAASQ,YAAT,CAAsBI,MAAtB,EAA8B;AAC5B,SAAOA,WAAWA,OAAO,CAAP,MAAc,kBAAd,IAAoCA,OAAO,CAAP,MAAc,mBAA7D,CAAP;AACD;;AAMDC,OAAOC,OAAP,GAAiB,UAAUd,QAAV,EAAoB;AACnC,MACE,OAAOe,iBAAP,KAA6B,QAA7B,IACAf,aAAa,WAAb,IAA4BA,aAAa,WAF3C,EAGE;AACA,WAAOA,QAAP;AACD;AACDA,aAAWD,kBAAkBC,QAAlB,CAAX;AACA,MAAIgB,eAAeC,QAAQC,IAA3B;AACAD,UAAQC,IAAR,GAAe,YAAW;AACxB,QAAIC,UAAU,CAAV,KAAgBA,UAAU,CAAV,EAAaC,OAAb,CAAqB,4CAArB,IAAqE,CAAC,CAA1F,EAA6F;AAC7F,WAAOJ,aAAaK,KAAb,CAAmBJ,OAAnB,EAA4BE,SAA5B,CAAP;AACD,GAHD;;AAKA,MAAIG,aAAJ;AACA,MAAIC,iBAAJ;AACA,MAAIC,gBAAJ;AACA,MAAI,OAAOtB,MAAP,KAAkB,WAAlB,IAAiC,CAACA,OAAOuB,OAAzC,IAAoD,OAAOvB,OAAOwB,OAAd,KAA0B,UAAlF,EAA8F;AAC5F,WAAO1B,QAAP;AACD;AACDsB,kBAAgBpB,OAAOwB,OAAP,CAAe,eAAf,CAAhB;AACAT,UAAQC,IAAR,GAAeF,YAAf;AACA,MACE,CAACM,aAAD,IACC,CAACA,cAAcC,iBAAf,IAAoC,CAACD,cAAcE,gBAFtD,EAGE;AACA,WAAOxB,QAAP;AACD;AACDuB,sBAAoBD,cAAcC,iBAAlC;AACAC,qBAAmBF,cAAcE,gBAAjC;;AAEA,MAAIf,aAAa,CAACc,oBAChBA,kBAAkBb,UADF,GAEhBc,iBAAiBd,UAFF,KAGZV,QAHL;AAIA,SAAOS,WAAWE,KAAX,CAAiB,GAAjB,EAAsB,CAAtB,CAAP;AACD,CApCD","sourcesContent":["'use strict'\n\n/*\n * It only for Debug Remotely mode for Android\n * When __DEV__ === false, we can't use window.require('NativeModules')\n */\nfunction getByRemoteConfig(hostname) {\n  var remoteModuleConfig = typeof window !== 'undefined' &&\n    window.__fbBatchedBridgeConfig &&\n    window.__fbBatchedBridgeConfig.remoteModuleConfig\n  if (\n    !Array.isArray(remoteModuleConfig) ||\n    hostname !== 'localhost' && hostname !== '127.0.0.1'\n  ) return hostname\n\n  var constants = (\n    remoteModuleConfig.find(getConstants) || []\n  )[1]\n  if (constants) {\n    var serverHost = constants.ServerHost || hostname\n    return serverHost.split(':')[0]\n  }\n  return hostname\n}\n\nfunction getConstants(config) {\n  return config && (config[0] === 'AndroidConstants' || config[0] === 'PlatformConstants')\n}\n\n/*\n * Get React Native server IP if hostname is `localhost`\n * On Android emulator, the IP of host is `10.0.2.2` (Genymotion: 10.0.3.2)\n */\nmodule.exports = function (hostname) {\n  if (\n    typeof __fbBatchedBridge !== 'object' ||  // Not on react-native\n    hostname !== 'localhost' && hostname !== '127.0.0.1'\n  ) {\n    return hostname\n  }\n  hostname = getByRemoteConfig(hostname)\n  var originalWarn = console.warn\n  console.warn = function() {\n    if (arguments[0] && arguments[0].indexOf('Requiring module \\'NativeModules\\' by name') > -1) return\n    return originalWarn.apply(console, arguments)\n  }\n\n  var NativeModules\n  var PlatformConstants\n  var AndroidConstants\n  if (typeof window === 'undefined' || !window.__DEV__ || typeof window.require !== 'function') {\n    return hostname\n  }\n  NativeModules = window.require('NativeModules')\n  console.warn = originalWarn\n  if (\n    !NativeModules ||\n    (!NativeModules.PlatformConstants && !NativeModules.AndroidConstants)\n  ) {\n    return hostname\n  }\n  PlatformConstants = NativeModules.PlatformConstants\n  AndroidConstants = NativeModules.AndroidConstants\n\n  var serverHost = (PlatformConstants ?\n    PlatformConstants.ServerHost :\n    AndroidConstants.ServerHost\n  ) || hostname\n  return serverHost.split(':')[0]\n}\n"]}]