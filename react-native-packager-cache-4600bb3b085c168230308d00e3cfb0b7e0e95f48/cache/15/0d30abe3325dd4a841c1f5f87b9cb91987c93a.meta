["f992432e52497520ea91f9f2abafc44da5239f87","89902f13eaa1a8f9342ed5a2fae1bd1f61c2283f",["react","react-native","react-native-tab-view","./TabBarIcon"],[137,234,286,339],{"version":3,"sources":["/home/ziddi/Desktop/Bhupesh/venders/node_modules/react-navigation/src/views/TabView/TabBarTop.js"],"names":["TabBarTop","_renderLabel","scene","props","position","navigation","activeTintColor","inactiveTintColor","showLabel","upperCaseLabel","labelStyle","index","routes","state","inputRange","map","x","i","outputRange","inputIndex","color","interpolate","tintColor","focused","label","getLabel","styles","toUpperCase","_renderIcon","renderIcon","showIcon","iconStyle","icon","defaultProps","create","height","width","textAlign","fontSize","margin","backgroundColor"],"mappings":"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","sourcesContent":["/* @flow */\n\nimport React, { PureComponent } from 'react';\nimport { Animated, StyleSheet } from 'react-native';\nimport { TabBar } from 'react-native-tab-view';\nimport TabBarIcon from './TabBarIcon';\n\nimport type {\n  NavigationAction,\n  NavigationScreenProp,\n  NavigationState,\n  Style,\n} from '../../TypeDefinition';\n\nimport type { TabScene } from './TabView';\n\ntype DefaultProps = {\n  activeTintColor: string,\n  inactiveTintColor: string,\n  showIcon: boolean,\n  showLabel: boolean,\n  upperCaseLabel: boolean,\n};\n\ntype Props = {\n  activeTintColor: string,\n  inactiveTintColor: string,\n  showIcon: boolean,\n  showLabel: boolean,\n  upperCaseLabel: boolean,\n  position: Animated.Value,\n  navigation: NavigationScreenProp<NavigationState, NavigationAction>,\n  getLabel: (scene: TabScene) => ?(React.Element<*> | string),\n  renderIcon: (scene: TabScene) => React.Element<*>,\n  labelStyle?: Style,\n  iconStyle?: Style,\n};\n\nexport default class TabBarTop\n  extends PureComponent<DefaultProps, Props, void> {\n  static defaultProps = {\n    activeTintColor: '#fff',\n    inactiveTintColor: '#fff',\n    showIcon: false,\n    showLabel: true,\n    upperCaseLabel: true,\n  };\n\n  props: Props;\n\n  _renderLabel = (scene: TabScene) => {\n    const {\n      position,\n      navigation,\n      activeTintColor,\n      inactiveTintColor,\n      showLabel,\n      upperCaseLabel,\n      labelStyle,\n    } = this.props;\n    if (showLabel === false) {\n      return null;\n    }\n    const { index } = scene;\n    const { routes } = navigation.state;\n    // Prepend '-1', so there are always at least 2 items in inputRange\n    const inputRange = [-1, ...routes.map((x: *, i: number) => i)];\n    const outputRange = inputRange.map(\n      (inputIndex: number) =>\n        inputIndex === index ? activeTintColor : inactiveTintColor\n    );\n    const color = position.interpolate({\n      inputRange,\n      outputRange,\n    });\n\n    const tintColor = scene.focused ? activeTintColor : inactiveTintColor;\n    const label = this.props.getLabel({ ...scene, tintColor });\n    if (typeof label === 'string') {\n      return (\n        <Animated.Text style={[styles.label, { color }, labelStyle]}>\n          {upperCaseLabel ? label.toUpperCase() : label}\n        </Animated.Text>\n      );\n    }\n    if (typeof label === 'function') {\n      return label({ ...scene, tintColor });\n    }\n\n    return label;\n  };\n\n  _renderIcon = (scene: TabScene) => {\n    const {\n      position,\n      navigation,\n      activeTintColor,\n      inactiveTintColor,\n      renderIcon,\n      showIcon,\n      iconStyle,\n    } = this.props;\n    if (showIcon === false) {\n      return null;\n    }\n    return (\n      <TabBarIcon\n        position={position}\n        navigation={navigation}\n        activeTintColor={activeTintColor}\n        inactiveTintColor={inactiveTintColor}\n        renderIcon={renderIcon}\n        scene={scene}\n        style={[styles.icon, iconStyle]}\n      />\n    );\n  };\n\n  render() {\n    // TODO: Define full proptypes\n    const props: any = this.props;\n\n    return (\n      <TabBar\n        {...props}\n        renderIcon={this._renderIcon}\n        renderLabel={this._renderLabel}\n      />\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  icon: {\n    height: 24,\n    width: 24,\n  },\n  label: {\n    textAlign: 'center',\n    fontSize: 13,\n    margin: 8,\n    backgroundColor: 'transparent',\n  },\n});\n"]}]