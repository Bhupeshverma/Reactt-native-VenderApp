["5d5eb3f06d79df35a42ce8d4545d70c455daba3e","abfee803c9345ec69ec48fa7b4dbe3b74f0da67a",["tinycolor2","react-native","lodash"],[368,478,518],{"version":3,"sources":["/home/ziddi/Desktop/Bhupesh/venders/node_modules/@shoutem/theme/src/addons.js"],"names":["createVariations","createSharedStyle","changeColorAlpha","inverseColorBrightnessForAmount","getSizeRelativeToReference","window","get","capitalizeFirstLetter","value","charAt","toUpperCase","slice","baseName","nameSuffixes","key","reduce","result","variant","variantName","keyName","componentNames","sharedStyle","customStyles","componentName","color","newAlpha","setAlpha","toRgbString","colorValue","amount","isLight","darken","toString","lighten","dimension","originalRefVal","actualRefVal"],"mappings":";;;QAyCgBA,gB,GAAAA,gB;QA6CAC,iB,GAAAA,iB;QAkBAC,gB,GAAAA,gB;QAUAC,+B,GAAAA,+B;QAiBAC,0B,GAAAA,0B;;AAnIhB;;;;AACA;;AACA;;;;AAEA,IAAMC,SAAS,wBAAWC,GAAX,CAAe,QAAf,CAAf;;AAEA,SAASC,qBAAT,CAA+BC,KAA/B,EAAsC;AACpC,SAAOA,MAAMC,MAAN,CAAa,CAAb,EAAgBC,WAAhB,KAAgCF,MAAMG,KAAN,CAAY,CAAZ,CAAvC;AACD;;AAiCM,SAASX,gBAAT,CAA0BY,QAA1B,EAAoCC,YAApC,EAAkDC,GAAlD,EAAuDN,KAAvD,EAA8D;AACnE,SAAO,iBAAEO,MAAF,CAASF,YAAT,EAAuB,UAACG,MAAD,EAASC,OAAT,EAAqB;AACjD,QAAMC,cAAcD,UAAaL,QAAb,SAAyBK,OAAzB,GAAqCL,QAAzD;AACA,QAAMO,UAAUF,eAAaH,GAAb,GAAmBP,sBAAsBU,OAAtB,CAAnB,GAAsDH,GAAtE;;AAGAE,WAAOE,WAAP,oCACGC,OADH,EACaX,KADb;;AAIA,WAAOQ,MAAP;AACD,GAVM,EAUJ,EAVI,CAAP;AAWD;;AAiCM,SAASf,iBAAT,CAA2BmB,cAA3B,EAAgF;AAAA,MAArCC,WAAqC,uEAAvB,EAAuB;AAAA,MAAnBC,YAAmB,uEAAJ,EAAI;;AACrF,SAAO,iBAAEP,MAAF,CAASK,cAAT,EAAyB,UAACJ,MAAD,EAASO,aAAT,EAA2B;AAEzDP,WAAOO,aAAP,6BACKF,WADL,EAEKC,aAAaC,aAAb,CAFL;;AAKA,WAAOP,MAAP;AACD,GARM,EAQJ,EARI,CAAP;AASD;;AAQM,SAASd,gBAAT,CAA0BsB,KAA1B,EAAiCC,QAAjC,EAA2C;AAChD,SAAO,yBAAUD,KAAV,EAAiBE,QAAjB,CAA0BD,QAA1B,EAAoCE,WAApC,EAAP;AACD;;AAQM,SAASxB,+BAAT,CAAyCyB,UAAzC,EAAqDC,MAArD,EAA6D;AAClE,MAAML,QAAQ,yBAAUI,UAAV,CAAd;AACA,MAAIJ,MAAMM,OAAN,EAAJ,EAAqB;AACnB,WAAON,MAAMO,MAAN,CAAaF,MAAb,EAAqBG,QAArB,EAAP;AACD;AACD,SAAOR,MAAMS,OAAN,CAAcJ,MAAd,EAAsBG,QAAtB,EAAP;AACD;;AAWM,SAAS5B,0BAAT,CAAoC8B,SAApC,EAA+CC,cAA/C,EAA+DC,YAA/D,EAA6E;AAClF,SAAQF,YAAYC,cAAb,GAA+BC,YAAtC;AACD","sourcesContent":["import tinyColor from 'tinycolor2';\nimport { Dimensions } from 'react-native';\nimport _ from 'lodash';\n\nconst window = Dimensions.get('window');\n\nfunction capitalizeFirstLetter(value) {\n  return value.charAt(0).toUpperCase() + value.slice(1);\n}\n\n/**\n * Creates a set of style variations with the provided name\n * suffixes. This function is useful when creating style variations\n * for styles with shorthands, e.g., margin, padding, etc. This function\n * will return an object with the keys that represent the style variations,\n * and each key will have an object with the provided key and value. Both\n * style variation, and value object keys will get the provided suffixes. The\n * style variation key names are expected to be in snake-case, and value keys\n * are expected to be in camelCase.\n *\n * Example:\n * createVariations('large-margin', ['', 'left', 'right'], 'margin', 30)\n * will return:\n * {\n *   'large-margin': {\n *     margin: 30\n *   },\n *   'large-margin-left': {\n *     marginLeft: 30,\n *   },\n *   'large-margin-right': {\n *     marginRight: 30,\n *   }\n * }\n *\n * @param baseName Base name for style variation Â§names.\n * @param nameSuffixes Suffixes that will be concatenated to baseName.\n * @param key The value key name to use.\n * @param value The value that will be assigned to the key property.\n * @returns {object} An object with the generated style variants.\n */\nexport function createVariations(baseName, nameSuffixes, key, value) {\n  return _.reduce(nameSuffixes, (result, variant) => {\n    const variantName = variant ? `${baseName}-${variant}` : baseName;\n    const keyName = variant ? `${key}${capitalizeFirstLetter(variant)}` : key;\n\n    // eslint-disable-next-line no-param-reassign\n    result[variantName] = {\n      [keyName]: value,\n    };\n\n    return result;\n  }, {});\n}\n\n/**\n * Creates a set of style rules for the provided components. This function\n * is useful when a set of components needs to have the same style. The\n * shared style will be applied to each component. It is also possible to\n * provide custom style for each component that will be applied on top of\n * the shared style.\n *\n * Example:\n * createSharedStyle(['shoutem.ui.Text', 'shoutem.ui.Title'], {\n *   color: 'white'\n * }, {\n *   'shoutem.ui.Title: {\n *     marginBottom: 15\n *   }\n * );\n * will return:\n * {\n *   'shoutem.ui.Text': {\n *     color: 'white'\n *   },\n *   'shoutem.ui.Title': {\n *     color: 'white',\n *     marginBottom: 15\n *   }\n * }\n *\n * @param componentNames The names of the components to generate styles for.\n * @param sharedStyle The style to apply to each component.\n * @param customStyles Style overrides by component names.\n * @returns {object} An object with the generated styles.\n */\nexport function createSharedStyle(componentNames, sharedStyle = {}, customStyles = {}) {\n  return _.reduce(componentNames, (result, componentName) => {\n    // eslint-disable-next-line no-param-reassign\n    result[componentName] = {\n      ...sharedStyle,\n      ...customStyles[componentName],\n    };\n\n    return result;\n  }, {});\n}\n\n/**\n * Change color alpha channel even if color wasn't original transparent.\n * @param color - rgba or hex\n * @param newAlpha\n * @returns {*}\n */\nexport function changeColorAlpha(color, newAlpha) {\n  return tinyColor(color).setAlpha(newAlpha).toRgbString();\n}\n\n/**\n * Makes bright colors darker and dark colors brighter.\n * @param colorValue - rgba or hex\n * @param amount\n * @returns {string}\n */\nexport function inverseColorBrightnessForAmount(colorValue, amount) {\n  const color = tinyColor(colorValue);\n  if (color.isLight()) {\n    return color.darken(amount).toString();\n  }\n  return color.lighten(amount).toString();\n}\n\n/**\n * Scale dimension to reference value by taking in consideration actual reference value.\n * For example, element should be 50px wide on screen wide 375px. If screen actual size is wider\n * then planned everything is going to be scaled up and vice versa.\n * @param dimension - wanted value for reference\n * @param originalRefVal - wanted value reference\n * @param actualRefVal - actual reference value\n * @returns {number}\n */\nexport function getSizeRelativeToReference(dimension, originalRefVal, actualRefVal) {\n  return (dimension / originalRefVal) * actualRefVal;\n}\n"]}]