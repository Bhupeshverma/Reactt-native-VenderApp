Object.defineProperty(exports,"__esModule",{value:true});exports.





























































































































parseHtml=parseHtml;var _htmlparser=require("htmlparser2");var _htmlparser2=babelHelpers.interopRequireDefault(_htmlparser);/**
 * Decode HTML "entities" (special characters)
 * to the human readable format.
 * For example `&gt;` to `>`.
 * @param str {String} Raw HTML
 * @returns {string}
 */function decodeHtmlEntities(str){return str.replace(/&#([0-9]{1,3});/gi,function(match,numStr){var num=parseInt(numStr,10);// read num as normal number
return String.fromCharCode(num);});}function createElementNode(tag){var attributes=arguments.length>1&&arguments[1]!==undefined?arguments[1]:{};var childElements=arguments.length>2&&arguments[2]!==undefined?arguments[2]:[];var parent=arguments[3];return{tag:tag,attributes:attributes,childElements:childElements,parent:parent};}// Html new line regex
var htmlNewLineRegex=new RegExp('(>\\n)|(\\n<)|(\\n)','g');var newLineAfterClosingTagRegex=new RegExp('>\\n');var newLineBeforeOpeningTagRegex=new RegExp('\\n<');/**
 * Try to handle new lines as the browsers.
 * All new lines beside the ones next to the < or > will be replaced with the whitespace.
 * Those next to the < and > will be replaced with the empty string so that paragraph doesn't
 * start with the whitespace.
 * @param html
 */function stripNewLines(html){return html.replace(htmlNewLineRegex,function(match){if(newLineAfterClosingTagRegex.test(match)){return'>';}else if(newLineBeforeOpeningTagRegex.test(match)){return'<';}return' ';}).trim();}/**
 * Use to create (save) a HTML tree copy out of element nodes
 * by recursively going through the HTML tree,
 * from a root node to the last child of the tree.
 */var HtmlTree=function(){/**
   * Set a tree basic nodes.
   * @param rootElementTag {String} The root element tag is safety wrapper around a parsed HTML
   *   because the HTML can have multiple root elements which is not supported by the RN.
   */function HtmlTree(){var rootTag=arguments.length>0&&arguments[0]!==undefined?arguments[0]:'div';babelHelpers.classCallCheck(this,HtmlTree);this.rootNode=createElementNode(rootTag);this.activeNode=this.rootNode;this.openTag=this.openTag.bind(this);this.appendText=this.appendText.bind(this);this.closeTag=this.closeTag.bind(this);}/**
   * Create new element, add it to active node, and set it as active.
   * @param tag {String} Element Tag name
   * @param attributes {Object} Element attributes
   * @param childElements {Array} Element children
   */babelHelpers.createClass(HtmlTree,[{key:"openTag",value:function openTag(tag,attributes,childElements){var element=this.addChild(tag,attributes,childElements);this.activeNode=element;}/**
   * Create new element and add to active node.
   * @param tag {String} Element Tag name
   * @param attributes {Object} Element attributes
   * @param childElements {Array} Element children
   * @returns {Element}
   */},{key:"addChild",value:function addChild(tag,attributes,childElements){var element=createElementNode(tag,attributes,childElements,this.activeNode);this.activeNode.childElements.push(element);return element;}/**
   * Add text element to active node.
   * @param text
   */},{key:"appendText",value:function appendText(text){var trimmedText=text.trim();if(trimmedText.length===0){// Whitespace around element tags is ignored
return;}this.addChild('text',undefined,[decodeHtmlEntities(text)]);}},{key:"getParent",value:function getParent(){return this.activeNode.parent;}},{key:"closeTag",value:function closeTag(){this.activeNode=this.getParent();}},{key:"getRootNode",value:function getRootNode(){return this.rootNode;}}]);return HtmlTree;}();/**
 * Create a HtmlTree copy from a raw HTML wrapped with rootTag.
 * @param html {String} Raw HTML
 * @param rootTag {String} Root element tag
 * @returns {HtmlTree}
 */function parseHtml(html){var rootTag=arguments.length>1&&arguments[1]!==undefined?arguments[1]:'div';var htmlTree=new HtmlTree(rootTag);var parser=new _htmlparser2.default.Parser({onopentag:htmlTree.openTag,ontext:htmlTree.appendText,onclosetag:htmlTree.closeTag});// The browsers ignore new lines so we are skipping them as well.
var strippedHtml=stripNewLines(html);parser.write(strippedHtml);parser.end();return htmlTree;}