["faa1981eb736af5118ea0b382c8ddf922b06b033","5035df49c3d636649c0d061197913e472e493ea8",["./ShorthandsNormalizerFactory"],[138],{"version":3,"sources":["/home/ziddi/Desktop/Bhupesh/venders/node_modules/@shoutem/theme/src/StyleNormalizer/StyleNormalizer.js"],"names":["StyleNormalizer","normalizers","createNormalizers","prop","shorthands","suffix","forEach","propName","shorthand","type","normalizerExists","Error","createNormalizer","normalizerName","val"],"mappings":";;;;;AAAA;;;;IAUqBA,e;AACnB,6BAAc;AAAA;;AACZ,SAAKC,WAAL,GAAmB,EAAnB;AACA,SAAKC,iBAAL,CAAuB,QAAvB,EAAiC,oHAAjC;AACA,SAAKA,iBAAL,CAAuB,SAAvB,EAAkC,oHAAlC;AACD;;;;sCAEiBC,I,EAAMC,U,EAAyB;AAAA;;AAAA,UAAbC,MAAa,uEAAJ,EAAI;;AAC/CD,iBAAWE,OAAX,CAAmB,qBAAa;AAC9B,YAAMC,WAAWJ,OAAOK,UAAUC,IAAjB,GAAwBJ,MAAzC;;AAEA,YAAI,MAAKK,gBAAL,CAAsBH,QAAtB,CAAJ,EAAqC;AACnC,gBAAMI,4BAAyBJ,QAAzB,iCAAN;AACD;;AAED,cAAKN,WAAL,CAAiBM,QAAjB,IACE,sCAA4BK,gBAA5B,CAA6CT,IAA7C,EAAmDK,SAAnD,EAA8DH,MAA9D,CADF;AAED,OATD;AAUD;;;qCAEgBQ,c,EAAgB;AAC/B,aAAO,CAAC,CAAC,KAAKZ,WAAL,CAAiBY,cAAjB,CAAT;AACD;;;iCAEYV,I,EAAM;AACjB,aAAO,KAAKO,gBAAL,CAAsBP,IAAtB,CAAP;AACD;;;8BAESA,I,EAAMW,G,EAAK;AACnB,aAAO,KAAKb,WAAL,CAAiBE,IAAjB,EAAuBW,GAAvB,CAAP;AACD;;;;;kBA9BkBd,e","sourcesContent":["import ShorthandsNormalizerFactory, {\n  SIDES,\n  HORIZONTAL,\n  VERTICAL,\n} from './ShorthandsNormalizerFactory';\n\n/**\n * Style Normalizer uses ShorthandsNormalizerCreators to creates different normalizers\n * specific to properties.\n */\nexport default class StyleNormalizer {\n  constructor() {\n    this.normalizers = {};\n    this.createNormalizers('margin', [HORIZONTAL, VERTICAL, SIDES]);\n    this.createNormalizers('padding', [HORIZONTAL, VERTICAL, SIDES]);\n  }\n\n  createNormalizers(prop, shorthands, suffix = '') {\n    shorthands.forEach(shorthand => {\n      const propName = prop + shorthand.type + suffix;\n\n      if (this.normalizerExists(propName)) {\n        throw Error(`Normalizer for '${propName}' shorthand already exists`);\n      }\n\n      this.normalizers[propName] =\n        ShorthandsNormalizerFactory.createNormalizer(prop, shorthand, suffix);\n    });\n  }\n\n  normalizerExists(normalizerName) {\n    return !!this.normalizers[normalizerName];\n  }\n\n  canNormalize(prop) {\n    return this.normalizerExists(prop);\n  }\n\n  normalize(prop, val) {\n    return this.normalizers[prop](val);\n  }\n}\n"]}]