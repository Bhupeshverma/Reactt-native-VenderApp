["c5dd527c4ad591feb946b8151c732dd4e43887b4","af3aadceada61c781d9f04da49680bd37a02e861",["react","react-native","lodash","@shoutem/theme","@shoutem/animation","../assets/images/transparent.png"],[134,231,271,365,410,2255],{"version":3,"sources":["/home/ziddi/Desktop/Bhupesh/venders/node_modules/@shoutem/ui/components/Image.js"],"names":["isValidSource","source","isNumber","isObject","uri","externalPropsTransformer","Image","transformer","props","captureNativeComponentRef","bind","state","transformedProps","createTransformedProps","nextProps","setState","nativeProps","nativeComponent","setNativeProps","defaultSource","OS","require","style","width","height","ref","component","propTypes","AnimatedImage","StyledImage"],"mappings":";;;;;;;AAAA;;;;AACA;;AAIA;;;;AAEA;;AACA;;AAGA,IAAMA,gBAAgB,SAAhBA,aAAgB,CAACC,MAAD;AAAA,SAAY,iBAAEC,QAAF,CAAWD,MAAX,KAAuB,iBAAEE,QAAF,CAAWF,MAAX,KAAsBA,OAAOG,GAAhE;AAAA,CAAtB;;AAMA,IAAIC,2BAA2B,IAA/B;;IAEMC,K;;;;wCAYuBC,W,EAAa;AACtCF,iCAA2BE,WAA3B;AACD;;;0CAQ4B;AAC3B,aAAOF,wBAAP;AACD;;;AAED,iBAAYG,KAAZ,EAAmB;AAAA;;AAAA,0HACXA,KADW;;AAGjB,UAAKC,yBAAL,GAAiC,MAAKA,yBAAL,CAA+BC,IAA/B,OAAjC;AACA,UAAKC,KAAL,GAAa;AACXC,wBAAkB,MAAKC,sBAAL,CAA4BL,KAA5B;AADP,KAAb;AAJiB;AAOlB;;;;8CAEyBM,S,EAAW;AACnC,UAAIA,cAAc,KAAKN,KAAvB,EAA8B;AAC5B,aAAKO,QAAL,CAAc;AACZH,4BAAkB,KAAKC,sBAAL,CAA4BC,SAA5B;AADN,SAAd;AAGD;AACF;;;mCAEcE,W,EAAa;AAC1B,WAAKC,eAAL,CAAqBC,cAArB,CAAoCF,WAApC;AACD;;;2CAEsBR,K,EAAO;AAC5B,UAAII,4CAAwBJ,KAAxB,CAAJ;AAD4B,UAEpBP,MAFoB,GAEMO,KAFN,CAEpBP,MAFoB;AAAA,UAEZkB,aAFY,GAEMX,KAFN,CAEZW,aAFY;;AAM5B,UAAI,sBAASC,EAAT,KAAgB,SAAhB,IAA6B,CAACpB,cAAcC,MAAd,CAAlC,EAAyD;AAGvDW,yBAAiBX,MAAjB,GAA0BkB,iBAAiBE,QAAQ,kCAAR,CAA3C;;AAGAT,yBAAiBU,KAAjB,0BAA2BC,OAAO,IAAlC,EAAwCC,QAAQ,IAAhD,IAAyDhB,MAAMc,KAA/D;AACD;;AAEDV,uBAAiBa,GAAjB,GAAuB,KAAKhB,yBAA5B;AACA,UAAIJ,wBAAJ,EAA8B;AAC5BO,2BAAmBP,yBAAyBO,gBAAzB,CAAnB;AACD;;AAED,aAAOA,gBAAP;AACD;;;8CAEyBc,S,EAAW;AACnC,WAAKT,eAAL,GAAuBS,SAAvB;AACD;;;6BAEQ;AAAA,UACCd,gBADD,GACsB,KAAKD,KAD3B,CACCC,gBADD;;;AAGP,aACE,kDAAaA,gBAAb,CADF;AAGD;;;gCA/EMe,S,4BACF,mBAAQA,S;;;AAiFf,IAAMC,gBAAgB,iCAAiBtB,KAAjB,CAAtB;AACA,IAAMuB,cAAc,yBAAa,kBAAb,EAAiCD,aAAjC,CAApB;QAEiBtB,K,GAAfuB,W","sourcesContent":["import React, { PureComponent } from 'react';\nimport {\n  Image as RNImage,\n  Platform,\n} from 'react-native';\nimport _ from 'lodash';\n\nimport { connectStyle } from '@shoutem/theme';\nimport { connectAnimation } from '@shoutem/animation';\n\n// A valid source is either an object with an uri key or a number (from a `require` call)\nconst isValidSource = (source) => _.isNumber(source) || (_.isObject(source) && source.uri);\n\n/**\n * A function to transform props that will be used by\n * all instances of the Image component.\n */\nlet externalPropsTransformer = null;\n\nclass Image extends PureComponent {\n  static propTypes = {\n    ...RNImage.propTypes,\n  };\n\n  /**\n   * Set a shared props transformer. The transformer will\n   * be called on each props change, and it should return\n   * the transformed props.\n   *\n   * @param {function(props)} transformer The props transformer.\n   */\n  static setPropsTransformer(transformer) {\n    externalPropsTransformer = transformer;\n  }\n\n  /**\n   * Gets the shared props transformer. This can be useful in\n   * cases when you wish to register a new transformer and\n   * preserve the existing one.\n   * @returns {*} The currently registered props transformer.\n   */\n  static getPropsTransformer() {\n    return externalPropsTransformer;\n  }\n\n  constructor(props) {\n    super(props);\n\n    this.captureNativeComponentRef = this.captureNativeComponentRef.bind(this);\n    this.state = {\n      transformedProps: this.createTransformedProps(props),\n    };\n  }\n\n  componentWillReceiveProps(nextProps) {\n    if (nextProps !== this.props) {\n      this.setState({\n        transformedProps: this.createTransformedProps(nextProps),\n      });\n    }\n  }\n\n  setNativeProps(nativeProps) {\n    this.nativeComponent.setNativeProps(nativeProps);\n  }\n\n  createTransformedProps(props) {\n    let transformedProps = { ...props };\n    const { source, defaultSource } = props;\n\n    // defaultSource is not supported on Android, so we manually\n    // reassign the defaultSource prop to source if source is not defined\n    if (Platform.OS === 'android' && !isValidSource(source)) {\n      // Image views are not rendered on Android if there is no image to display,\n      // so we fallback to a transparent image to be compatible with iOS\n      transformedProps.source = defaultSource || require('../assets/images/transparent.png');\n      // Fixes a bug with local image resizing on Android:\n      // https://github.com/facebook/react-native/issues/4598#issuecomment-162328501\n      transformedProps.style = { width: null, height: null, ...props.style };\n    }\n\n    transformedProps.ref = this.captureNativeComponentRef;\n    if (externalPropsTransformer) {\n      transformedProps = externalPropsTransformer(transformedProps);\n    }\n\n    return transformedProps;\n  }\n\n  captureNativeComponentRef(component) {\n    this.nativeComponent = component;\n  }\n\n  render() {\n    const { transformedProps } = this.state;\n\n    return (\n      <RNImage {...transformedProps} />\n    );\n  }\n}\n\nconst AnimatedImage = connectAnimation(Image);\nconst StyledImage = connectStyle('shoutem.ui.Image')(AnimatedImage);\nexport {\n  StyledImage as Image,\n};\n"]}]