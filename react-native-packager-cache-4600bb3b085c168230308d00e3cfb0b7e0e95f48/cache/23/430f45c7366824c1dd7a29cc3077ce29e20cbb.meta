["fc33ea08dcf9539c4b840058af6e75c49869b975","715eaaea78979816176bd9e8b1ac584c0876c2b1",["react","@shoutem/animation","lodash"],[149,244,290],{"version":3,"sources":["/home/ziddi/Desktop/Bhupesh/venders/node_modules/@shoutem/ui/components/ScrollView/ScrollDriverProvider.js"],"names":["_","ScrollDriverProvider","props","context","setupAnimationDriver","driverProvider","animationDriver","nextProps","nextContext","driver","useNativeDriver","primaryScrollView","assign","setAnimationDriver","children","only","childContextTypes","PropTypes","object","contextTypes","propTypes","node"],"mappings":";;;;;;;AAAA;;;;AACA;;AACA;;IAAYA,C;;IAOCC,oB,WAAAA,oB;;;AAeX,gCAAYC,KAAZ,EAAmBC,OAAnB,EAA4B;AAAA;;AAAA,wJACpBD,KADoB,EACbC,OADa;;AAE1B,UAAKC,oBAAL,CAA0BF,KAA1B,EAAiCC,OAAjC;AAF0B;AAG3B;;;;sCAEiB;AAChB,aAAO;AACLE,wBAAgB,IADX;AAELC,yBAAiB,KAAKA;AAFjB,OAAP;AAID;;;8CAEyBC,S,EAAWC,W,EAAa;AAChD,WAAKJ,oBAAL,CAA0BG,SAA1B,EAAqCC,WAArC;AACD;;;yCAEoBN,K,EAAOC,O,EAAS;AACnC,UAAID,MAAMO,MAAV,EAAkB;AAChB,aAAKH,eAAL,GAAuBJ,MAAMO,MAA7B;AACD,OAFD,MAEO,IAAIN,QAAQE,cAAZ,EAA4B;AACjC,aAAKC,eAAL,GAAuBH,QAAQG,eAA/B;AACD,OAFM,MAEA,IAAI,CAAC,KAAKA,eAAV,EAA2B;AAChC,aAAKA,eAAL,GAAuB,4BAAiB,EAAEI,iBAAiB,IAAnB,EAAjB,CAAvB;AACD;AACF;;;uCAEkBD,M,EAAQE,iB,EAAmB;AAC5C,UAAKF,UAAU,CAAC,KAAKH,eAAjB,IAAqCK,iBAAzC,EAA4D;AAC1DX,UAAEY,MAAF,CAAS,KAAKN,eAAd,EAA+BG,MAA/B;AAD0D,YAElDJ,cAFkD,GAE/B,KAAKF,OAF0B,CAElDE,cAFkD;;AAG1D,YAAIA,cAAJ,EAAoB;AAClBA,yBAAeQ,kBAAf,CAAkCJ,MAAlC,EAA0CE,iBAA1C;AACD;AACF;AACF;;;6BAEQ;AAAA,UACCG,QADD,GACc,KAAKZ,KADnB,CACCY,QADD;;AAEP,aAAOA,YAAY,gBAASC,IAAT,CAAc,KAAKb,KAAL,CAAWY,QAAzB,CAAnB;AACD;;;4BArDME,iB,GAAoB;AACzBX,kBAAgB,gBAAMY,SAAN,CAAgBC,MADP;AAEzBZ;AAFyB,C,SAKpBa,Y,GAAe;AACpBb;AADoB,C,SAIfc,S,GAAY;AACjBN,YAAU,gBAAMG,SAAN,CAAgBI,IADT;AAEjBZ;AAFiB,C","sourcesContent":["import React, { Component, Children } from 'react';\nimport { DriverShape, ScrollDriver } from '@shoutem/animation';\nimport * as _ from 'lodash';\n/**\n * Use this component if you want to share animation driver between unreachable siblings.\n * Just wrap their parent component with it. We use it to share an instance of ScrollDriver\n * between Screen and NavigationBar automatically. ScrollView from @shoutem/ui uses it to\n * register its driver.\n */\nexport class ScrollDriverProvider extends Component {\n  static childContextTypes = {\n    driverProvider: React.PropTypes.object,\n    animationDriver: DriverShape,\n  };\n\n  static contextTypes = {\n    animationDriver: DriverShape,\n  };\n\n  static propTypes = {\n    children: React.PropTypes.node,\n    driver: DriverShape,\n  };\n\n  constructor(props, context) {\n    super(props, context);\n    this.setupAnimationDriver(props, context);\n  }\n\n  getChildContext() {\n    return {\n      driverProvider: this,\n      animationDriver: this.animationDriver,\n    };\n  }\n\n  componentWillReceiveProps(nextProps, nextContext) {\n    this.setupAnimationDriver(nextProps, nextContext);\n  }\n\n  setupAnimationDriver(props, context) {\n    if (props.driver) {\n      this.animationDriver = props.driver;\n    } else if (context.driverProvider) {\n      this.animationDriver = context.animationDriver;\n    } else if (!this.animationDriver) {\n      this.animationDriver = new ScrollDriver({ useNativeDriver: true });\n    }\n  }\n\n  setAnimationDriver(driver, primaryScrollView) {\n    if ((driver || !this.animationDriver) || primaryScrollView) {\n      _.assign(this.animationDriver, driver);\n      const { driverProvider } = this.context;\n      if (driverProvider) {\n        driverProvider.setAnimationDriver(driver, primaryScrollView);\n      }\n    }\n  }\n\n  render() {\n    const { children } = this.props;\n    return children && Children.only(this.props.children);\n  }\n}\n"]}]