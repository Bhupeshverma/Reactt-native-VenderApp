Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = undefined;

var _qs = require('qs');

function getYouTubeVideoId(url) {
  var regExp = /^.*((youtu.be\/)|(v\/)|(\/u\/\w\/)|(embed\/)|(watch\??v?=?))([^#&\?]*).*/;
  var match = url.match(regExp);

  if (match && match[7].length === 11) {
    return match[7];
  }

  return false;
}

function getVimeoVideoId(url) {
  var regExp = /https?:\/\/(?:[\w]+\.)?vimeo.com\/(?:channels\/(?:\w+\/)?|groups\/([^\/]*)\/videos\/|album\/(\d+)\/video\/|video\/|)(\d+)(?:$|\/|\?)/;
  var match = url.match(regExp);

  if (match && match[3]) {
    return match[3];
  }

  return false;
}

function getYouTubeEmbedUrl(id, playerParams) {
  var serializedParams = (0, _qs.stringify)(playerParams);
  return 'https://www.youtube.com/embed/' + id + '?' + serializedParams;
}

function getVimeoEmbedUrl(id) {
  return 'https://player.vimeo.com/video/' + id + '?title=0&byline=0&portrait=0';
}

var VideoSourceReader = function () {
  function VideoSourceReader(source, playerParams) {
    babelHelpers.classCallCheck(this, VideoSourceReader);

    this.source = source;
    this.playerParams = playerParams;
    this.isYouTube = !!getYouTubeVideoId(source);
    this.isVimeo = !!getVimeoVideoId(source);
  }

  babelHelpers.createClass(VideoSourceReader, [{
    key: 'isEmbeddableVideo',
    value: function isEmbeddableVideo() {
      return this.isYouTube || this.isVimeo;
    }
  }, {
    key: 'getUrl',
    value: function getUrl() {
      if (this.isYouTube) {
        return getYouTubeEmbedUrl(getYouTubeVideoId(this.source), this.playerParams);
      } else if (this.isVimeo) {
        return getVimeoEmbedUrl(getVimeoVideoId(this.source));
      }

      return this.source;
    }
  }]);
  return VideoSourceReader;
}();

exports.default = VideoSourceReader;