["3ef22ea18ab013b2969fd73a429266a5285421ed","d5b8d18cae5528010b3f08f9102cd866516aab2b",["react","react-native","./animated/Circle"],[137,234,274],{"version":3,"sources":["/home/ziddi/Desktop/Bhupesh/venders/node_modules/react-native-loader/src/Bubbles.js"],"names":["Surface","Bubbles","state","circles","Value","timers","forEach","val","index","timer","setTimeout","animate","push","clearTimeout","unmounted","sequence","timing","toValue","duration","start","props","size","spaceBetween","color","scale","offset","x","y","width","height","renderBubble","propTypes","number","string","defaultProps"],"mappings":";;;;;;;AAAA;;;;AACA;;AAGA;;;;IAFQA,O,oBAAAA,O;IAIaC,O;;;;;;;;;;;;;;oMAanBC,K,GAAQ;AACNC,eAAS,CACP,IAAI,sBAASC,KAAb,CAAmB,CAAnB,CADO,EAEP,IAAI,sBAASA,KAAb,CAAmB,CAAnB,CAFO,EAGP,IAAI,sBAASA,KAAb,CAAmB,CAAnB,CAHO;AADH,K,QAuBRC,M,GAAS,E;;;;;wCAfW;AAAA;;AAClB,WAAKH,KAAL,CAAWC,OAAX,CAAmBG,OAAnB,CAA2B,UAACC,GAAD,EAAMC,KAAN,EAAgB;AACzC,YAAMC,QAAQC,WAAW;AAAA,iBAAM,OAAKC,OAAL,CAAaH,KAAb,CAAN;AAAA,SAAX,EAAsCA,QAAQ,GAA9C,CAAd;AACA,eAAKH,MAAL,CAAYO,IAAZ,CAAiBH,KAAjB;AACD,OAHD;AAID;;;2CAEsB;AACrB,WAAKJ,MAAL,CAAYC,OAAZ,CAAoB,UAACG,KAAD,EAAW;AAC7BI,qBAAaJ,KAAb;AACD,OAFD;;AAIA,WAAKK,SAAL,GAAiB,IAAjB;AACD;;;4BAION,K,EAAO;AAAA;;AACb,4BACGO,QADH,CACY,CACR,sBAASC,MAAT,CAAgB,KAAKd,KAAL,CAAWC,OAAX,CAAmBK,KAAnB,CAAhB,EAA2C;AACzCS,iBAAS,CADgC;AAEzCC,kBAAU;AAF+B,OAA3C,CADQ,EAKR,sBAASF,MAAT,CAAgB,KAAKd,KAAL,CAAWC,OAAX,CAAmBK,KAAnB,CAAhB,EAA2C;AACzCS,iBAAS,CADgC;AAEzCC,kBAAU;AAF+B,OAA3C,CALQ,CADZ,EAWGC,KAXH,CAWS,YAAM;AACX,YAAI,CAAC,OAAKL,SAAV,EAAqB;AACnB,iBAAKH,OAAL,CAAaH,KAAb;AACD;AACF,OAfH;AAgBD;;;iCAEYA,K,EAAO;AAAA,mBACoB,KAAKY,KADzB;AAAA,UACVC,IADU,UACVA,IADU;AAAA,UACJC,YADI,UACJA,YADI;AAAA,UACUC,KADV,UACUA,KADV;;AAElB,UAAMC,QAAQ,KAAKtB,KAAL,CAAWC,OAAX,CAAmBK,KAAnB,CAAd;AACA,UAAMiB,SAAS;AACbC,WAAGL,OAAOb,SAASa,OAAO,CAAP,GAAWC,YAApB,CADG;AAEbK,WAAGN;AAFU,OAAf;;AAKA,aAAQ;AACN,cAAME,KADA;AAEN,gBAAQF,IAFF;AAGN,eAAOG;AAHD,SAIFC,MAJE,EAAR;AAMD;;;6BAEQ;AAAA,oBACwB,KAAKL,KAD7B;AAAA,UACCC,IADD,WACCA,IADD;AAAA,UACOC,YADP,WACOA,YADP;;AAEP,UAAMM,QAAQP,OAAO,CAAP,GAAWC,eAAe,CAAxC;AACA,UAAMO,SAASR,OAAO,CAAtB;;AAEA,aAAQ;AAAC,eAAD;AAAA,UAAS,OAAOO,KAAhB,EAAuB,QAAQC,MAA/B;AACL,aAAKC,YAAL,CAAkB,CAAlB,CADK;AAEL,aAAKA,YAAL,CAAkB,CAAlB,CAFK;AAGL,aAAKA,YAAL,CAAkB,CAAlB;AAHK,OAAR;AAKD;;;4BAlFMC,S,GAAY;AACjBV,QAAM,iBAAUW,MADC;AAEjBT,SAAO,iBAAUU,MAFA;AAGjBX,gBAAc,iBAAUU;AAHP,C,SAMZE,Y,GAAe;AACpBZ,gBAAc,CADM;AAEpBD,QAAM,EAFc;AAGpBE,SAAO;AAHa,C;kBAPHtB,O","sourcesContent":["import React, { Component, PropTypes } from 'react';\nimport { Animated, ART } from 'react-native';\nconst { Surface } = ART;\n\nimport Circle from './animated/Circle';\n\nexport default class Bubbles extends Component {\n  static propTypes = {\n    size: PropTypes.number,\n    color: PropTypes.string,\n    spaceBetween: PropTypes.number\n  };\n\n  static defaultProps = {\n    spaceBetween: 6,\n    size: 11,\n    color: '#000'\n  };\n\n  state = {\n    circles: [\n      new Animated.Value(0),\n      new Animated.Value(0),\n      new Animated.Value(0)\n    ]\n  };\n\n  componentDidMount() {\n    this.state.circles.forEach((val, index) => {\n      const timer = setTimeout(() => this.animate(index), index * 300);\n      this.timers.push(timer);\n    });\n  }\n\n  componentWillUnmount() {\n    this.timers.forEach((timer) => {\n      clearTimeout(timer);\n    });\n\n    this.unmounted = true;\n  }\n\n  timers = [];\n\n  animate(index) {\n    Animated\n      .sequence([\n        Animated.timing(this.state.circles[index], {\n          toValue: 1,\n          duration: 600\n        }),\n        Animated.timing(this.state.circles[index], {\n          toValue: 0,\n          duration: 600\n        })\n      ])\n      .start(() => {\n        if (!this.unmounted) {\n          this.animate(index);\n        }\n      });\n  }\n\n  renderBubble(index) {\n    const { size, spaceBetween, color } = this.props;\n    const scale = this.state.circles[index];\n    const offset = {\n      x: size + index * (size * 2 + spaceBetween),\n      y: size\n    };\n\n    return (<Circle\n      fill={color}\n      radius={size}\n      scale={scale}\n      {...offset}\n    />);\n  }\n\n  render() {\n    const { size, spaceBetween } = this.props;\n    const width = size * 6 + spaceBetween * 2;\n    const height = size * 2;\n\n    return (<Surface width={width} height={height}>\n      {this.renderBubble(0)}\n      {this.renderBubble(1)}\n      {this.renderBubble(2)}\n    </Surface>);\n  }\n}\n"]}]