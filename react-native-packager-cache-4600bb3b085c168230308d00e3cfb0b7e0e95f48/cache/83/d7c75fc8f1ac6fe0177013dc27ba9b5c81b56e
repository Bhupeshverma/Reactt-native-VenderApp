Object.defineProperty(exports,"__esModule",{value:true});

var _pathToRegexp=require("path-to-regexp");var _pathToRegexp2=babelHelpers.interopRequireDefault(_pathToRegexp);

var _NavigationActions=require("../NavigationActions");var _NavigationActions2=babelHelpers.interopRequireDefault(_NavigationActions);
var _createConfigGetter=require("./createConfigGetter");var _createConfigGetter2=babelHelpers.interopRequireDefault(_createConfigGetter);
var _getScreenForRouteName=require("./getScreenForRouteName");var _getScreenForRouteName2=babelHelpers.interopRequireDefault(_getScreenForRouteName);
var _StateUtils=require("../StateUtils");var _StateUtils2=babelHelpers.interopRequireDefault(_StateUtils);
var _validateRouteConfigMap=require("./validateRouteConfigMap");var _validateRouteConfigMap2=babelHelpers.interopRequireDefault(_validateRouteConfigMap);
var _getScreenConfigDeprecated=require("./getScreenConfigDeprecated");var _getScreenConfigDeprecated2=babelHelpers.interopRequireDefault(_getScreenConfigDeprecated);














var uniqueBaseId="id-"+Date.now();
var uuidCount=0;
function _getUuid(){
return uniqueBaseId+"-"+uuidCount++;
}exports.default=

function(
routeConfigs)

{var stackConfig=arguments.length>1&&arguments[1]!==undefined?arguments[1]:{};
// Fail fast on invalid route definitions
(0,_validateRouteConfigMap2.default)(routeConfigs);

var childRouters={};
var routeNames=Object.keys(routeConfigs);

routeNames.forEach(function(routeName){
var screen=(0,_getScreenForRouteName2.default)(routeConfigs,routeName);
if(screen&&screen.router){
// If it has a router it's a navigator.
childRouters[routeName]=screen.router;
}else{
// If it doesn't have router it's an ordinary React component.
childRouters[routeName]=null;
}
});var

initialRouteParams=stackConfig.initialRouteParams;

var initialRouteName=stackConfig.initialRouteName||routeNames[0];

var initialChildRouter=childRouters[initialRouteName];
var paths=stackConfig.paths||{};

routeNames.forEach(function(routeName){
var pathPattern=paths[routeName]||routeConfigs[routeName].path;
var matchExact=!!pathPattern&&!childRouters[routeName];
if(typeof pathPattern!=='string'){
pathPattern=routeName;
}
var keys=[];
var re=(0,_pathToRegexp2.default)(pathPattern,keys);
if(!matchExact){
var wildcardRe=(0,_pathToRegexp2.default)(pathPattern+"/*",keys);
re=new RegExp("(?:"+re.source+")|(?:"+wildcardRe.source+")");
}
/* $FlowFixMe */
paths[routeName]={re:re,keys:keys,toPath:_pathToRegexp2.default.compile(pathPattern)};
});

return{
getComponentForState:function getComponentForState(state){
var activeChildRoute=state.routes[state.index];var
routeName=activeChildRoute.routeName;
if(childRouters[routeName]){
return childRouters[routeName].getComponentForState(activeChildRoute);
}
return(0,_getScreenForRouteName2.default)(routeConfigs,routeName);
},

getComponentForRouteName:function getComponentForRouteName(routeName){
return(0,_getScreenForRouteName2.default)(routeConfigs,routeName);
},

getStateForAction:function getStateForAction(
passedAction,
state)
{
var action=_NavigationActions2.default.mapDeprecatedActionAndWarn(passedAction);

// Set up the initial state if needed
if(!state){
var route={};
if(
action.type===_NavigationActions2.default.NAVIGATE&&
childRouters[action.routeName]!==undefined)
{
return{
index:0,
routes:[babelHelpers.extends({},

action,{
type:undefined,
key:"Init-"+_getUuid()})]};



}
if(initialChildRouter){
route=initialChildRouter.getStateForAction(
_NavigationActions2.default.navigate({
routeName:initialRouteName,
params:initialRouteParams}));


}
var params=(route.params||
action.params||
initialRouteParams)&&babelHelpers.extends({},
route.params||{},
action.params||{},
initialRouteParams||{});

route=babelHelpers.extends({},
route,{
routeName:initialRouteName,
key:"Init-"+_getUuid()},
params?{params:params}:{});

// eslint-disable-next-line no-param-reassign
state={
index:0,
routes:[route]};

}

// Check if a child scene wants to handle the action as long as it is not a reset to the root stack
if(action.type!==_NavigationActions2.default.RESET||action.key!==null){
var keyIndex=action.key?
_StateUtils2.default.indexOf(state,action.key):
-1;
var childIndex=keyIndex>=0?keyIndex:state.index;
var childRoute=state.routes[childIndex];
var childRouter=childRouters[childRoute.routeName];
if(childRouter){
var _route=childRouter.getStateForAction(action,childRoute);
if(_route===null){
return state;
}
if(_route&&_route!==childRoute){
return _StateUtils2.default.replaceAt(state,childRoute.key,_route);
}
}
}

// Handle explicit push navigation action
if(
action.type===_NavigationActions2.default.NAVIGATE&&
childRouters[action.routeName]!==undefined)
{
var _childRouter=childRouters[action.routeName];
var _route2=void 0;
if(_childRouter){
var childAction=
action.action||_NavigationActions2.default.init({params:action.params});
_route2=babelHelpers.extends({
params:action.params},
_childRouter.getStateForAction(childAction),{
key:_getUuid(),
routeName:action.routeName});

}else{
_route2={
params:action.params,
key:_getUuid(),
routeName:action.routeName};

}
return _StateUtils2.default.push(state,_route2);
}

// Handle navigation to other child routers that are not yet pushed
if(action.type===_NavigationActions2.default.NAVIGATE){
var childRouterNames=Object.keys(childRouters);
for(var i=0;i<childRouterNames.length;i++){
var childRouterName=childRouterNames[i];
var _childRouter2=childRouters[childRouterName];
if(_childRouter2){
// For each child router, start with a blank state
var initChildRoute=_childRouter2.getStateForAction(
_NavigationActions2.default.init());

// Then check to see if the router handles our navigate action
var navigatedChildRoute=_childRouter2.getStateForAction(
action,
initChildRoute);

var routeToPush=null;
if(navigatedChildRoute===null){
// Push the route if the router has 'handled' the action and returned null
routeToPush=initChildRoute;
}else if(navigatedChildRoute!==initChildRoute){
// Push the route if the state has changed in response to this navigation
routeToPush=navigatedChildRoute;
}
if(routeToPush){
return _StateUtils2.default.push(state,babelHelpers.extends({},
routeToPush,{
key:_getUuid(),
routeName:childRouterName}));

}
}
}
}

if(action.type===_NavigationActions2.default.SET_PARAMS){
var lastRoute=state.routes.find(
/* $FlowFixMe */
function(route){return route.key===action.key;});

if(lastRoute){
var _params=babelHelpers.extends({},
lastRoute.params,
action.params);

var routes=[].concat(babelHelpers.toConsumableArray(state.routes));
routes[state.routes.indexOf(lastRoute)]=babelHelpers.extends({},
lastRoute,{
params:_params});

return babelHelpers.extends({},
state,{
routes:routes});

}
}

if(action.type===_NavigationActions2.default.RESET){
var resetAction=action;

return babelHelpers.extends({},
state,{
routes:resetAction.actions.map(
function(childAction){
var router=childRouters[childAction.routeName];
if(router){
return babelHelpers.extends({},
childAction,
router.getStateForAction(childAction),{
routeName:childAction.routeName,
key:_getUuid()});

}
var route=babelHelpers.extends({},
childAction,{
key:_getUuid()});

delete route.type;
return route;
}),

index:action.index});

}

if(action.type===_NavigationActions2.default.BACK){
var backRouteIndex=null;
if(action.key){
var backRoute=state.routes.find(
/* $FlowFixMe */
function(route){return route.key===action.key;});

/* $FlowFixMe */
backRouteIndex=state.routes.indexOf(backRoute);
}
if(backRouteIndex==null){
return _StateUtils2.default.pop(state);
}
if(backRouteIndex>0){
return babelHelpers.extends({},
state,{
routes:state.routes.slice(0,backRouteIndex),
index:backRouteIndex-1});

}
}
return state;
},

getPathAndParamsForState:function getPathAndParamsForState(
state)
{
var route=state.routes[state.index];
var routeName=route.routeName;
var screen=(0,_getScreenForRouteName2.default)(routeConfigs,routeName);
/* $FlowFixMe */
var subPath=paths[routeName].toPath(route.params);
var path=subPath;
var params=route.params;
if(screen&&screen.router){
// If it has a router it's a navigator.
// If it doesn't have router it's an ordinary React component.
var child=screen.router.getPathAndParamsForState(route);
path=subPath?subPath+"/"+child.path:child.path;
params=child.params?babelHelpers.extends({},params,child.params):params;
}
return{
path:path,
params:params};

},

getActionForPathAndParams:function getActionForPathAndParams(pathToResolve){
// If the path is empty (null or empty string)
// just return the initial route action
if(!pathToResolve){
return _NavigationActions2.default.navigate({
routeName:initialRouteName});

}var _pathToResolve$split=

pathToResolve.split('?'),_pathToResolve$split2=babelHelpers.slicedToArray(_pathToResolve$split,2),pathNameToResolve=_pathToResolve$split2[0],queryString=_pathToResolve$split2[1];

// Attempt to match `pathNameToResolve` with a route in this router's
// routeConfigs
var matchedRouteName=void 0;
var pathMatch=void 0;
var pathMatchKeys=void 0;

// eslint-disable-next-line no-restricted-syntax
for(var _iterator=Object.entries(paths),_isArray=Array.isArray(_iterator),_i=0,_iterator=_isArray?_iterator:_iterator[typeof Symbol==="function"?Symbol.iterator:"@@iterator"]();;){var _ref3;if(_isArray){if(_i>=_iterator.length)break;_ref3=_iterator[_i++];}else{_i=_iterator.next();if(_i.done)break;_ref3=_i.value;}var _ref=_ref3;var _ref2=babelHelpers.slicedToArray(_ref,2);var routeName=_ref2[0];var path=_ref2[1];
/* $FlowFixMe */var
re=path.re,keys=path.keys;
pathMatch=re.exec(pathNameToResolve);
if(pathMatch&&pathMatch.length){
pathMatchKeys=keys;
matchedRouteName=routeName;
break;
}
}

// We didn't match -- return null
if(!matchedRouteName){
return null;
}

// Determine nested actions:
// If our matched route for this router is a child router,
// get the action for the path AFTER the matched path for this
// router
var nestedAction=void 0;
if(childRouters[matchedRouteName]){
nestedAction=childRouters[matchedRouteName].getActionForPathAndParams(
/* $FlowFixMe */
pathMatch.slice(pathMatchKeys.length).join('/'));

}

// reduce the items of the query string. any query params may
// be overridden by path params
var queryParams=(queryString||'').
split('&').
reduce(function(result,item){
if(item!==''){
var nextResult=result||{};var _item$split=
item.split('='),_item$split2=babelHelpers.slicedToArray(_item$split,2),key=_item$split2[0],value=_item$split2[1];
nextResult[key]=value;
return nextResult;
}
return result;
},null);

// reduce the matched pieces of the path into the params
// of the route. `params` is null if there are no params.
/* $FlowFixMe */
var params=pathMatch.
slice(1).
reduce(function(result,matchResult,i){
var key=pathMatchKeys[i];
if(key.asterisk||!key){
return result;
}
var nextResult=result||{};
var paramName=key.name;
nextResult[paramName]=matchResult;
return nextResult;
},queryParams);

return _NavigationActions2.default.navigate(babelHelpers.extends({
routeName:matchedRouteName},
params?{params:params}:{},
nestedAction?{action:nestedAction}:{}));

},

getScreenOptions:(0,_createConfigGetter2.default)(
routeConfigs,
stackConfig.navigationOptions),


getScreenConfig:_getScreenConfigDeprecated2.default};

};