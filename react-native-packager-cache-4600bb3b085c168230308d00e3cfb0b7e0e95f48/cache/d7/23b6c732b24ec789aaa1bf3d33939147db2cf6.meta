["a5e416c48ce5b7bcc33a909a2621f91df82ddd2b","a9f93e664960899c570eed83b015cebc3c970524",["react","lodash","@shoutem/theme","../../index","./DropDownModal"],[141,233,327,368,414],{"version":3,"sources":["/home/ziddi/Desktop/Bhupesh/venders/node_modules/@shoutem/ui/components/DropDownMenu/DropDownMenu.js"],"names":["modalSpecificProps","dropDownMenuPropTypes","omit","propTypes","DropDownMenu","props","state","collapsed","collapse","bind","close","options","selectedOption","indexOf","console","warn","JSON","stringify","setState","style","titleProperty","getSelectedOption","horizontalContainer","button","renderSelectedOption","size","StyledDropDownMenu"],"mappings":";;;;;;;AAAA;;;;AAGA;;;;AACA;;AACA;;AAOA;;AAEA,IAAMA,qBAAqB,CAAC,SAAD,EAAY,SAAZ,CAA3B;AACA,IAAMC,iDAA6B,iBAAEC,IAAF,CAAO,6BAAcC,SAArB,EAAgCH,kBAAhC,CAA7B,CAAN;;IAEMI,Y;;;AAQJ,wBAAYC,KAAZ,EAAmB;AAAA;;AAAA,wIACXA,KADW;;AAEjB,UAAKC,KAAL,GAAa;AACXC,iBAAW;AADA,KAAb;AAGA,UAAKC,QAAL,GAAgB,MAAKA,QAAL,CAAcC,IAAd,OAAhB;AACA,UAAKC,KAAL,GAAa,MAAKA,KAAL,CAAWD,IAAX,OAAb;AANiB;AAOlB;;;;wCAEmB;AAAA,mBACkB,KAAKJ,KADvB;AAAA,UACVM,OADU,UACVA,OADU;AAAA,UACDC,cADC,UACDA,cADC;;AAElB,UAAI,iBAAEC,OAAF,CAAUF,OAAV,EAAmBC,cAAnB,MAAuC,CAAC,CAA5C,EAA+C;AAC7CE,gBAAQC,IAAR,CACE,8BAA8BC,KAAKC,SAAL,CAAeL,cAAf,CAA9B,UACA,8DADA,GAEA,qFAHF;AAKA;AACD;AACD,aAAOA,cAAP;AACD;;;+BAEU;AACT,WAAKM,QAAL,CAAc,EAAEX,WAAW,IAAb,EAAd;AACD;;;4BAEO;AACN,WAAKW,QAAL,CAAc,EAAEX,WAAW,KAAb,EAAd;AACD;;;2CAEsB;AAAA,oBACY,KAAKF,KADjB;AAAA,UACbc,KADa,WACbA,KADa;AAAA,UACNC,aADM,WACNA,aADM;;;AAGrB,UAAMR,iBAAiB,KAAKS,iBAAL,EAAvB;AACA,aAAOT,iBACL;AAAA;AAAA,UAAM,OAAOO,MAAMG,mBAAnB;AACE;AAAA;AAAA,YAAQ,SAAS,KAAKd,QAAtB,EAAgC,OAAOW,MAAMP,cAA7C;AACE;AAAA;AAAA;AAAOA,2BAAeQ,aAAf;AAAP,WADF;AAEE,uDAAM,MAAK,WAAX;AAFF;AADF,OADK,GAOH,IAPJ;AAQD;;;6BAEQ;AAAA,UACCb,SADD,GACe,KAAKD,KADpB,CACCC,SADD;AAAA,UAECI,OAFD,GAEa,KAAKN,KAFlB,CAECM,OAFD;;;AAIP,UAAMY,SAAS,KAAKC,oBAAL,EAAf;AACA,UAAI,iBAAEC,IAAF,CAAOd,OAAP,MAAoB,CAApB,IAAyB,CAACY,MAA9B,EAAsC;AACpC,eAAO,IAAP;AACD;;AAED,aACE;AAAA;AAAA,UAAM,oCAAN;AACGA,cADH;AAEE,6FACM,iBAAErB,IAAF,CAAO,KAAKG,KAAZ,EAAmB,OAAnB,CADN;AAEE,mBAASE,SAFX;AAGE,mBAAS,KAAKG;AAHhB;AAFF,OADF;AAUD;;;4BAnEMP,S,4BACFF,qB;;;AAqEP,IAAMyB,qBAAqB,yBAAa,yBAAb,EAAwCtB,YAAxC,CAA3B;;QAGwBA,Y,GAAtBsB,kB","sourcesContent":["import React, {\n  Component,\n} from 'react';\nimport _ from 'lodash';\nimport { connectStyle } from '@shoutem/theme';\nimport {\n  Button,\n  Icon,\n  Text,\n  View,\n} from '../../index';\n\nimport { DropDownModal } from './DropDownModal';\n\nconst modalSpecificProps = ['visible', 'onClose'];\nconst dropDownMenuPropTypes = { ..._.omit(DropDownModal.propTypes, modalSpecificProps) };\n\nclass DropDownMenu extends Component {\n  /**\n  * @see DropDownModal.propTypes\n  */\n  static propTypes = {\n    ...dropDownMenuPropTypes,\n  };\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      collapsed: false,\n    };\n    this.collapse = this.collapse.bind(this);\n    this.close = this.close.bind(this);\n  }\n\n  getSelectedOption() {\n    const { options, selectedOption } = this.props;\n    if (_.indexOf(options, selectedOption) === -1) {\n      console.warn(\n        `Invalid \\`selectedOption\\` ${JSON.stringify(selectedOption)}, ` +\n        'DropDownMenu `selectedOption` must be a member of `options`.' +\n        'Check that you are using the same reference in both `options` and `selectedOption`.'\n      );\n      return;\n    }\n    return selectedOption;\n  }\n\n  collapse() {\n    this.setState({ collapsed: true });\n  }\n\n  close() {\n    this.setState({ collapsed: false });\n  }\n\n  renderSelectedOption() {\n    const { style, titleProperty } = this.props;\n\n    const selectedOption = this.getSelectedOption();\n    return selectedOption ? (\n      <View style={style.horizontalContainer}>\n        <Button onPress={this.collapse} style={style.selectedOption}>\n          <Text>{selectedOption[titleProperty]}</Text>\n          <Icon name=\"drop-down\" />\n        </Button>\n      </View>\n    ) : null;\n  }\n\n  render() {\n    const { collapsed } = this.state;\n    const { options } = this.props;\n\n    const button = this.renderSelectedOption();\n    if (_.size(options) === 0 || !button) {\n      return null;\n    }\n\n    return (\n      <View renderToHardwareTextureAndroid>\n        {button}\n        <DropDownModal\n          {..._.omit(this.props, 'style')}\n          visible={collapsed}\n          onClose={this.close}\n        />\n      </View>\n    );\n  }\n}\n\nconst StyledDropDownMenu = connectStyle('shoutem.ui.DropDownMenu')(DropDownMenu);\n\nexport {\n  StyledDropDownMenu as DropDownMenu,\n};\n"]}]