["2fc12bc1ecabc6d8ab4b5f27ba3958672bd10f6d","aa5320acc0188552a8dbdb8f1321d9b1bc994937",["react","react-native","react-timer-mixin","./LightboxOverlay"],[36,173,330,383],{"version":3,"sources":["/home/ziddi/Desktop/Bhupesh/venders/node_modules/react-native-lightbox/Lightbox.js"],"names":["React","require","Children","cloneElement","PropTypes","Animated","TouchableHighlight","View","TimerMixin","LightboxOverlay","Lightbox","createClass","mixins","propTypes","activeProps","object","renderHeader","func","renderContent","underlayColor","string","backgroundColor","onOpen","onClose","springConfig","shape","tension","number","friction","useNativeDriver","bool","animateOpening","animateClosing","swipeToDismiss","pinchToZoom","getDefaultProps","getInitialState","isOpen","origin","x","y","width","height","layoutOpacity","Value","getContent","props","only","children","getOverlayProps","state","open","_root","measureInWindow","setState","navigator","route","component","passProps","routes","getCurrentRoutes","push","immediatelyResetRouteStack","setTimeout","setValue","pop","render","style","opacity","module","exports"],"mappings":"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","sourcesContent":["/**\n * @providesModule Lightbox\n */\n'use strict';\n\nvar React = require('react');\nvar {\n  Children,\n  cloneElement,\n  PropTypes,\n} = React;\nvar {\n  Animated,\n  TouchableHighlight,\n  View,\n} = require('react-native');\nvar TimerMixin = require('react-timer-mixin');\n\nvar LightboxOverlay = require('./LightboxOverlay');\n\nvar Lightbox = React.createClass({\n  mixins: [TimerMixin],\n\n  propTypes: {\n    activeProps: PropTypes.object,\n    renderHeader: PropTypes.func,\n    renderContent: PropTypes.func,\n    underlayColor: PropTypes.string,\n    backgroundColor: PropTypes.string,\n    onOpen: PropTypes.func,\n    onClose: PropTypes.func,\n    springConfig: PropTypes.shape({\n      tension: PropTypes.number,\n      friction: PropTypes.number,\n      useNativeDriver: PropTypes.bool,\n    }),\n    animateOpening: PropTypes.bool,\n    animateClosing: PropTypes.bool,\n    swipeToDismiss: PropTypes.bool,\n    pinchToZoom: PropTypes.bool,\n  },\n\n  getDefaultProps: function() {\n    return {\n      swipeToDismiss: true,\n      pinchToZoom: true,\n      onOpen: () => {},\n      onClose: () => {},\n    };\n  },\n\n  getInitialState: function() {\n    return {\n      isOpen: false,\n      origin: {\n        x: 0,\n        y: 0,\n        width: 0,\n        height: 0,\n      },\n      layoutOpacity: new Animated.Value(1),\n    };\n  },\n\n  getContent: function() {\n    if(this.props.renderContent) {\n      return this.props.renderContent();\n    } else if(this.props.activeProps) {\n      return cloneElement(\n        Children.only(this.props.children),\n        this.props.activeProps\n      );\n    }\n    return this.props.children;\n  },\n\n  getOverlayProps: function() {\n    return {\n      isOpen: this.state.isOpen,\n      origin: this.state.origin,\n      renderHeader: this.props.renderHeader,\n      swipeToDismiss: this.props.swipeToDismiss,\n      pinchToZoom: this.props.pinchToZoom,\n      springConfig: this.props.springConfig,\n      animateOpening: this.props.animateOpening,\n      animateClosing: this.props.animateClosing,\n      backgroundColor: this.props.backgroundColor,\n      children: this.getContent(),\n      onClose: this.onClose,\n    };\n  },\n\n  open: function() {\n    this._root.measureInWindow((x, y, width, height) => {\n      this.props.onOpen();\n\n      this.setState({\n        isOpen: true,\n        origin: {\n          width,\n          height,\n          x,\n          y,\n        },\n      }, () => {\n        if(this.props.navigator) {\n          var route = {\n            component: LightboxOverlay,\n            passProps: this.getOverlayProps(),\n          };\n          var routes = this.props.navigator.getCurrentRoutes();\n          routes.push(route);\n          this.props.navigator.immediatelyResetRouteStack(routes);\n        }\n        this.setTimeout(() => {\n          this.state.layoutOpacity.setValue(0);\n        });\n      });\n    });\n  },\n\n  onClose: function() {\n    this.state.layoutOpacity.setValue(1);\n    this.setState({\n      isOpen: false,\n    }, this.props.onClose);\n    if(this.props.navigator) {\n      var routes = this.props.navigator.getCurrentRoutes();\n      routes.pop();\n      this.props.navigator.immediatelyResetRouteStack(routes);\n    }\n  },\n\n  render: function() {\n    // measure will not return anything useful if we don't attach an onLayout handler on android\n    return (\n      <View\n        ref={component => this._root = component}\n        style={this.props.style}\n        onLayout={() => {}}\n      >\n        <Animated.View style={{opacity: this.state.layoutOpacity}}>\n          <TouchableHighlight\n            underlayColor={this.props.underlayColor}\n            onPress={this.open}\n          >\n            {this.props.children}\n          </TouchableHighlight>\n        </Animated.View>\n        {this.props.navigator ? false : <LightboxOverlay {...this.getOverlayProps()} />}\n      </View>\n    );\n  }\n});\n\nmodule.exports = Lightbox;\n"]}]