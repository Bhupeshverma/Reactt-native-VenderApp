["68537fb6580d67a0e8b03989680faa4440eb322f","628da4765ea20217e993599aae7032b3157f9731",["immutable","react","prop-types","react-native","./Badge","./Layout","./StaticContainer","./Tab","./TabBar","./TabNavigatorItem","./config/ViewPropTypes"],[172,208,303,413,452,546,652,773,861,968,1102],{"version":3,"sources":["/home/ziddi/Desktop/Bhupesh/venders/node_modules/react-native-tab-navigator/TabNavigator.js"],"names":["TabNavigator","props","context","state","renderedSceneKeys","_updateRenderedSceneKeys","children","_renderTab","bind","nextProps","setState","item","index","key","oldSceneKeys","newSceneKeys","asMutable","Children","forEach","_getSceneKey","has","selected","add","asImmutable","style","tabBarStyle","tabBarShadowStyle","sceneStyle","scenes","sceneKey","scene","push","styles","container","map","icon","renderSelectedIcon","renderIcon","defaultIcon","cloneElement","defaultSelectedIcon","badge","renderBadge","badgeText","testID","title","allowFontScaling","titleStyle","defaultSelectedTitle","selectedTitleStyle","onPress","hidesTabTouch","tabStyle","Component","propTypes","shadowStyle","bool","SceneContainer","sceneContainer","hiddenSceneContainer","create","flex","position","top","left","right","bottom","paddingBottom","tabBarHeight","overflow","opacity","color","tintColor","Item"],"mappings":"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","sourcesContent":["'use strict';\n\nimport { Set } from 'immutable';\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport {\n  StyleSheet,\n  View,\n} from 'react-native';\n\nimport Badge from './Badge';\nimport Layout from './Layout';\nimport StaticContainer from './StaticContainer';\nimport Tab from './Tab';\nimport TabBar from './TabBar';\nimport TabNavigatorItem from './TabNavigatorItem';\nimport ViewPropTypes from './config/ViewPropTypes';\n\nexport default class TabNavigator extends React.Component {\n  static propTypes = {\n    ...ViewPropTypes,\n    sceneStyle: ViewPropTypes.style,\n    tabBarStyle: TabBar.propTypes.style,\n    tabBarShadowStyle: TabBar.propTypes.shadowStyle,\n    hidesTabTouch: PropTypes.bool\n  };\n\n  constructor(props, context) {\n    super(props, context);\n    this.state = {\n      renderedSceneKeys: this._updateRenderedSceneKeys(props.children),\n    };\n\n    this._renderTab = this._renderTab.bind(this);\n  }\n\n  componentWillReceiveProps(nextProps) {\n    let { renderedSceneKeys } = this.state;\n    this.setState({\n      renderedSceneKeys: this._updateRenderedSceneKeys(\n        nextProps.children,\n        renderedSceneKeys,\n      ),\n    });\n  }\n\n  _getSceneKey(item, index): string {\n    return `scene-${(item.key !== null) ? item.key : index}`;\n  }\n\n  _updateRenderedSceneKeys(children, oldSceneKeys = Set()): Set {\n    let newSceneKeys = Set().asMutable();\n    React.Children.forEach(children, (item, index) => {\n      if (item === null) {\n        return;\n      }\n      let key = this._getSceneKey(item, index);\n      if (oldSceneKeys.has(key) || item.props.selected) {\n        newSceneKeys.add(key);\n      }\n    });\n    return newSceneKeys.asImmutable();\n  }\n\n  render() {\n    let { style, children, tabBarStyle, tabBarShadowStyle, sceneStyle, ...props } = this.props;\n    let scenes = [];\n\n    React.Children.forEach(children, (item, index) => {\n      if (item === null) {\n        return;\n      }\n      let sceneKey = this._getSceneKey(item, index);\n      if (!this.state.renderedSceneKeys.has(sceneKey)) {\n        return;\n      }\n\n      let { selected } = item.props;\n      let scene =\n        <SceneContainer key={sceneKey} selected={selected} style={sceneStyle}>\n          {item}\n        </SceneContainer>;\n\n      scenes.push(scene);\n    });\n\n    return (\n      <View {...props} style={[styles.container, style]}>\n        {scenes}\n        <TabBar style={tabBarStyle} shadowStyle={tabBarShadowStyle}>\n          {React.Children.map(children, this._renderTab)}\n        </TabBar>\n      </View>\n    );\n  }\n\n  _renderTab(item) {\n    let icon;\n    if (item === null) {\n      return;\n    }\n    if (item.props.selected) {\n      if (item.props.renderSelectedIcon) {\n        icon = item.props.renderSelectedIcon();\n      } else if (item.props.renderIcon) {\n        let defaultIcon = item.props.renderIcon();\n        icon = React.cloneElement(defaultIcon, {\n          style: [defaultIcon.props.style, styles.defaultSelectedIcon],\n        });\n      }\n    } else if (item.props.renderIcon) {\n      icon = item.props.renderIcon();\n    }\n\n    let badge;\n    if (item.props.renderBadge) {\n      badge = item.props.renderBadge();\n    } else if (item.props.badgeText) {\n      badge = <Badge>{item.props.badgeText}</Badge>;\n    }\n\n    return (\n      <Tab\n        testID={item.props.testID}\n        title={item.props.title}\n        allowFontScaling={item.props.allowFontScaling}\n        titleStyle={[\n          item.props.titleStyle,\n          item.props.selected ? [\n            styles.defaultSelectedTitle,\n            item.props.selectedTitleStyle,\n          ] : null,\n        ]}\n        badge={badge}\n        onPress={item.props.onPress}\n        hidesTabTouch={this.props.hidesTabTouch}\n        style={item.props.tabStyle}>\n        {icon}\n      </Tab>\n    );\n  }\n}\n\nclass SceneContainer extends React.Component {\n  static propTypes = {\n    ...ViewPropTypes,\n    selected: PropTypes.bool,\n  };\n\n  render() {\n    let { selected, ...props } = this.props;\n    return (\n      <View\n        {...props}\n        pointerEvents={selected ? 'auto' : 'none'}\n        removeClippedSubviews={!selected}\n        style={[\n          styles.sceneContainer,\n          selected ? null : styles.hiddenSceneContainer,\n          props.style,\n        ]}>\n        <StaticContainer shouldUpdate={selected}>\n          {this.props.children}\n        </StaticContainer>\n      </View>\n    );\n  }\n}\n\nlet styles = StyleSheet.create({\n  container: {\n    flex: 1,\n  },\n  sceneContainer: {\n    position: 'absolute',\n    top: 0,\n    left: 0,\n    right: 0,\n    bottom: 0,\n    paddingBottom: Layout.tabBarHeight,\n  },\n  hiddenSceneContainer: {\n    overflow: 'hidden',\n    opacity: 0,\n  },\n  defaultSelectedTitle: {\n    color: 'rgb(0, 122, 255)',\n  },\n  defaultSelectedIcon: {\n    tintColor: 'rgb(0, 122, 255)',\n  },\n});\n\nTabNavigator.Item = TabNavigatorItem;\n"]}]