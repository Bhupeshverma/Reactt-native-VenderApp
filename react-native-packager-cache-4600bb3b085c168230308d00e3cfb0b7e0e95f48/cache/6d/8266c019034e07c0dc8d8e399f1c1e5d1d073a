

'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = create;

var _reactNative = require('react-native');

var _TouchHistoryMath = require('./TouchHistoryMath');

var _TouchHistoryMath2 = babelHelpers.interopRequireDefault(_TouchHistoryMath);

var _TouchDistanceMath = require('./TouchDistanceMath');

var _reactTimerMixin = require('react-timer-mixin');

var _reactTimerMixin2 = babelHelpers.interopRequireDefault(_reactTimerMixin);

var currentCentroidXOfTouchesChangedAfter = _TouchHistoryMath2.default.currentCentroidXOfTouchesChangedAfter;
var currentCentroidYOfTouchesChangedAfter = _TouchHistoryMath2.default.currentCentroidYOfTouchesChangedAfter;
var previousCentroidXOfTouchesChangedAfter = _TouchHistoryMath2.default.previousCentroidXOfTouchesChangedAfter;
var previousCentroidYOfTouchesChangedAfter = _TouchHistoryMath2.default.previousCentroidYOfTouchesChangedAfter;
var currentCentroidX = _TouchHistoryMath2.default.currentCentroidX;
var currentCentroidY = _TouchHistoryMath2.default.currentCentroidY;

var TAP_UP_TIME_THRESHOLD = 400;
var TAP_MOVE_THRESHOLD = 10;
var MOVE_THRESHOLD = 2;

var DEV = false;

function initializeGestureState(gestureState) {
  gestureState.moveX = 0;
  gestureState.moveY = 0;
  gestureState.x0 = 0;
  gestureState.y0 = 0;
  gestureState.dx = 0;
  gestureState.dy = 0;
  gestureState.vx = 0;
  gestureState.vy = 0;
  gestureState.numberActiveTouches = 0;

  gestureState._accountsForMovesUpTo = 0;

  gestureState.previousMoveX = 0;
  gestureState.previousMoveY = 0;
  gestureState.pinch = undefined;
  gestureState.previousPinch = undefined;
  gestureState.singleTapUp = false;
  gestureState.doubleTapUp = false;
  gestureState._singleTabFailed = false;
}

function updateGestureStateOnMove(gestureState, touchHistory, e) {
  var movedAfter = gestureState._accountsForMovesUpTo;
  var prevX = previousCentroidXOfTouchesChangedAfter(touchHistory, movedAfter);
  var x = currentCentroidXOfTouchesChangedAfter(touchHistory, movedAfter);
  var prevY = previousCentroidYOfTouchesChangedAfter(touchHistory, movedAfter);
  var y = currentCentroidYOfTouchesChangedAfter(touchHistory, movedAfter);
  var dx = x - prevX;
  var dy = y - prevY;

  gestureState.numberActiveTouches = touchHistory.numberActiveTouches;
  gestureState.moveX = x;
  gestureState.moveY = y;

  var dt = convertToMillisecIfNeeded(touchHistory.mostRecentTimeStamp - movedAfter);
  gestureState.vx = dx / dt;
  gestureState.vy = dy / dt;
  gestureState.dx += dx;
  gestureState.dy += dy;
  gestureState._accountsForMovesUpTo = touchHistory.mostRecentTimeStamp;

  gestureState.previousMoveX = prevX;
  gestureState.previousMoveY = prevY;
  gestureState.pinch = (0, _TouchDistanceMath.pinchDistance)(touchHistory, movedAfter, true);
  gestureState.previousPinch = (0, _TouchDistanceMath.pinchDistance)(touchHistory, movedAfter, false);
}

function clearInteractionHandle(interactionState) {
  if (interactionState.handle) {
    _reactNative.InteractionManager.clearInteractionHandle(interactionState.handle);
    interactionState.handle = null;
  }
}

function convertToMillisecIfNeeded(interval) {
  if (interval > 1000000) {
    return interval / 1000000;
  }
  return interval;
}

function cancelSingleTapConfirm(gestureState) {
  if (typeof gestureState._singleTapConfirmId !== 'undefined') {
    _reactTimerMixin2.default.clearTimeout(gestureState._singleTapConfirmId);
    gestureState._singleTapConfirmId = undefined;
  }
}

function create(config) {
  if (config.debug) {
    DEV = true;
  }

  var interactionState = {
    handle: null
  };
  var gestureState = {
    stateID: Math.random()
  };
  initializeGestureState(gestureState);

  var handlers = {
    onStartShouldSetResponder: function onStartShouldSetResponder(e) {
      DEV && console.log('onStartShouldSetResponder...');
      cancelSingleTapConfirm(gestureState);
      return config.onStartShouldSetResponder ? config.onStartShouldSetResponder(e, gestureState) : false;
    },
    onMoveShouldSetResponder: function onMoveShouldSetResponder(e) {
      DEV && console.log('onMoveShouldSetResponder...');

      return config.onMoveShouldSetResponder && effectiveMove(config, gestureState) ? config.onMoveShouldSetResponder(e, gestureState) : false;
    },
    onStartShouldSetResponderCapture: function onStartShouldSetResponderCapture(e) {
      DEV && console.log('onStartShouldSetResponderCapture...');
      cancelSingleTapConfirm(gestureState);

      if (e.nativeEvent.touches.length === 1) {
        initializeGestureState(gestureState);
      }
      gestureState.numberActiveTouches = e.touchHistory.numberActiveTouches;
      return config.onStartShouldSetResponderCapture ? config.onStartShouldSetResponderCapture(e, gestureState) : false;
    },

    onMoveShouldSetResponderCapture: function onMoveShouldSetResponderCapture(e) {
      DEV && console.log('onMoveShouldSetResponderCapture...');
      var touchHistory = e.touchHistory;

      if (gestureState._accountsForMovesUpTo === touchHistory.mostRecentTimeStamp) {
        return false;
      }
      updateGestureStateOnMove(gestureState, touchHistory, e);
      return config.onMoveShouldSetResponderCapture && effectiveMove(config, gestureState) ? config.onMoveShouldSetResponderCapture(e, gestureState) : false;
    },

    onResponderGrant: function onResponderGrant(e) {
      DEV && console.log('onResponderGrant...');
      cancelSingleTapConfirm(gestureState);
      if (!interactionState.handle) {
        interactionState.handle = _reactNative.InteractionManager.createInteractionHandle();
      }
      gestureState._grantTimestamp = e.touchHistory.mostRecentTimeStamp;
      gestureState.x0 = currentCentroidX(e.touchHistory);
      gestureState.y0 = currentCentroidY(e.touchHistory);
      gestureState.dx = 0;
      gestureState.dy = 0;
      if (config.onResponderGrant) {
        config.onResponderGrant(e, gestureState);
      }

      return config.onShouldBlockNativeResponder === undefined ? true : config.onShouldBlockNativeResponder();
    },

    onResponderReject: function onResponderReject(e) {
      DEV && console.log('onResponderReject...');
      clearInteractionHandle(interactionState);
      config.onResponderReject && config.onResponderReject(e, gestureState);
    },

    onResponderRelease: function onResponderRelease(e) {
      if (gestureState.singleTapUp) {
        if (gestureState._lastSingleTapUp) {
          if (convertToMillisecIfNeeded(e.touchHistory.mostRecentTimeStamp - gestureState._lastReleaseTimestamp) < TAP_UP_TIME_THRESHOLD) {
            gestureState.doubleTapUp = true;
          }
        }
        gestureState._lastSingleTapUp = true;

        if (!gestureState.doubleTapUp) {
          var snapshot = babelHelpers.extends({}, gestureState);
          var timeoutId = _reactTimerMixin2.default.setTimeout(function () {
            if (gestureState._singleTapConfirmId === timeoutId) {
              DEV && console.log('onResponderSingleTapConfirmed...');
              config.onResponderSingleTapConfirmed && config.onResponderSingleTapConfirmed(e, snapshot);
            }
          }, TAP_UP_TIME_THRESHOLD);
          gestureState._singleTapConfirmId = timeoutId;
        }
      }
      gestureState._lastReleaseTimestamp = e.touchHistory.mostRecentTimeStamp;

      DEV && console.log('onResponderRelease...' + JSON.stringify(gestureState));
      clearInteractionHandle(interactionState);
      config.onResponderRelease && config.onResponderRelease(e, gestureState);
      initializeGestureState(gestureState);
    },

    onResponderStart: function onResponderStart(e) {
      DEV && console.log('onResponderStart...');
      var touchHistory = e.touchHistory;
      gestureState.numberActiveTouches = touchHistory.numberActiveTouches;
      if (config.onResponderStart) {
        config.onResponderStart(e, gestureState);
      }
    },

    onResponderMove: function onResponderMove(e) {
      var touchHistory = e.touchHistory;

      if (gestureState._accountsForMovesUpTo === touchHistory.mostRecentTimeStamp) {
        return;
      }

      updateGestureStateOnMove(gestureState, touchHistory, e);

      DEV && console.log('onResponderMove...' + JSON.stringify(gestureState));
      if (config.onResponderMove && effectiveMove(config, gestureState)) {
        config.onResponderMove(e, gestureState);
      }
    },

    onResponderEnd: function onResponderEnd(e) {
      var touchHistory = e.touchHistory;
      gestureState.numberActiveTouches = touchHistory.numberActiveTouches;

      if (touchHistory.numberActiveTouches > 0 || convertToMillisecIfNeeded(touchHistory.mostRecentTimeStamp - gestureState._grantTimestamp) > TAP_UP_TIME_THRESHOLD || Math.abs(gestureState.dx) >= TAP_MOVE_THRESHOLD || Math.abs(gestureState.dy) >= TAP_MOVE_THRESHOLD) {
        gestureState._singleTabFailed = true;
      }
      if (!gestureState._singleTabFailed) {
        gestureState.singleTapUp = true;
      }

      DEV && console.log('onResponderEnd...' + JSON.stringify(gestureState));
      clearInteractionHandle(interactionState);
      config.onResponderEnd && config.onResponderEnd(e, gestureState);
    },

    onResponderTerminate: function onResponderTerminate(e) {
      DEV && console.log('onResponderTerminate...');
      clearInteractionHandle(interactionState);
      config.onResponderTerminate && config.onResponderTerminate(e, gestureState);
      initializeGestureState(gestureState);
    },

    onResponderTerminationRequest: function onResponderTerminationRequest(e) {
      DEV && console.log('onResponderTerminationRequest...');
      return config.onResponderTerminationRequest ? config.onResponderTerminationRequest(e.gestureState) : true;
    }
  };
  return babelHelpers.extends({}, handlers);
}

function effectiveMove(config, gestureState) {
  if (gestureState.numberActiveTouches > 1) {
    return true;
  }

  var moveThreshold = MOVE_THRESHOLD;
  if (typeof config.moveThreshold === 'number') {
    moveThreshold = config.minMoveDistance;
  }
  if (Math.abs(gestureState.dx) >= moveThreshold || Math.abs(gestureState.dy) >= moveThreshold) {
    return true;
  }
  return false;
}