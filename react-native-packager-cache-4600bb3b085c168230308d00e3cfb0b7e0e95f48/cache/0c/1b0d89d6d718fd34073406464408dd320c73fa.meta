["73af4d9990a170385f86b7b397653d9e95e45295","4f23119fa9a3925b5f534885dc7864ef699454a2",["prop-types","react","react-native"],[140,244,341],{"version":3,"sources":["/home/ziddi/Desktop/Bhupesh/venders/node_modules/react-native-elements/src/swipedeck/SwipeDeck.js"],"names":["SCREEN_WIDTH","get","width","SWIPE_THRESHOLD","MOVE_THRESHOLD","SwipeDeck","props","position","ValueXY","panResponder","create","onMoveShouldSetPanResponderCapture","e","gesture","Math","abs","dx","onStartShouldSetPanResponder","onPanResponderMove","event","setValue","x","y","dy","onPanResponderRelease","forceSwipe","resetPosition","state","index","nextProps","data","setState","setLayoutAnimationEnabledExperimental","spring","direction","timing","toValue","duration","start","onSwipeComplete","onSwipeRight","onSwipeLeft","item","rotate","interpolate","inputRange","outputRange","getLayout","transform","length","renderNoMoreCards","map","i","id","getCardStyle","styles","cardStyle","panHandlers","renderCard","zIndex","reverse","console","warn","renderCards","defaultProps","propTypes","any"],"mappings":"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","sourcesContent":["/*eslint-disable no-console */\nimport PropTypes from 'prop-types';\nimport React, { Component } from 'react';\nimport {\n  View,\n  Animated,\n  PanResponder,\n  Dimensions,\n  StyleSheet,\n  LayoutAnimation,\n  UIManager,\n} from 'react-native';\n\nconst SCREEN_WIDTH = Dimensions.get('window').width;\nconst SWIPE_THRESHOLD = 0.4 * SCREEN_WIDTH;\nconst MOVE_THRESHOLD = 50;\n\nexport default class SwipeDeck extends Component {\n  static defaultProps = {\n    onSwipeRight: () => {},\n    onSwipeLeft: () => {},\n  };\n\n  constructor(props) {\n    super(props);\n\n    const position = new Animated.ValueXY();\n\n    const panResponder = PanResponder.create({\n      // ignore touch and handle only move-gestures\n      onMoveShouldSetPanResponderCapture: (e, gesture) => {\n        return Math.abs(gesture.dx) > MOVE_THRESHOLD;\n      },\n      onStartShouldSetPanResponder: () => true,\n      onPanResponderMove: (event, gesture) => {\n        position.setValue({ x: gesture.dx, y: gesture.dy });\n      },\n      onPanResponderRelease: (event, gesture) => {\n        if (gesture.dx > SWIPE_THRESHOLD) {\n          this.forceSwipe('right');\n        } else if (gesture.dx < -SWIPE_THRESHOLD) {\n          this.forceSwipe('left');\n        } else {\n          this.resetPosition();\n        }\n      },\n    });\n\n    this.state = { panResponder, position, index: 0 };\n  }\n\n  componentWillReceiveProps(nextProps) {\n    if (nextProps.data !== this.props.data) {\n      this.setState({ index: 0 });\n    }\n  }\n\n  componentWillUpdate() {\n    UIManager.setLayoutAnimationEnabledExperimental &&\n      UIManager.setLayoutAnimationEnabledExperimental(true);\n    LayoutAnimation.spring();\n  }\n\n  forceSwipe(direction) {\n    const x = direction === 'right' ? SCREEN_WIDTH : -SCREEN_WIDTH;\n\n    Animated.timing(this.state.position, {\n      toValue: { x: x * 2, y: direction === 'right' ? -x : x },\n      duration: 750,\n    }).start(() => this.onSwipeComplete(direction));\n  }\n\n  onSwipeComplete(direction) {\n    const { onSwipeRight, onSwipeLeft, data } = this.props;\n    const item = data[this.state.index];\n\n    direction === 'right' ? onSwipeRight(item) : onSwipeLeft(item);\n    this.state.position.setValue({ x: 0, y: 0 });\n    this.setState({ index: this.state.index + 1 });\n  }\n\n  resetPosition() {\n    Animated.spring(this.state.position, {\n      toValue: { x: 0, y: 0 },\n    }).start();\n  }\n\n  getCardStyle() {\n    const { position } = this.state;\n    const rotate = position.x.interpolate({\n      inputRange: [-SCREEN_WIDTH * 2, 0, SCREEN_WIDTH * 2],\n      outputRange: ['-60deg', '0deg', '60deg'],\n    });\n\n    return {\n      ...this.state.position.getLayout(),\n      transform: [{ rotate }],\n    };\n  }\n\n  renderCards() {\n    if (this.state.index >= this.props.data.length) {\n      return this.props.renderNoMoreCards();\n    }\n\n    return this.props.data\n      .map((item, i) => {\n        if (i < this.state.index) {\n          return null;\n        } else if (i === this.state.index) {\n          return (\n            <Animated.View\n              key={item.id}\n              style={[this.getCardStyle(), styles.cardStyle]}\n              {...this.state.panResponder.panHandlers}\n            >\n              {this.props.renderCard(item)}\n            </Animated.View>\n          );\n        }\n\n        return (\n          <Animated.View\n            key={item.id}\n            style={[styles.cardStyle, { zIndex: 0 }]}\n          >\n            {this.props.renderCard(item)}\n          </Animated.View>\n        );\n      })\n      .reverse();\n  }\n\n  render() {\n    console.warn(\n      `Warning: SwipeDeck has been deprecated and will be removed in a future version of React Native Elements. To keep up with it's development you can check the project here(https://github.com/Monte9/react-native-tinder-cards).`\n    );\n\n    return (\n      <View>\n        {this.renderCards()}\n      </View>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  cardStyle: {\n    position: 'absolute',\n    width: SCREEN_WIDTH,\n  },\n});\n\nSwipeDeck.propTypes = {\n  data: PropTypes.any,\n  renderCard: PropTypes.any,\n  renderNoMoreCards: PropTypes.any,\n  onSwipeRight: PropTypes.any,\n  onSwipeLeft: PropTypes.any,\n};\n"]}]