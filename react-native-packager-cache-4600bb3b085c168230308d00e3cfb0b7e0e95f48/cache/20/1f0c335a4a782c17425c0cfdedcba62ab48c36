Object.defineProperty(exports,"__esModule",{value:true});exports.DropDownModal=undefined;var _class,_temp;var _react=require("react");var _react2=babelHelpers.interopRequireDefault(_react);


var _reactNative=require("react-native");





var _lodash=require("lodash");var _lodash2=babelHelpers.interopRequireDefault(_lodash);

var _Button=require("../Button");
var _Icon=require("../Icon");
var _Text=require("../Text");
var _View=require("../View");
var _LinearGradient=require("../LinearGradient");
var _TouchableOpacity=require("../TouchableOpacity");

var _theme=require("@shoutem/theme");

var _animation=require("@shoutem/animation");





var window=_reactNative.Dimensions.get('window');var

DropDownModal=(_temp=_class=function(_Component){babelHelpers.inherits(DropDownModal,_Component);




















































function DropDownModal(props){babelHelpers.classCallCheck(this,DropDownModal);var _this=babelHelpers.possibleConstructorReturn(this,(DropDownModal.__proto__||Object.getPrototypeOf(DropDownModal)).call(this,
props));
_this.state={
optionHeight:0,
shouldRenderModalContent:false};

_this.close=_this.close.bind(_this);
_this.emitOnOptionSelectedEvent=_this.emitOnOptionSelectedEvent.bind(_this);
_this.renderGradient=_this.renderGradient.bind(_this);
_this.renderRow=_this.renderRow.bind(_this);
_this.selectOption=_this.selectOption.bind(_this);
_this.onOptionLayout=_this.onOptionLayout.bind(_this);
_this.ds=new _reactNative.ListView.DataSource({rowHasChanged:function rowHasChanged(r1,r2){return r1!==r2;}});return _this;
}babelHelpers.createClass(DropDownModal,[{key:"componentWillMount",value:function componentWillMount()

{
this.timingDriver=new _animation.TimingDriver();
}},{key:"componentWillReceiveProps",value:function componentWillReceiveProps(

nextProps){var _this2=this;var
wasVisible=this.props.visible;var
isVisible=nextProps.visible;

if(!wasVisible&&isVisible){
this.timingDriver.toValue(1,function(){
_reactNative.LayoutAnimation.easeInEaseOut();
_this2.setState({shouldRenderModalContent:true});
});
}
}},{key:"onOptionLayout",value:function onOptionLayout(

event){var
height=event.nativeEvent.layout.height;
this.setState({optionHeight:height});
}},{key:"getVisibleOptions",value:function getVisibleOptions()

{var _props=
this.props,visibleOptions=_props.visibleOptions,style=_props.style;
return visibleOptions||style.visibleOptions||DropDownModal.DEFAULT_VISIBLE_OPTIONS;
}},{key:"selectOption",value:function selectOption(

option){
this.close();
if(option!==this.props.selectedOption){
this.emitOnOptionSelectedEvent(option);
}
}},{key:"close",value:function close()

{var _this3=this;
if(this.props.onClose){
this.timingDriver.toValue(0,function(){
_this3.props.onClose();
_this3.setState({shouldRenderModalContent:false});
});
}
}},{key:"emitOnOptionSelectedEvent",value:function emitOnOptionSelectedEvent(

option){
if(this.props.onOptionSelected){
this.props.onOptionSelected(option);
}
}},{key:"resolveListViewStyle",value:function resolveListViewStyle()

{
var listViewHeight=this.calculateListViewHeight();
return{flex:0,maxHeight:listViewHeight};
}},{key:"calculateListViewHeight",value:function calculateListViewHeight()

{var
optionHeight=this.state.optionHeight;var
options=this.props.options;
var visibleOptions=this.getVisibleOptions();
var optionsSize=_lodash2.default.size(options);

return optionsSize>visibleOptions?
visibleOptions*optionHeight:optionsSize*optionHeight;
}},{key:"renderFooter",value:function renderFooter()

{
return(
_react2.default.createElement(_View.View,{styleName:"md-gutter-top"}));

}},{key:"renderGradient",value:function renderGradient()

{var
style=this.props.style;var
backgroundColor=style.modal.backgroundColor;var
optionHeight=this.state.optionHeight;

// We divide the modal screen per key areas to which we apply a layer of gradient
// Screen ratio is represented in (0 - 1) format, where the ratio of 1 represents the entire
// screen height. Screen is then divided into 5 areas, marking the following elements ->
// Buffer area, where the layer is filled with default background color of the modal window,
// with no transparency. This area is applied above and below the list. Gradient area,
// where we apply the gradient transitioning the layer transparency from 1 -> 0. This
// section corrseponds to one list option height. Transparency area, where the layer is
// completely transparent, allowing us to see list options. Screen is then divided in the
// following fashion
//  -> Buffer area -> Gradient area -> Transparency area -> Gradient Area -> Buffer Area

var listViewHeight=this.calculateListViewHeight();
var screenHeight=window.height;
var gradientHeight=optionHeight;
var transparencyHeight=listViewHeight-optionHeight*2;
var bufferHeight=(screenHeight-listViewHeight)/2;

var bufferColor=backgroundColor;
var invertedColor=(0,_theme.changeColorAlpha)(backgroundColor,0);

// This config array holds the appropriate screen segment ratios per calculcations above
// Every screen segment has it's corresponding color to transition to.

var gradientConfig=[{
location:0,
color:bufferColor},
{
location:bufferHeight/screenHeight,
color:backgroundColor},
{
location:(bufferHeight+gradientHeight)/screenHeight,
color:invertedColor},
{
location:(bufferHeight+gradientHeight+transparencyHeight)/screenHeight,
color:invertedColor},
{
location:(bufferHeight+listViewHeight)/screenHeight,
color:backgroundColor},
{
location:1,
color:bufferColor}];


return(
_react2.default.createElement(_LinearGradient.LinearGradient,{
pointerEvents:"none",
styleName:"fill-parent",
locations:_lodash2.default.map(gradientConfig,function(breakpoint){return breakpoint.location;}),
colors:_lodash2.default.map(gradientConfig,function(breakpoint){return breakpoint.color;})}));


}},{key:"renderRow",value:function renderRow(

option){var _this4=this;var _props2=




this.props,style=_props2.style,titleProperty=_props2.titleProperty,renderOption=_props2.renderOption;

var optionItem=renderOption(option,titleProperty);
var onPress=function onPress(){return _this4.selectOption(option);};

return(
_react2.default.createElement(_TouchableOpacity.TouchableOpacity,{onPress:onPress,style:style.modalItem,onLayout:this.onOptionLayout},
optionItem));


}},{key:"render",value:function render()

{var _props3=
this.props,titleProperty=_props3.titleProperty,options=_props3.options,style=_props3.style;var
shouldRenderModalContent=this.state.shouldRenderModalContent;
if(_lodash2.default.size(options)===0){
return null;
}

var listViewStyle=this.resolveListViewStyle();
var dataSource=this.ds.cloneWithRows(options.filter(function(option){return option[titleProperty];}));

return(
_react2.default.createElement(_reactNative.Modal,{
visible:this.props.visible,
onRequestClose:this.close,
transparent:true},

_react2.default.createElement(_animation.ZoomOut,{driver:this.timingDriver,maxFactor:1.1,style:{flex:1}},
_react2.default.createElement(_animation.FadeIn,{driver:this.timingDriver,style:{flex:1}},
_react2.default.createElement(_View.View,{style:style.modal,styleName:"vertical"},
shouldRenderModalContent?
_react2.default.createElement(_reactNative.ListView,{
scrollRenderAheadDistance:50,
dataSource:dataSource,
renderRow:this.renderRow,
style:listViewStyle,
renderFooter:this.renderFooter}):
null,
this.renderGradient(),
_react2.default.createElement(_Button.Button,{onPress:this.close,styleName:"clear close"},
_react2.default.createElement(_Icon.Icon,{name:"close"})))))));







}}]);return DropDownModal;}(_react.Component),_class.propTypes={/**
     * Callback that is called when dropdown option is selected
     */onOptionSelected:_react2.default.PropTypes.func,/**
     * Collection of objects which will be shown as options in DropDownMenu
     */options:_react2.default.PropTypes.array.isRequired,/**
     * Selected option that will be shown.
     */selectedOption:_react2.default.PropTypes.any.isRequired,/**
     * Key name that represents option's string value,
     * and it will be displayed to the user in the UI
     */titleProperty:_react2.default.PropTypes.string.isRequired,/**
     * Key name that represents option's value
     */valueProperty:_react2.default.PropTypes.string.isRequired,/**
     * Number of options shown without scroll.
     * Can be set trough DropDown style.visibleOptions.
     * Prop definition overrides style.
     */visibleOptions:_react2.default.PropTypes.number,/**
     * Optional render function, for every item in the list.
     * Input parameter should be shaped as one of the items from the
     * options object
     */renderOption:_react2.default.PropTypes.func,/**
     * Visibility flag, controling the modal visibility
     */visible:_react2.default.PropTypes.bool,/**
     * Callback that is called when modal should be closed
     */onClose:_react2.default.PropTypes.func,style:_react2.default.PropTypes.object},_class.defaultProps={renderOption:function renderOption(option,titleProperty){return _react2.default.createElement(_Text.Text,null,option[titleProperty].toUpperCase());}},_class.DEFAULT_VISIBLE_OPTIONS=8,_temp);var StyledModal=(0,_theme.connectStyle)('shoutem.ui.DropDownModal')(DropDownModal);exports.DropDownModal=StyledModal;