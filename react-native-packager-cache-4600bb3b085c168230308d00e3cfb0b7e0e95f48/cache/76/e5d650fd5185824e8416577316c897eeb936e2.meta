["fe3781b912c2affc86b95c5530bba0a140788e43","ce519b360860f047283d71e4b1b34b96101455c0",["./path-getter","./"],[25,62],{"version":3,"sources":["/home/ziddi/Desktop/Bhupesh/venders/node_modules/jsan/lib/utils.js"],"names":["pathGetter","require","jsan","exports","getRegexFlags","regex","flags","ignoreCase","global","multiline","stringifyFunction","fn","customToString","str","toString","match","start","end","length","replace","restore","obj","root","type","rest","slice","comma","indexOf","source","RegExp","Date","Error","undefined","error","stack","Symbol","for","Map","parse","Set","NaN","Infinity","console","warn"],"mappings":"AAAA,IAAIA,aAAaC,QAAQ,eAAR,CAAjB;AACA,IAAIC,OAAOD,QAAQ,IAAR,CAAX;;AAEAE,QAAQC,aAAR,GAAwB,SAASA,aAAT,CAAuBC,KAAvB,EAA8B;AACpD,MAAIC,QAAQ,EAAZ;AACA,MAAID,MAAME,UAAV,EAAsBD,SAAS,GAAT;AACtB,MAAID,MAAMG,MAAV,EAAkBF,SAAS,GAAT;AAClB,MAAID,MAAMI,SAAV,EAAqBH,SAAS,GAAT;AACrB,SAAOA,KAAP;AACD,CAND;;AAQAH,QAAQO,iBAAR,GAA4B,SAASA,iBAAT,CAA2BC,EAA3B,EAA+BC,cAA/B,EAA+C;AACzE,MAAI,OAAOA,cAAP,KAA0B,UAA9B,EAA0C;AACxC,WAAOA,eAAeD,EAAf,CAAP;AACD;AACD,MAAIE,MAAMF,GAAGG,QAAH,EAAV;AACA,MAAIC,QAAQF,IAAIE,KAAJ,CAAU,kBAAV,CAAZ;AACA,MAAIC,QAAQD,QAAQA,MAAM,CAAN,CAAR,GAAmB,aAA/B;AACA,MAAIE,MAAMJ,IAAIA,IAAIK,MAAJ,GAAa,CAAjB,MAAwB,GAAxB,GAA8B,GAA9B,GAAoC,EAA9C;AACA,SAAOF,MAAMG,OAAN,CAAc,UAAd,EAA0B,GAA1B,EAA+BA,OAA/B,CAAuC,MAAvC,EAA+C,GAA/C,IAAsD,aAAtD,GAAsEF,GAA7E;AACD,CATD;;AAWAd,QAAQiB,OAAR,GAAkB,SAASA,OAAT,CAAiBC,GAAjB,EAAsBC,IAAtB,EAA4B;AAC5C,MAAIC,OAAOF,IAAI,CAAJ,CAAX;AACA,MAAIG,OAAOH,IAAII,KAAJ,CAAU,CAAV,CAAX;AACA,UAAOF,IAAP;AACE,SAAK,GAAL;AACE,aAAOvB,WAAWsB,IAAX,EAAiBD,GAAjB,CAAP;AACF,SAAK,GAAL;AACE,UAAIK,QAAQF,KAAKG,OAAL,CAAa,GAAb,CAAZ;AACA,UAAIrB,QAAQkB,KAAKC,KAAL,CAAW,CAAX,EAAcC,KAAd,CAAZ;AACA,UAAIE,SAASJ,KAAKC,KAAL,CAAWC,QAAQ,CAAnB,CAAb;AACA,aAAOG,OAAOD,MAAP,EAAetB,KAAf,CAAP;AACF,SAAK,GAAL;AACE,aAAO,IAAIwB,IAAJ,CAAS,CAACN,IAAV,CAAP;AACF,SAAK,GAAL;AACE,UAAIb,KAAK,SAALA,EAAK,GAAW;AAAE,cAAM,IAAIoB,KAAJ,CAAU,gCAAV,CAAN;AAAmD,OAAzE;AACApB,SAAGG,QAAH,GAAc,YAAW;AAAE,eAAOU,IAAP;AAAc,OAAzC;AACA,aAAOb,EAAP;AACF,SAAK,GAAL;AACE,aAAOqB,SAAP;AACF,SAAK,GAAL;AACE,UAAIC,QAAQ,IAAIF,KAAJ,CAAUP,IAAV,CAAZ;AACAS,YAAMC,KAAN,GAAc,6CAAd;AACA,aAAOD,KAAP;AACF,SAAK,GAAL;AACE,aAAOE,OAAOX,IAAP,CAAP;AACF,SAAK,GAAL;AACE,aAAO,uCAAOY,GAAP,YAAWZ,IAAX,CAAP;AACF,SAAK,GAAL;AACE,aAAO,IAAIa,GAAJ,CAAQnC,KAAKoC,KAAL,CAAWd,IAAX,CAAR,CAAP;AACF,SAAK,GAAL;AACE,aAAO,IAAIe,GAAJ,CAAQrC,KAAKoC,KAAL,CAAWd,IAAX,CAAR,CAAP;AACF,SAAK,GAAL;AACE,aAAOgB,GAAP;AACF,SAAK,GAAL;AACE,aAAOC,QAAP;AACF,SAAK,GAAL;AACE,aAAO,CAACA,QAAR;AACF;AACEC,cAAQC,IAAR,CAAa,cAAb,EAA6BtB,GAA7B;AACA,aAAOA,GAAP;AApCJ;AAsCD,CAzCD","sourcesContent":["var pathGetter = require('./path-getter');\nvar jsan = require('./');\n\nexports.getRegexFlags = function getRegexFlags(regex) {\n  var flags = '';\n  if (regex.ignoreCase) flags += 'i';\n  if (regex.global) flags += 'g';\n  if (regex.multiline) flags += 'm';\n  return flags;\n};\n\nexports.stringifyFunction = function stringifyFunction(fn, customToString) {\n  if (typeof customToString === 'function') {\n    return customToString(fn);\n  }\n  var str = fn.toString();\n  var match = str.match(/^[^{]*{|^[^=]*=>/);\n  var start = match ? match[0] : '<function> ';\n  var end = str[str.length - 1] === '}' ? '}' : '';\n  return start.replace(/\\r\\n|\\n/g, ' ').replace(/\\s+/g, ' ') + ' /* ... */ ' + end;\n};\n\nexports.restore = function restore(obj, root) {\n  var type = obj[0];\n  var rest = obj.slice(1);\n  switch(type) {\n    case '$':\n      return pathGetter(root, obj);\n    case 'r':\n      var comma = rest.indexOf(',');\n      var flags = rest.slice(0, comma);\n      var source = rest.slice(comma + 1);\n      return RegExp(source, flags);\n    case 'd':\n      return new Date(+rest);\n    case 'f':\n      var fn = function() { throw new Error(\"can't run jsan parsed function\") };\n      fn.toString = function() { return rest; };\n      return fn;\n    case 'u':\n      return undefined;\n    case 'e':\n      var error = new Error(rest);\n      error.stack = 'Stack is unavailable for jsan parsed errors';\n      return error;\n    case 's':\n      return Symbol(rest);\n    case 'g':\n      return Symbol.for(rest);\n    case 'm':\n      return new Map(jsan.parse(rest));\n    case 'l':\n      return new Set(jsan.parse(rest));\n    case 'n':\n      return NaN;\n    case 'i':\n      return Infinity;\n    case 'y':\n      return -Infinity;\n    default:\n      console.warn('unknown type', obj);\n      return obj;\n  }\n}\n"]}]