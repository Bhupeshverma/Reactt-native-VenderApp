["06b3efcaa08337ea05df125daf9c6585eb3a1f3e","7e982bc5b5db4de29ee27187896964f627750fc9",["react","react-native","@shoutem/theme","@shoutem/animation","./../index"],[148,245,284,329,374],{"version":3,"sources":["/home/ziddi/Desktop/Bhupesh/venders/node_modules/@shoutem/ui/components/ImageGalleryOverlay.js"],"names":["DESCRIPTION_LENGTH_TRIM_LIMIT","ImageGalleryOverlay","props","collapseDescription","bind","expandDescription","onDescriptionScroll","state","isDescriptionCollapsed","event","offsetY","nativeEvent","contentOffset","y","setState","title","style","container","text","description","collapsed","descriptionIcon","descriptionText","top","right","bottom","left","length","scroll","renderTitle","renderDescription","propTypes","PropTypes","string","object","AnimatedOverlay","StyledOverlay"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport {\n  ScrollView,\n} from 'react-native';\n\nimport { connectStyle } from '@shoutem/theme';\nimport { connectAnimation } from '@shoutem/animation';\n\nimport {\n  View,\n  Subtitle,\n  Caption,\n  Icon,\n  TouchableOpacity,\n} from './../index';\n\nconst DESCRIPTION_LENGTH_TRIM_LIMIT = 90;\n\n/**\n * An overlay that is intended to be rendered above\n * images in a gallery. It can display a title and\n * a description of an image.\n */\nclass ImageGalleryOverlay extends Component {\n  static propTypes = {\n    title: React.PropTypes.string,\n    description: React.PropTypes.string,\n    style: React.PropTypes.object,\n  };\n\n  constructor(props) {\n    super(props);\n\n    this.collapseDescription = this.collapseDescription.bind(this);\n    this.expandDescription = this.expandDescription.bind(this);\n    this.onDescriptionScroll = this.onDescriptionScroll.bind(this);\n\n    this.state = {\n      isDescriptionCollapsed: true,\n    };\n  }\n\n  onDescriptionScroll(event) {\n    const { isDescriptionCollapsed } = this.state;\n    const offsetY = event.nativeEvent.contentOffset.y;\n\n    // We are expanding and collapsing the description when\n    // the user swipes the description in the correct direction.\n    if (isDescriptionCollapsed && (offsetY > 0)) {\n      this.expandDescription();\n    } else if (!isDescriptionCollapsed && (offsetY < 0)) {\n      this.collapseDescription();\n    }\n  }\n\n  collapseDescription() {\n    this.setState({ isDescriptionCollapsed: true });\n  }\n\n  expandDescription() {\n    this.setState({ isDescriptionCollapsed: false });\n  }\n\n  renderTitle(title) {\n    const { style } = this.props;\n\n    if (!title) {\n      return null;\n    }\n\n    return (\n      <View style={style.title.container}>\n        <Subtitle style={style.title.text} numberOfLines={2}>{title}</Subtitle>\n      </View>\n    );\n  }\n\n  renderDescription(description) {\n    const { style } = this.props;\n    const collapsed = this.state.isDescriptionCollapsed;\n\n    if (!description) {\n      return null;\n    }\n\n    const descriptionIcon = (<Icon name={`${collapsed ? 'up' : 'down'}-arrow`} />);\n\n    const descriptionText = (\n      <Caption\n        style={style.description.text}\n        numberOfLines={collapsed ? 2 : null}\n      >\n        {description}\n      </Caption>\n    );\n\n    return (\n      <View\n        styleName={collapsed ? 'collapsed' : 'expanded'}\n        style={style.description.container}\n      >\n        <TouchableOpacity\n          onPress={collapsed ? this.expandDescription : this.collapseDescription}\n          hitSlop={{\n            top: 10,\n            right: 10,\n            bottom: 10,\n            left: 10,\n          }}\n        >\n          {description.length >= DESCRIPTION_LENGTH_TRIM_LIMIT ? descriptionIcon : null}\n        </TouchableOpacity>\n        <ScrollView\n          style={style.description.scroll}\n          onScroll={this.onDescriptionScroll}\n          scrollEventThrottle={1000}\n        >\n          {descriptionText}\n        </ScrollView>\n      </View>\n    );\n  }\n\n  render() {\n    const { title, description, style } = this.props;\n\n    if (!title && !description) {\n      return null;\n    }\n\n    return (\n      <View style={style.container} pointerEvents=\"box-none\">\n        {this.renderTitle(title)}\n        {this.renderDescription(description)}\n      </View>\n    );\n  }\n}\n\nconst AnimatedOverlay = connectAnimation(ImageGalleryOverlay);\nconst StyledOverlay = connectStyle('shoutem.ui.ImageGalleryOverlay', {\n  container: {},\n  title: {\n    container: {},\n    text: {},\n  },\n  description: {\n    container: {},\n    scroll: {},\n    text: {},\n  },\n})(AnimatedOverlay);\nexport {\n  StyledOverlay as ImageGalleryOverlay,\n};\n"]}]