'use strict';

/**
 * Inspired by Android Scroller
 */Object.defineProperty(exports,"__esModule",{value:true});exports.default=undefined;

var _ViscousFluidInterpolator=require("./ViscousFluidInterpolator");var _ViscousFluidInterpolator2=babelHelpers.interopRequireDefault(_ViscousFluidInterpolator);
var _AnimationUtils=require("./AnimationUtils");

/**
 * The coefficient of friction applied to flings/scrolls.
 * @type {number}
 */
//const SCROLL_FRICTION = 0.015;
var SCROLL_FRICTION=0.03;

var DEFAULT_DURATION=250;
var SCROLL_MODE=0;
var FLING_MODE=1;

var DECELERATION_RATE=Math.log(0.78)/Math.log(0.9);
var INFLEXION=0.35;// Tension lines cross at (INFLEXION, 1)
var START_TENSION=0.5;
var END_TENSION=1.0;
var P1=START_TENSION*INFLEXION;
var P2=1.0-END_TENSION*(1.0-INFLEXION);

var NB_SAMPLES=100;
var SPLINE_POSITION=[];
var SPLINE_TIME=[];

var GRAVITY_EARTH=9.80665;

(function(){
var x_min=0;
var y_min=0;
for(var i=0;i<NB_SAMPLES;i++){
var alpha=i/NB_SAMPLES;

var x_max=1;
var x=void 0,tx=void 0,coef=void 0;
while(true){
x=x_min+(x_max-x_min)/2.0;
coef=3.0*x*(1.0-x);
tx=coef*((1.0-x)*P1+x*P2)+x*x*x;
if(Math.abs(tx-alpha)<1E-5)break;
if(tx>alpha)x_max=x;else
x_min=x;
}
SPLINE_POSITION[i]=coef*((1.0-x)*START_TENSION+x)+x*x*x;

var y_max=1.0;
var y=void 0,dy=void 0;
while(true){
y=y_min+(y_max-y_min)/2.0;
coef=3.0*y*(1.0-y);
dy=coef*((1.0-y)*START_TENSION+y)+y*y*y;
if(Math.abs(dy-alpha)<1E-5)break;
if(dy>alpha)y_max=y;else
y_min=y;
}
SPLINE_TIME[i]=coef*((1.0-y)*P1+y*P2)+y*y*y;
}
SPLINE_POSITION[NB_SAMPLES]=SPLINE_TIME[NB_SAMPLES]=1.0;
})();

function signum(number){
if(isNaN(number)){
return NaN;
}
var sig=number;
if(number>0){
sig=1;
}else
if(number<0){
sig=-1;
}
return sig;
}var

Scroller=function(){
/**
   *
   * @param flywheel specify whether or not to support progressive "flywheel" behavior in flinging.
   */
function Scroller(flywheel,onScrollCallback){babelHelpers.classCallCheck(this,Scroller);
this.mCurrX=0;
this.mCurrY=0;
this.mFinished=true;
this.mInterpolator=_ViscousFluidInterpolator2.default;
//this.mPpi = PixelRatio.get() * 160;
this.mPpi=160;
this.mDeceleration=this.computeDeceleration(SCROLL_FRICTION);
this.mFlywheel=flywheel;

this.mPhysicalCoeff=this.computeDeceleration(0.84);// look and feel tuning

this.mFlingFriction=SCROLL_FRICTION;
this.onScrollCallback=onScrollCallback;
}babelHelpers.createClass(Scroller,[{key:"computeDeceleration",value:function computeDeceleration(

friction){
return GRAVITY_EARTH*39.37*this.mPpi*friction;
}

/**
   * Returns whether the scroller has finished scrolling.
   * @returns {Boolean} True if the scroller has finished scrolling, false otherwise.
   */},{key:"isFinished",value:function isFinished()
{
return this.mFinished;
}

/**
   * Force the finished field to a particular value.
   * @param finished The new finished value.
   */},{key:"forceFinished",value:function forceFinished(
finished){
this.mFinished=finished;
}

/**
   * Returns the current X offset in the scroll.
   * @returns {*} The new X offset as an absolute distance from the origin.
   */},{key:"getCurrX",value:function getCurrX()
{
return this.mCurrX;
}

/**
   * Returns the current Y offset in the scroll.
   * @returns {*} The new Y offset as an absolute distance from the origin.
   */},{key:"getCurrY",value:function getCurrY()
{
return this.mCurrY;
}},{key:"getCurrVelocity",value:function getCurrVelocity()

{
return this.mMode===FLING_MODE?
this.mCurrVelocity:this.mVelocity-this.mDeceleration*this.timePassed()/2000.0;
}},{key:"computeScrollOffset",value:function computeScrollOffset()

{
if(this.mFinished){
this.onScrollCallback&&this.onScrollCallback(0,0,this);
return false;
}

var timePassed=(0,_AnimationUtils.currentAnimationTimeMillis)()-this.mStartTime;

if(timePassed<this.mDuration){
switch(this.mMode){
case SCROLL_MODE:
var x=this.mInterpolator.getInterpolation(timePassed*this.mDurationReciprocal);
this.mCurrX=this.mStartX+Math.round(x*this.mDeltaX);
this.mCurrY=this.mStartY+Math.round(x*this.mDeltaY);
break;
case FLING_MODE:
var t=timePassed/this.mDuration;
var index=parseInt(NB_SAMPLES*t);
var distanceCoef=1;
var velocityCoef=0;
if(index<NB_SAMPLES){
var t_inf=index/NB_SAMPLES;
var t_sup=(index+1)/NB_SAMPLES;
var d_inf=SPLINE_POSITION[index];
var d_sup=SPLINE_POSITION[index+1];
velocityCoef=(d_sup-d_inf)/(t_sup-t_inf);
distanceCoef=d_inf+(t-t_inf)*velocityCoef;
}

this.mCurrVelocity=velocityCoef*this.mDistance/this.mDuration*1000;

this.mCurrX=this.mStartX+Math.round(distanceCoef*(this.mFinalX-this.mStartX));
// Pin to mMinX <= mCurrX <= mMaxX
//this.mCurrX = Math.min(this.mCurrX, this.mMaxX);
//this.mCurrX = Math.max(this.mCurrX, this.mMinX);

this.mCurrY=this.mStartY+Math.round(distanceCoef*(this.mFinalY-this.mStartY));
// Pin to mMinY <= mCurrY <= mMaxY
this.mCurrY=Math.min(this.mCurrY,this.mMaxY);
this.mCurrY=Math.max(this.mCurrY,this.mMinY);

if(this.mCurrX==this.mFinalX&&this.mCurrY==this.mFinalY){
this.mFinished=true;
}

break;}

}else
{
this.mCurrX=this.mFinalX;
this.mCurrY=this.mFinalY;
this.mFinished=true;
}

var dx=this.mCurrX-this.mLastX;
var dy=this.mCurrY-this.mLastY;

this.mLastX=this.mCurrX;
this.mLastY=this.mCurrY;

this.onScrollCallback&&this.onScrollCallback(dx,dy,this);

if(dx===0&&dy===0&&this.mFinished){
return false;
}
return true;
}},{key:"startScroll",value:function(_startScroll){function startScroll(_x,_x2,_x3,_x4){return _startScroll.apply(this,arguments);}startScroll.toString=function(){return _startScroll.toString();};return startScroll;}(function(

startX,startY,dx,dy){
startScroll(startX,startY,dx,dy,DEFAULT_DURATION);
})},{key:"startScroll",value:function startScroll(

startX,startY,dx,dy,duration){
this.mMode=SCROLL_MODE;
this.mFinished=false;
this.mDuration=duration;
this.mStartTime=(0,_AnimationUtils.currentAnimationTimeMillis)();
this.mStartX=startX;
this.mStartY=startY;
this.mFinalX=startX+dx;
this.mFinalY=startY+dy;
this.mDeltaX=dx;
this.mDeltaY=dy;
this.mDurationReciprocal=1.0/this.mDuration;

this.mLastX=this.mStartX;
this.mLastY=this.mStartY;

this.performAnimation();
}

/**
   * Start scrolling based on a fling gesture. The distance travelled will
   * depend on the initial velocity of the fling.
   * @param startX
   * @param startY
   * @param velocityX Initial velocity of the fling (X) measured in dp or pt per second
   * @param velocityY Initial velocity of the fling (Y) measured in dp or pt per second
   * @param minX
   * @param maxX
   * @param minY
   * @param maxY
   */},{key:"fling",value:function fling(
startX,startY,velocityX,velocityY,
minX,maxX,minY,maxY){
// Continue a scroll or fling in progress
if(this.mFlywheel&&!this.mFinished){
var oldVel=this.getCurrVelocity();

var dx=this.mFinalX-this.mStartX;
var dy=this.mFinalY-this.mStartY;
var hyp=Math.hypot(dx,dy);

var ndx=dx/hyp;
var ndy=dy/hyp;

var oldVelocityX=ndx*oldVel;
var oldVelocityY=ndy*oldVel;
if(signum(velocityX)===signum(oldVelocityX)&&
signum(velocityY)===signum(oldVelocityY)){
velocityX+=oldVelocityX;
velocityY+=oldVelocityY;
}
}

this.mMode=FLING_MODE;
this.mFinished=false;

var velocity=Math.hypot(velocityX,velocityY);

this.mVelocity=velocity;
this.mDuration=this.getSplineFlingDuration(velocity);
this.mStartTime=(0,_AnimationUtils.currentAnimationTimeMillis)();
this.mStartX=startX;
this.mStartY=startY;

var coeffX=velocity==0?1.0:velocityX/velocity;
var coeffY=velocity==0?1.0:velocityY/velocity;

var totalDistance=this.getSplineFlingDistance(velocity);
this.mDistance=totalDistance*signum(velocity);

this.mMinX=minX;
this.mMaxX=maxX;
this.mMinY=minY;
this.mMaxY=maxY;

this.mFinalX=startX+Math.round(totalDistance*coeffX);
// Pin to mMinX <= mFinalX <= mMaxX
this.mFinalX=Math.min(this.mFinalX,this.mMaxX);
this.mFinalX=Math.max(this.mFinalX,this.mMinX);

this.mFinalY=startY+Math.round(totalDistance*coeffY);
// Pin to mMinY <= mFinalY <= mMaxY
this.mFinalY=Math.min(this.mFinalY,this.mMaxY);
this.mFinalY=Math.max(this.mFinalY,this.mMinY);

this.mLastX=this.mStartX;
this.mLastY=this.mStartY;

this.performAnimation();
}},{key:"getSplineDeceleration",value:function getSplineDeceleration(

velocity){
return Math.log(INFLEXION*Math.abs(velocity)/(this.mFlingFriction*this.mPhysicalCoeff));
}},{key:"getSplineFlingDuration",value:function getSplineFlingDuration(

velocity){
var l=this.getSplineDeceleration(velocity);
var decelMinusOne=DECELERATION_RATE-1.0;
return 1000.0*Math.exp(l/decelMinusOne);
}},{key:"getSplineFlingDistance",value:function getSplineFlingDistance(

velocity){
var l=this.getSplineDeceleration(velocity);
var decelMinusOne=DECELERATION_RATE-1.0;
return this.mFlingFriction*this.mPhysicalCoeff*Math.exp(DECELERATION_RATE/decelMinusOne*l);
}},{key:"performAnimation",value:function performAnimation()

{
if(this.computeScrollOffset()){
requestAnimationFrame(this.performAnimation.bind(this));
}else{
}
}},{key:"abortAnimation",value:function abortAnimation()

{
this.mCurrX=this.mFinalX;
this.mCurrY=this.mFinalY;
this.mFinished=true;
}},{key:"extendDuration",value:function extendDuration(

extend){
var passed=timePassed();
this.mDuration=passed+extend;
this.mDurationReciprocal=1.0/this.mDuration;
this.mFinished=false;
}},{key:"timePassed",value:function timePassed()

{
return(0,_AnimationUtils.currentAnimationTimeMillis)()-this.mStartTime;
}},{key:"setFinalX",value:function setFinalX(

newX){
this.mFinalX=newX;
this.mDeltaX=this.mFinalX-this.mStartX;
this.mFinished=false;
}},{key:"setFinalY",value:function setFinalY(

newY){
this.mFinalY=newY;
this.mDeltaY=this.mFinalY-this.mStartY;
this.mFinished=false;
}},{key:"debugInfo",value:function debugInfo()

{
return'cur='+this.mCurrX+' '+this.mCurrY+', final='+this.mFinalX+' '+this.mFinalY;
}}]);return Scroller;}();exports.default=Scroller;