["b8bdd96fd372bb971a6a7949760a43313d69bb56","ac704db47a53fd1c8d72c8a09b901cfb9cb815e7",["react","react-native","lodash","tinycolor2","@shoutem/theme","@shoutem/animation","./composeChildren"],[142,239,279,377,481,526,581],{"version":3,"sources":["/home/ziddi/Desktop/Bhupesh/venders/node_modules/@shoutem/ui/components/NavigationBar/NavigationBar.js"],"names":["getBackgroundColor","style","styleWithBg","find","styleDef","backgroundColor","setStatusBarStyle","chooseBarStyle","bgColor","isDark","setStyle","OS","setBackgroundColor","barStyle","setBarStyle","_parent","Value","addListener","animation","_interpolation","value","NavigationBar","props","leftComponent","rightComponent","centerComponent","id","container","componentsContainer","propTypes","PropTypes","node","object","string","defaultProps","AnimatedNavigationBar","StyledNavigationBar"],"mappings":";;;;;;;AAAA;;;;AACA;;AAOA;;;;AAEA;;;;AAEA;;AACA;;AAEA;;;;AAEA,SAASA,kBAAT,CAA4BC,KAA5B,EAAmC;AACjC,MAAMC,cAAc,iBAAEC,IAAF,CAAOF,KAAP,EAAc,UAACG,QAAD;AAAA,WAChCA,SAASC,eAAT,IAA4BD,SAASC,eAAT,KAA6B,aADzB;AAAA,GAAd,CAApB;;AAIA,SAAOH,eAAeA,YAAYG,eAA3B,IAA8C,aAArD;AACD;;AAED,SAASC,iBAAT,CAA2BD,eAA3B,EAA4C;AAC1C,WAASE,cAAT,CAAwBC,OAAxB,EAAiC;AAC/B,WAAO,yBAAMA,OAAN,EAAeC,MAAf,KAA0B,eAA1B,GAA4C,SAAnD;AACD;;AAED,WAASC,QAAT,CAAkBF,OAAlB,EAA2B;AACzB,QAAI,sBAASG,EAAT,KAAgB,SAApB,EAA+B;AAC7B,6BAAUC,kBAAV,CAA6B,oBAA7B;AACD,KAFD,MAEO;AACL,UAAMC,WAAWN,eAAeC,OAAf,CAAjB;AACA,6BAAUM,WAAV,CAAsBD,QAAtB;AACD;AACF;;AAOD,MAAIR,mBAAmBA,gBAAgBU,OAAhB,YAAmC,sBAASC,KAAnE,EAA0E;AACxEX,oBAAgBU,OAAhB,CAAwBE,WAAxB,CAAoC,UAACC,SAAD,EAAe;AACjDR,eAASL,gBAAgBc,cAAhB,CAA+BD,UAAUE,KAAzC,CAAT;AACD,KAFD;AAGAV,aAASL,gBAAgBc,cAAhB,CAA+B,CAA/B,CAAT;AACD,GALD,MAKO;AACLT,aAASL,eAAT;AACD;AACF;;IAGKgB,a;;;;;;;;;;6BAaK;AAAA,mBAOH,KAAKC,KAPF;AAAA,UAELC,aAFK,UAELA,aAFK;AAAA,UAGLC,cAHK,UAGLA,cAHK;AAAA,UAILC,eAJK,UAILA,eAJK;AAAA,UAKLxB,KALK,UAKLA,KALK;AAAA,UAMLyB,EANK,UAMLA,EANK;;;AASP,UAAMrB,kBAAkBL,mBAAmBC,KAAnB,CAAxB;AACAK,wBAAkBD,eAAlB;;AAEA,aACE;AAAA,8BAAU,IAAV;AAAA,UAAe,OAAOJ,MAAM0B,SAA5B,EAAuC,KAAKD,EAA5C;AACE,mEADF;AAEE;AAAA;AAAA,YAAM,OAAOzB,MAAM2B,mBAAnB;AACE;AAAA;AAAA,cAAM,OAAO3B,MAAMsB,aAAnB;AAAmCA;AAAnC,WADF;AAEE;AAAA;AAAA,cAAM,OAAOtB,MAAMwB,eAAnB;AAAqCA;AAArC,WAFF;AAGE;AAAA;AAAA,cAAM,OAAOxB,MAAMuB,cAAnB;AAAoCA;AAApC;AAHF;AAFF,OADF;AAUD;;;4BAlCMK,S,GAAY;AACjBN,iBAAe,gBAAMO,SAAN,CAAgBC,IADd;AAEjBN,mBAAiB,gBAAMK,SAAN,CAAgBC,IAFhB;AAGjBP,kBAAgB,gBAAMM,SAAN,CAAgBC,IAHf;AAIjB9B,SAAO,gBAAM6B,SAAN,CAAgBE,MAJN;AAKjBN,MAAI,gBAAMI,SAAN,CAAgBG;AALH,C,SAQZC,Y,GAAe;AACpBR,MAAI;AADgB,C;;;AA6BxB,IAAMS,wBAAwB,iCAAiB,+BAAgBd,aAAhB,CAAjB,CAA9B;AACA,IAAMe,sBAAsB,yBAAa,0BAAb,EAAyCD,qBAAzC,CAA5B;;QAGyBd,a,GAAvBe,mB","sourcesContent":["import React, { Component } from 'react';\nimport {\n  StatusBar,\n  Animated,\n  Platform,\n  View,\n} from 'react-native';\n\nimport _ from 'lodash';\n\nimport color from 'tinycolor2';\n\nimport { connectStyle } from '@shoutem/theme';\nimport { connectAnimation } from '@shoutem/animation';\n\nimport composeChildren from './composeChildren';\n\nfunction getBackgroundColor(style) {\n  const styleWithBg = _.find(style, (styleDef) =>\n    styleDef.backgroundColor && styleDef.backgroundColor !== 'transparent'\n  );\n\n  return styleWithBg && styleWithBg.backgroundColor || 'transparent';\n}\n\nfunction setStatusBarStyle(backgroundColor) {\n  function chooseBarStyle(bgColor) {\n    return color(bgColor).isDark() ? 'light-content' : 'default';\n  }\n\n  function setStyle(bgColor) {\n    if (Platform.OS === 'android') {\n      StatusBar.setBackgroundColor('rgba(0, 0, 0, 0.2)');\n    } else {\n      const barStyle = chooseBarStyle(bgColor);\n      StatusBar.setBarStyle(barStyle);\n    }\n  }\n\n  // This is little bit hacky, but is the only way\n  // to determine the current value of interpolated Animated.Value\n  // Other way would be to ask developer to provide Animated.Value\n  // used to interpolate backgroundColor. But this way developer doesn't\n  // have to concern about status bar if he animates navigation bar color\n  if (backgroundColor && backgroundColor._parent instanceof Animated.Value) {\n    backgroundColor._parent.addListener((animation) => {\n      setStyle(backgroundColor._interpolation(animation.value));\n    });\n    setStyle(backgroundColor._interpolation(0));\n  } else {\n    setStyle(backgroundColor);\n  }\n}\n\n// eslint-disable-next-line react/prefer-stateless-function\nclass NavigationBar extends Component {\n  static propTypes = {\n    leftComponent: React.PropTypes.node,\n    centerComponent: React.PropTypes.node,\n    rightComponent: React.PropTypes.node,\n    style: React.PropTypes.object,\n    id: React.PropTypes.string,\n  };\n\n  static defaultProps = {\n    id: 'default',\n  };\n\n  render() {\n    const {\n      leftComponent,\n      rightComponent,\n      centerComponent,\n      style,\n      id,\n    } = this.props;\n\n    const backgroundColor = getBackgroundColor(style);\n    setStatusBarStyle(backgroundColor);\n    // Key must be set to render new screen NavigationBar\n    return (\n      <Animated.View style={style.container} key={id}>\n        <StatusBar />\n        <View style={style.componentsContainer}>\n          <View style={style.leftComponent}>{leftComponent}</View>\n          <View style={style.centerComponent}>{centerComponent}</View>\n          <View style={style.rightComponent}>{rightComponent}</View>\n        </View>\n      </Animated.View>\n    );\n  }\n}\n\nconst AnimatedNavigationBar = connectAnimation(composeChildren(NavigationBar));\nconst StyledNavigationBar = connectStyle('shoutem.ui.NavigationBar')(AnimatedNavigationBar);\n\nexport {\n  StyledNavigationBar as NavigationBar,\n};\n"]}]