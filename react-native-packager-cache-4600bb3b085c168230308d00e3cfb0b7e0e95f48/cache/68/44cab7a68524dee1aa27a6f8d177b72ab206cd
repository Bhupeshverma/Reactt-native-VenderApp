Object.defineProperty(exports,"__esModule",{value:true});var _react=require("react");var _react2=babelHelpers.interopRequireDefault(_react);
var _hoistNonReactStatics=require("hoist-non-react-statics");var _hoistNonReactStatics2=babelHelpers.interopRequireDefault(_hoistNonReactStatics);
var _lodash=require("lodash");var _=babelHelpers.interopRequireWildcard(_lodash);
var _normalizeStyle=require("./StyleNormalizer/normalizeStyle");var _normalizeStyle2=babelHelpers.interopRequireDefault(_normalizeStyle);

var _Theme=require("./Theme");var _Theme2=babelHelpers.interopRequireDefault(_Theme);
var _resolveComponentStyle=require("./resolveComponentStyle");

// TODO - remove withRef warning in next version

/**
 * Formats and throws an error when connecting component style with the theme.
 *
 * @param errorMessage The error message.
 * @param componentDisplayName The name of the component that is being connected.
 */
function throwConnectStyleError(errorMessage,componentDisplayName){
throw Error(errorMessage+" - when connecting "+componentDisplayName+" component to style.");
}

/**
 * Returns the theme object from the provided context,
 * or an empty theme if the context doesn't contain a theme.
 *
 * @param context The React component context.
 * @returns {Theme} The Theme object.
 */
function getTheme(context){
// Fallback to a default theme if the component isn't
// rendered in a StyleProvider.
return context.theme||_Theme2.default.getDefaultTheme();
}

/**
 * Resolves the final component style by using the theme style, if available and
 * merging it with the style provided directly through the style prop, and style
 * variants applied through the styleName prop.
 *
 * @param componentStyleName The component name that will be used
 * to target this component in style rules.
 * @param componentStyle The default component style.
 * @param mapPropsToStyleNames Pure function to customize styleNames depending on props.
 * @param options The additional connectStyle options
 * @param options.virtual The default value of the virtual prop
 * @returns {StyledComponent} The new component that will handle
 * the styling of the wrapped component.
 */exports.default=
function(componentStyleName){var componentStyle=arguments.length>1&&arguments[1]!==undefined?arguments[1]:{};var mapPropsToStyleNames=arguments[2];var options=arguments.length>3&&arguments[3]!==undefined?arguments[3]:{};
function getComponentDisplayName(WrappedComponent){
return WrappedComponent.displayName||WrappedComponent.name||'Component';
}

function getBaseComponent(WrappedComponent){
if(WrappedComponent.BaseComponent){
return WrappedComponent.BaseComponent;
}
return WrappedComponent;
}

return function wrapWithStyledComponent(WrappedComponent){var _class,_temp;
var componentDisplayName=getComponentDisplayName(WrappedComponent);

if(!_.isPlainObject(componentStyle)){
throwConnectStyleError(
'Component style must be plain object',
componentDisplayName);

}

if(!_.isString(componentStyleName)){
throwConnectStyleError(
'Component Style Name must be string',
componentDisplayName);

}var

StyledComponent=(_temp=_class=function(_React$PureComponent){babelHelpers.inherits(StyledComponent,_React$PureComponent);


































function StyledComponent(props,context){babelHelpers.classCallCheck(this,StyledComponent);var _this=babelHelpers.possibleConstructorReturn(this,(StyledComponent.__proto__||Object.getPrototypeOf(StyledComponent)).call(this,
props,context));
var styleNames=_this.resolveStyleNames(props);
var resolvedStyle=_this.resolveStyle(context,props,styleNames);
_this.setWrappedInstance=_this.setWrappedInstance.bind(_this);
_this.transformProps=_this.transformProps.bind(_this);

_this.state={
style:resolvedStyle.componentStyle,
childrenStyle:resolvedStyle.childrenStyle,
// AddedProps are additional WrappedComponent props
// Usually they are set through alternative ways,
// such as theme style, or through options
addedProps:_this.resolveAddedProps(),
styleNames:styleNames};return _this;

}babelHelpers.createClass(StyledComponent,[{key:"getChildContext",value:function getChildContext()

{
return{
parentStyle:this.props.virtual?
this.context.parentStyle:
this.state.childrenStyle,
transformProps:this.transformProps};

}},{key:"componentWillReceiveProps",value:function componentWillReceiveProps(

nextProps,nextContext){
var styleNames=this.resolveStyleNames(nextProps);
if(this.shouldRebuildStyle(nextProps,nextContext,styleNames)){
var resolvedStyle=this.resolveStyle(nextContext,nextProps,styleNames);

this.setState({
style:resolvedStyle.componentStyle,
childrenStyle:resolvedStyle.childrenStyle,
styleNames:styleNames});

}
}},{key:"setNativeProps",value:function setNativeProps(

nativeProps){
if(!this.isRefDefined()){
console.warn('setNativeProps can\'nt be used on stateless components');
return;
}
if(this.wrappedInstance.setNativeProps){
this.wrappedInstance.setNativeProps(nativeProps);
}
}},{key:"setWrappedInstance",value:function setWrappedInstance(

component){
this.wrappedInstance=component;
}},{key:"hasStyleNameChanged",value:function hasStyleNameChanged(

nextProps,styleNames){
return mapPropsToStyleNames&&this.props!==nextProps&&
// Even though props did change here,
// it doesn't necessary means changed props are those which affect styleName
!_.isEqual(this.state.styleNames,styleNames);
}},{key:"shouldRebuildStyle",value:function shouldRebuildStyle(

nextProps,nextContext,styleNames){
return nextProps.style!==this.props.style||
nextProps.styleName!==this.props.styleName||
nextContext.theme!==this.context.theme||
nextContext.parentStyle!==this.context.parentStyle||
this.hasStyleNameChanged(nextProps,styleNames);
}},{key:"resolveStyleNames",value:function resolveStyleNames(

props){var
styleName=props.styleName;
var styleNames=styleName?styleName.split(/\s/g):[];

if(!mapPropsToStyleNames){
return styleNames;
}

// We only want to keep the unique style names
return _.uniq(mapPropsToStyleNames(styleNames,props));
}},{key:"isRefDefined",value:function isRefDefined()

{
// Define refs on all stateful containers
return WrappedComponent.prototype.render;
}},{key:"resolveAddedProps",value:function resolveAddedProps()

{
var addedProps={};
if(options.withRef){
console.warn('withRef is deprecated');
}
if(this.isRefDefined()){
addedProps.ref=this.setWrappedInstance;
}
return addedProps;
}},{key:"resolveStyle",value:function resolveStyle(

context,props,styleNames){var
parentStyle=context.parentStyle;
var style=(0,_normalizeStyle2.default)(props.style);

var theme=getTheme(context);
var themeStyle=theme.createComponentStyle(componentStyleName,componentStyle);

return(0,_resolveComponentStyle.resolveComponentStyle)(
componentStyleName,
styleNames,
themeStyle,
parentStyle,
style);

}

/**
       * A helper function provided to child components that enables
       * them to get the prop transformations that this component performs.
       *
       * @param props The component props to transform.
       * @returns {*} The transformed props.
       */},{key:"transformProps",value:function transformProps(
props){
var styleNames=this.resolveStyleNames(props);
return babelHelpers.extends({},
props,{
style:this.resolveStyle(
this.context,
props,
styleNames).
componentStyle});

}},{key:"render",value:function render()

{var _state=
this.state,addedProps=_state.addedProps,style=_state.style;
return(
_react2.default.createElement(WrappedComponent,babelHelpers.extends({},
this.props,
addedProps,{
style:style})));

}}]);return StyledComponent;}(_react2.default.PureComponent),_class.contextTypes={theme:_Theme.ThemeShape,// The style inherited from the parent
parentStyle:_react.PropTypes.object,transformProps:_react.PropTypes.func},_class.childContextTypes={// Provide the parent style to child components
parentStyle:_react.PropTypes.object,transformProps:_react.PropTypes.func},_class.propTypes={// Element style that overrides any other style of the component
style:_react.PropTypes.object,// The style variant names to apply to this component,
// multiple variants may be separated with a space character
styleName:_react.PropTypes.string,// Virtual elements will propagate the parent
// style to their children, i.e., the children
// will behave as they are placed directly below
// the parent of a virtual element.
virtual:_react.PropTypes.bool},_class.defaultProps={virtual:options.virtual},_class.displayName="Styled("+componentDisplayName+")",_class.WrappedComponent=WrappedComponent,_class.BaseComponent=getBaseComponent(WrappedComponent),_temp);return(0,_hoistNonReactStatics2.default)(StyledComponent,WrappedComponent);};};