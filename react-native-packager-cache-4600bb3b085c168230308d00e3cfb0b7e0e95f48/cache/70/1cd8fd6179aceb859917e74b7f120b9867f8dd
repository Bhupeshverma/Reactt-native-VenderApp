Object.defineProperty(exports,"__esModule",{value:true});exports.HeroHeader=undefined;var _class,_temp;var _react=require("react");var _react2=babelHelpers.interopRequireDefault(_react);
var _View=require("./View");
var _DriverShape=require("../drivers/DriverShape");
/*
 * HeroHeader adds complex effect to its children components.
 * Connect it to driver to animate it.
 * e.g.:
 * ...
 * const driver = new ScrollDriver();
 *
 * return (
 *    <Screen styleName="full-screen">
 *      <HeroHeader driver={driver}>
 *          <Image />
 *      </HeroHeader>
 *      <ScrollView
 *        {...driver.scrollViewProps}
 *      >
 *        <Title>Title</Title>
 *      </ScrollView>
 *    </Screen>
 * );
 *
 * ...
 * Above code will create scroll dependent parallax animation over Image component
 * where image will be scrolled 1.5 times faster than Title and the image will have
 * a zoom in effect when the scroll reaches the top of the screen (on bounce)
 */var
HeroHeader=exports.HeroHeader=(_temp=_class=function(_Component){babelHelpers.inherits(HeroHeader,_Component);function HeroHeader(){babelHelpers.classCallCheck(this,HeroHeader);return babelHelpers.possibleConstructorReturn(this,(HeroHeader.__proto__||Object.getPrototypeOf(HeroHeader)).apply(this,arguments));}babelHelpers.createClass(HeroHeader,[{key:"render",value:function render()







{var _props=
this.props,driver=_props.driver,children=_props.children;

return(
_react2.default.createElement(_View.View,{animationName:"hero",driver:driver},
children));


}}]);return HeroHeader;}(_react.Component),_class.propTypes={driver:_DriverShape.DriverShape.isRequired,/**
     * Components to which an effect will be applied
     */children:_react2.default.PropTypes.node},_temp);