["dd7fb5508381ca2251f0056854937c2d4e710d23","3029a6022e74a36502fd7c964a181c50aad608a4",["./ViscousFluidInterpolator","./AnimationUtils"],[150,309],{"version":3,"sources":["/home/ziddi/Desktop/Bhupesh/venders/node_modules/react-native-scroller/library/Scroller.js"],"names":["SCROLL_FRICTION","DEFAULT_DURATION","SCROLL_MODE","FLING_MODE","DECELERATION_RATE","Math","log","INFLEXION","START_TENSION","END_TENSION","P1","P2","NB_SAMPLES","SPLINE_POSITION","SPLINE_TIME","GRAVITY_EARTH","x_min","y_min","i","alpha","x_max","x","tx","coef","abs","y_max","y","dy","signum","number","isNaN","NaN","sig","Scroller","flywheel","onScrollCallback","mCurrX","mCurrY","mFinished","mInterpolator","mPpi","mDeceleration","computeDeceleration","mFlywheel","mPhysicalCoeff","mFlingFriction","friction","finished","mMode","mCurrVelocity","mVelocity","timePassed","mStartTime","mDuration","getInterpolation","mDurationReciprocal","mStartX","round","mDeltaX","mStartY","mDeltaY","t","index","parseInt","distanceCoef","velocityCoef","t_inf","t_sup","d_inf","d_sup","mDistance","mFinalX","mFinalY","min","mMaxY","max","mMinY","dx","mLastX","mLastY","startX","startY","startScroll","duration","performAnimation","velocityX","velocityY","minX","maxX","minY","maxY","oldVel","getCurrVelocity","hyp","hypot","ndx","ndy","oldVelocityX","oldVelocityY","velocity","getSplineFlingDuration","coeffX","coeffY","totalDistance","getSplineFlingDistance","mMinX","mMaxX","l","getSplineDeceleration","decelMinusOne","exp","computeScrollOffset","requestAnimationFrame","bind","extend","passed","newX","newY"],"mappings":"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","sourcesContent":["'use strict';\n\n/**\n * Inspired by Android Scroller\n */\n\nimport ViscousFluidInterpolator from './ViscousFluidInterpolator';\nimport {currentAnimationTimeMillis} from'./AnimationUtils';\n\n/**\n * The coefficient of friction applied to flings/scrolls.\n * @type {number}\n */\n//const SCROLL_FRICTION = 0.015;\nconst SCROLL_FRICTION = 0.03;\n\nconst DEFAULT_DURATION = 250;\nconst SCROLL_MODE = 0;\nconst FLING_MODE = 1;\n\nconst DECELERATION_RATE = Math.log(0.78) / Math.log(0.9);\nconst INFLEXION = 0.35; // Tension lines cross at (INFLEXION, 1)\nconst START_TENSION = 0.5;\nconst END_TENSION = 1.0;\nconst P1 = START_TENSION * INFLEXION;\nconst P2 = 1.0 - END_TENSION * (1.0 - INFLEXION);\n\nconst NB_SAMPLES = 100;\nconst SPLINE_POSITION = [];\nconst SPLINE_TIME = [];\n\nconst GRAVITY_EARTH = 9.80665;\n\n(function () {\n  var x_min = 0;\n  var y_min = 0;\n  for (let i = 0; i < NB_SAMPLES; i++) {\n    let alpha = i / NB_SAMPLES;\n\n    let x_max = 1;\n    let x, tx, coef;\n    while (true) {\n      x = x_min + (x_max - x_min) / 2.0;\n      coef = 3.0 * x * (1.0 - x);\n      tx = coef * ((1.0 - x) * P1 + x * P2) + x * x * x;\n      if (Math.abs(tx - alpha) < 1E-5) break;\n      if (tx > alpha) x_max = x;\n      else x_min = x;\n    }\n    SPLINE_POSITION[i] = coef * ((1.0 - x) * START_TENSION + x) + x * x * x;\n\n    let y_max = 1.0;\n    let y, dy;\n    while (true) {\n      y = y_min + (y_max - y_min) / 2.0;\n      coef = 3.0 * y * (1.0 - y);\n      dy = coef * ((1.0 - y) * START_TENSION + y) + y * y * y;\n      if (Math.abs(dy - alpha) < 1E-5) break;\n      if (dy > alpha) y_max = y;\n      else y_min = y;\n    }\n    SPLINE_TIME[i] = coef * ((1.0 - y) * P1 + y * P2) + y * y * y;\n  }\n  SPLINE_POSITION[NB_SAMPLES] = SPLINE_TIME[NB_SAMPLES] = 1.0;\n})();\n\nfunction signum(number) {\n  if (isNaN(number)) {\n    return NaN;\n  }\n  var sig = number;\n  if (number > 0) {\n    sig = 1;\n  }\n  else if (number < 0) {\n    sig = -1;\n  }\n  return sig;\n}\n\nexport default class Scroller {\n  /**\n   *\n   * @param flywheel specify whether or not to support progressive \"flywheel\" behavior in flinging.\n   */\n  constructor(flywheel, onScrollCallback) {\n    this.mCurrX = 0;\n    this.mCurrY = 0;\n    this.mFinished = true;\n    this.mInterpolator = ViscousFluidInterpolator;\n    //this.mPpi = PixelRatio.get() * 160;\n    this.mPpi = 160;\n    this.mDeceleration = this.computeDeceleration(SCROLL_FRICTION);\n    this.mFlywheel = flywheel;\n\n    this.mPhysicalCoeff = this.computeDeceleration(0.84); // look and feel tuning\n\n    this.mFlingFriction = SCROLL_FRICTION;\n    this.onScrollCallback = onScrollCallback;\n  }\n\n  computeDeceleration(friction) {\n    return GRAVITY_EARTH * 39.37 * this.mPpi * friction;\n  }\n\n  /**\n   * Returns whether the scroller has finished scrolling.\n   * @returns {Boolean} True if the scroller has finished scrolling, false otherwise.\n   */\n  isFinished() {\n    return this.mFinished;\n  }\n\n  /**\n   * Force the finished field to a particular value.\n   * @param finished The new finished value.\n   */\n  forceFinished(finished) {\n    this.mFinished = finished;\n  }\n\n  /**\n   * Returns the current X offset in the scroll.\n   * @returns {*} The new X offset as an absolute distance from the origin.\n   */\n  getCurrX() {\n    return this.mCurrX;\n  }\n\n  /**\n   * Returns the current Y offset in the scroll.\n   * @returns {*} The new Y offset as an absolute distance from the origin.\n   */\n  getCurrY() {\n    return this.mCurrY;\n  }\n\n  getCurrVelocity() {\n    return this.mMode === FLING_MODE ?\n      this.mCurrVelocity : this.mVelocity - this.mDeceleration * this.timePassed() / 2000.0;\n  }\n\n  computeScrollOffset() {\n    if (this.mFinished) {\n      this.onScrollCallback && this.onScrollCallback(0, 0, this);\n      return false;\n    }\n\n    var timePassed = currentAnimationTimeMillis() - this.mStartTime;\n\n    if (timePassed < this.mDuration) {\n      switch (this.mMode) {\n        case SCROLL_MODE:\n          let x = this.mInterpolator.getInterpolation(timePassed * this.mDurationReciprocal);\n          this.mCurrX = this.mStartX + Math.round(x * this.mDeltaX);\n          this.mCurrY = this.mStartY + Math.round(x * this.mDeltaY);\n          break;\n        case FLING_MODE:\n          let t = timePassed / this.mDuration;\n          let index = parseInt(NB_SAMPLES * t);\n          let distanceCoef = 1;\n          let velocityCoef = 0;\n          if (index < NB_SAMPLES) {\n            let t_inf = index / NB_SAMPLES;\n            let t_sup = (index + 1) / NB_SAMPLES;\n            let d_inf = SPLINE_POSITION[index];\n            let d_sup = SPLINE_POSITION[index + 1];\n            velocityCoef = (d_sup - d_inf) / (t_sup - t_inf);\n            distanceCoef = d_inf + (t - t_inf) * velocityCoef;\n          }\n\n          this.mCurrVelocity = velocityCoef * this.mDistance / this.mDuration * 1000;\n\n          this.mCurrX = this.mStartX + Math.round(distanceCoef * (this.mFinalX - this.mStartX));\n          // Pin to mMinX <= mCurrX <= mMaxX\n          //this.mCurrX = Math.min(this.mCurrX, this.mMaxX);\n          //this.mCurrX = Math.max(this.mCurrX, this.mMinX);\n\n          this.mCurrY = this.mStartY + Math.round(distanceCoef * (this.mFinalY - this.mStartY));\n          // Pin to mMinY <= mCurrY <= mMaxY\n          this.mCurrY = Math.min(this.mCurrY, this.mMaxY);\n          this.mCurrY = Math.max(this.mCurrY, this.mMinY);\n\n          if (this.mCurrX == this.mFinalX && this.mCurrY == this.mFinalY) {\n            this.mFinished = true;\n          }\n\n          break;\n      }\n    }\n    else {\n      this.mCurrX = this.mFinalX;\n      this.mCurrY = this.mFinalY;\n      this.mFinished = true;\n    }\n\n    var dx = this.mCurrX - this.mLastX;\n    var dy = this.mCurrY - this.mLastY;\n\n    this.mLastX = this.mCurrX;\n    this.mLastY = this.mCurrY;\n\n    this.onScrollCallback && this.onScrollCallback(dx, dy, this);\n\n    if(dx === 0 && dy === 0 && this.mFinished) {\n      return false;\n    }\n    return true;\n  }\n\n  startScroll(startX, startY, dx, dy) {\n    startScroll(startX, startY, dx, dy, DEFAULT_DURATION);\n  }\n\n  startScroll(startX, startY, dx, dy, duration) {\n    this.mMode = SCROLL_MODE;\n    this.mFinished = false;\n    this.mDuration = duration;\n    this.mStartTime = currentAnimationTimeMillis();\n    this.mStartX = startX;\n    this.mStartY = startY;\n    this.mFinalX = startX + dx;\n    this.mFinalY = startY + dy;\n    this.mDeltaX = dx;\n    this.mDeltaY = dy;\n    this.mDurationReciprocal = 1.0 / this.mDuration;\n\n    this.mLastX = this.mStartX;\n    this.mLastY = this.mStartY;\n\n    this.performAnimation();\n  }\n\n  /**\n   * Start scrolling based on a fling gesture. The distance travelled will\n   * depend on the initial velocity of the fling.\n   * @param startX\n   * @param startY\n   * @param velocityX Initial velocity of the fling (X) measured in dp or pt per second\n   * @param velocityY Initial velocity of the fling (Y) measured in dp or pt per second\n   * @param minX\n   * @param maxX\n   * @param minY\n   * @param maxY\n   */\n  fling(startX, startY, velocityX, velocityY,\n        minX, maxX, minY, maxY) {\n    // Continue a scroll or fling in progress\n    if (this.mFlywheel && !this.mFinished) {\n      let oldVel = this.getCurrVelocity();\n\n      let dx = this.mFinalX - this.mStartX;\n      let dy = this.mFinalY - this.mStartY;\n      let hyp = Math.hypot(dx, dy);\n\n      let ndx = dx / hyp;\n      let ndy = dy / hyp;\n\n      let oldVelocityX = ndx * oldVel;\n      let oldVelocityY = ndy * oldVel;\n      if (signum(velocityX) === signum(oldVelocityX) &&\n        signum(velocityY) === signum(oldVelocityY)) {\n        velocityX += oldVelocityX;\n        velocityY += oldVelocityY;\n      }\n    }\n\n    this.mMode = FLING_MODE;\n    this.mFinished = false;\n\n    let velocity = Math.hypot(velocityX, velocityY);\n\n    this.mVelocity = velocity;\n    this.mDuration = this.getSplineFlingDuration(velocity);\n    this.mStartTime = currentAnimationTimeMillis();\n    this.mStartX = startX;\n    this.mStartY = startY;\n\n    let coeffX = velocity == 0 ? 1.0 : velocityX / velocity;\n    let coeffY = velocity == 0 ? 1.0 : velocityY / velocity;\n\n    let totalDistance = this.getSplineFlingDistance(velocity);\n    this.mDistance = totalDistance * signum(velocity);\n\n    this.mMinX = minX;\n    this.mMaxX = maxX;\n    this.mMinY = minY;\n    this.mMaxY = maxY;\n\n    this.mFinalX = startX + Math.round(totalDistance * coeffX);\n    // Pin to mMinX <= mFinalX <= mMaxX\n    this.mFinalX = Math.min(this.mFinalX, this.mMaxX);\n    this.mFinalX = Math.max(this.mFinalX, this.mMinX);\n\n    this.mFinalY = startY + Math.round(totalDistance * coeffY);\n    // Pin to mMinY <= mFinalY <= mMaxY\n    this.mFinalY = Math.min(this.mFinalY, this.mMaxY);\n    this.mFinalY = Math.max(this.mFinalY, this.mMinY);\n\n    this.mLastX = this.mStartX;\n    this.mLastY = this.mStartY;\n\n    this.performAnimation();\n  }\n\n  getSplineDeceleration(velocity) {\n    return Math.log(INFLEXION * Math.abs(velocity) / (this.mFlingFriction * this.mPhysicalCoeff));\n  }\n\n  getSplineFlingDuration(velocity) {\n    var l = this.getSplineDeceleration(velocity);\n    var decelMinusOne = DECELERATION_RATE - 1.0;\n    return 1000.0 * Math.exp(l / decelMinusOne);\n  }\n\n  getSplineFlingDistance(velocity) {\n    var l = this.getSplineDeceleration(velocity);\n    var decelMinusOne = DECELERATION_RATE - 1.0;\n    return this.mFlingFriction * this.mPhysicalCoeff * Math.exp(DECELERATION_RATE / decelMinusOne * l);\n  }\n\n  performAnimation() {\n    if (this.computeScrollOffset()) {\n      requestAnimationFrame(this.performAnimation.bind(this));\n    } else {\n    }\n  }\n\n  abortAnimation() {\n    this.mCurrX = this.mFinalX;\n    this.mCurrY = this.mFinalY;\n    this.mFinished = true;\n  }\n\n  extendDuration(extend) {\n    var passed = timePassed();\n    this.mDuration = passed + extend;\n    this.mDurationReciprocal = 1.0 / this.mDuration;\n    this.mFinished = false;\n  }\n\n  timePassed() {\n    return currentAnimationTimeMillis() - this.mStartTime;\n  }\n\n  setFinalX(newX) {\n    this.mFinalX = newX;\n    this.mDeltaX = this.mFinalX - this.mStartX;\n    this.mFinished = false;\n  }\n\n  setFinalY(newY) {\n    this.mFinalY = newY;\n    this.mDeltaY = this.mFinalY - this.mStartY;\n    this.mFinished = false;\n  }\n\n  debugInfo() {\n    return 'cur=' + this.mCurrX + ' ' + this.mCurrY + ', final=' + this.mFinalX + ' ' + this.mFinalY;\n  }\n}"]}]