["92df1af416bf587a7344a47a33e4352417c1e27d","bd43b61b360b25b3141072446808fd7b88d73ed2",["react","react-native","@shoutem/theme","@shoutem/animation","./VideoSourceReader"],[134,231,270,315,372],{"version":3,"sources":["/home/ziddi/Desktop/Bhupesh/venders/node_modules/@shoutem/ui/components/Video/Video.js"],"names":["createSourceObject","source","playerParams","poster","sourceReader","uri","url","getUrl","isEmbeddableVideo","HTML","html","Video","props","width","height","style","container","Component","propTypes","number","object","shape","string","defaultProps","showinfo","AnimatedVideo","StyledVideo"],"mappings":";;;;;;;AAAA;;;;AAIA;;AAKA;;AACA;;AACA;;;;AAEA,SAASA,kBAAT,CAA4BC,MAA5B,EAAoCC,YAApC,EAAkDC,MAAlD,EAA0D;AACxD,MAAMC,eAAe,gCAAsBH,OAAOI,GAA7B,EAAkCH,YAAlC,CAArB;AACA,MAAMI,MAAMF,aAAaG,MAAb,EAAZ;;AAEA,MAAIH,aAAaI,iBAAb,EAAJ,EAAsC;AACpC,WAAO;AACLH,WAAKC;AADA,KAAP;AAGD;;AAED,MAAMG,4DACwCN,MADxC,2CAEcG,GAFd,2BAAN;;AAMA,SAAO;AACLI,UAAMD;AADD,GAAP;AAGD;;IAWKE,K;;;;;;;;;;6BAmBK;AAAA,mBAQH,KAAKC,KARF;AAAA,UAELC,KAFK,UAELA,KAFK;AAAA,UAGLC,MAHK,UAGLA,MAHK;AAAA,UAILb,MAJK,UAILA,MAJK;AAAA,UAKLc,KALK,UAKLA,KALK;AAAA,UAMLb,YANK,UAMLA,YANK;AAAA,UAOLC,MAPK,UAOLA,MAPK;;;AAUP,aACE;AAAA;AAAA,UAAM,OAAOY,MAAMC,SAAnB;AACE;AACE,iBAAO,EAACH,YAAD,EAAQC,cAAR,EADT;AAEE,kBAAQd,mBAAmBC,MAAnB,EAA2BC,YAA3B,EAAyCC,MAAzC,CAFV;AAGE,yBAAe;AAHjB;AADF,OADF;AASD;;;EAtCiB,gBAAMc,S,UACjBC,S,GAAY;AACjBL,SAAO,iBAAUM,MADA;AAEjBL,UAAQ,iBAAUK,MAFD;;AAIjBjB,gBAAc,iBAAUkB,MAJP;AAKjBnB,UAAQ,iBAAUoB,KAAV,CAAgB;AACtBhB,SAAK,iBAAUiB;AADO,GAAhB,CALS;AAQjBP,SAAO,iBAAUK,MARA;AASjBjB,UAAQ,iBAAUmB;AATD,C,SAYZC,Y,GAAe;AACpBrB,gBAAc;AACZsB,cAAU;AADE;AADM,C;;;AA4BxB,IAAMC,gBAAgB,iCAAiBd,KAAjB,CAAtB;AACA,IAAMe,cAAc,yBAAa,kBAAb,EAAiCD,aAAjC,CAApB;;QAGiBd,K,GAAfe,W","sourcesContent":["import React, {\n  PropTypes,\n} from 'react';\n\nimport {\n  View,\n  WebView,\n} from 'react-native';\n\nimport { connectStyle } from '@shoutem/theme';\nimport { connectAnimation } from '@shoutem/animation';\nimport VideoSourceReader from './VideoSourceReader';\n\nfunction createSourceObject(source, playerParams, poster) {\n  const sourceReader = new VideoSourceReader(source.uri, playerParams);\n  const url = sourceReader.getUrl();\n\n  if (sourceReader.isEmbeddableVideo()) {\n    return {\n      uri: url,\n    };\n  }\n\n  const HTML = `\n    <video width=\"100%\" height=\"auto\" poster=\"${poster}\" controls  >\n       <source src=\"${url}\" >\n     </video>\n  `;\n\n  return {\n    html: HTML,\n  };\n}\n\n/**\n * Renders a Video based on the source type\n * if source is an url to a web player the\n * it is displayed in a WebView, if not\n * a Video HTML element is displayed in the\n * WebView.\n *\n * @returns {*}\n */\nclass Video extends React.Component {\n  static propTypes = {\n    width: PropTypes.number,\n    height: PropTypes.number,\n    // `playerParams` currently only works for Youtube\n    playerParams: PropTypes.object,\n    source: PropTypes.shape({\n      uri: PropTypes.string,\n    }),\n    style: PropTypes.object,\n    poster: PropTypes.string,\n  };\n\n  static defaultProps = {\n    playerParams: {\n      showinfo: 0,\n    },\n  };\n\n  render() {\n    const {\n      width,\n      height,\n      source,\n      style,\n      playerParams,\n      poster,\n    } = this.props;\n\n    return (\n      <View style={style.container}>\n        <WebView\n          style={{width, height}}\n          source={createSourceObject(source, playerParams, poster)}\n          scrollEnabled={false}\n        />\n      </View>\n    );\n  }\n}\n\nconst AnimatedVideo = connectAnimation(Video);\nconst StyledVideo = connectStyle('shoutem.ui.Video')(AnimatedVideo);\n\nexport {\n  StyledVideo as Video,\n};\n"]}]