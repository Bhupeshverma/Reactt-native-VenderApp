["47884a9eb6f3b66c3a225136f565962c84da6b1d","571171d3afdc433d62807cd60ca83817d0bd3126",[],[],{"version":3,"sources":["/home/ziddi/Desktop/Bhupesh/venders/node_modules/@shoutem/animation/src/animations/animations.js"],"names":["animations","heroAnimation","driver","layout","transform","scale","value","interpolate","inputRange","height","outputRange","extrapolateRight","translateY","extrapolateLeft","zoomOutAnimation","animationOptions","maxFactor","zoomInAnimation","fadeOutAnimation","opacity","extrapolate","fadeInAnimation","slideInAnimation","offset","x","y","translateX","slideOutAnimation","rotateAnimation","axis","angle","toUpperCase"],"mappings":"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","sourcesContent":["export const animations = {\n  heroAnimation(driver, { layout }) {\n    return {\n      transform: [\n        {\n          scale: driver.value.interpolate({\n            inputRange: [-0.9 * layout.height, 0],\n            outputRange: [3, 1],\n            extrapolateRight: 'clamp',\n          }),\n        }, {\n          translateY: driver.value.interpolate({\n            inputRange: [-100, 100],\n            outputRange: [-50, 50],\n            extrapolateLeft: 'clamp',\n          }),\n        },\n      ],\n    };\n  },\n  zoomOutAnimation(driver, { animationOptions }) {\n    const { inputRange, maxFactor } = animationOptions;\n    return {\n      transform: [\n        {\n          scale: driver.value.interpolate({\n            inputRange,\n            outputRange: [maxFactor, 1],\n            extrapolateRight: 'clamp',\n          }),\n        },\n      ],\n    };\n  },\n  zoomInAnimation(driver, { animationOptions }) {\n    const { inputRange, maxFactor } = animationOptions;\n    return {\n      transform: [\n        {\n          scale: driver.value.interpolate({\n            inputRange,\n            outputRange: [1, maxFactor],\n            extrapolateRight: 'clamp',\n          }),\n        },\n      ],\n    };\n  },\n  fadeOutAnimation(driver, { animationOptions }) {\n    const { inputRange } = animationOptions;\n    return {\n      opacity: driver.value.interpolate({\n        inputRange,\n        outputRange: [1, 0],\n        extrapolate: 'clamp',\n      }),\n    };\n  },\n  fadeInAnimation(driver, { animationOptions }) {\n    const { inputRange } = animationOptions;\n    return {\n      opacity: driver.value.interpolate({\n        inputRange,\n        outputRange: [0, 1],\n        extrapolate: 'clamp',\n      }),\n    };\n  },\n  slideInAnimation(driver, { animationOptions }) {\n    const { offset, inputRange } = animationOptions;\n    const { x = 0, y = 0 } = offset;\n\n    return {\n      transform: [\n        {\n          translateY: driver.value.interpolate({\n            inputRange,\n            outputRange: [y, 0],\n            extrapolate: 'clamp',\n          }),\n        },\n        {\n          translateX: driver.value.interpolate({\n            inputRange,\n            outputRange: [x, 0],\n            extrapolate: 'clamp',\n          }),\n        }\n      ],\n    };\n  },\n  slideOutAnimation(driver, { animationOptions }) {\n    const { offset, inputRange } = animationOptions;\n    const { x = 0, y = 0 } = offset;\n    return {\n      transform: [\n        {\n          translateY: driver.value.interpolate({\n            inputRange,\n            outputRange: [0, y],\n            extrapolate: 'clamp',\n          }),\n        }, {\n          translateX: driver.value.interpolate({\n            inputRange,\n            outputRange: [0, x],\n            extrapolate: 'clamp',\n          }),\n        }\n      ],\n    };\n  },\n  rotateAnimation(driver, { animationOptions }) {\n    const {\n      inputRange,\n      axis = '',\n      angle\n    } = animationOptions;\n\n    return {\n      transform: [\n        {\n          [`rotate${axis.toUpperCase()}`]: driver.value.interpolate({\n            inputRange,\n            outputRange: [\"0deg\", angle],\n          }),\n        },\n      ],\n    };\n  },\n};\n"]}]