["ab2822424b411f0809e0137e8069897cbc1c7705","01669422d0830b309fe7706295476f42bfd9ce39",["react","react-native","lodash","../Button","../Icon","../Text","../View","../LinearGradient","../TouchableOpacity","@shoutem/theme","@shoutem/animation"],[142,239,279,374,409,442,475,518,573,619,664],{"version":3,"sources":["/home/ziddi/Desktop/Bhupesh/venders/node_modules/@shoutem/ui/components/DropDownMenu/DropDownModal.js"],"names":["window","get","DropDownModal","props","state","optionHeight","shouldRenderModalContent","close","bind","emitOnOptionSelectedEvent","renderGradient","renderRow","selectOption","onOptionLayout","ds","DataSource","rowHasChanged","r1","r2","timingDriver","nextProps","wasVisible","visible","isVisible","toValue","easeInEaseOut","setState","event","height","nativeEvent","layout","visibleOptions","style","DEFAULT_VISIBLE_OPTIONS","option","selectedOption","onClose","onOptionSelected","listViewHeight","calculateListViewHeight","flex","maxHeight","options","getVisibleOptions","optionsSize","size","backgroundColor","modal","screenHeight","gradientHeight","transparencyHeight","bufferHeight","bufferColor","invertedColor","gradientConfig","location","color","map","breakpoint","titleProperty","renderOption","optionItem","onPress","modalItem","listViewStyle","resolveListViewStyle","dataSource","cloneWithRows","filter","renderFooter","propTypes","PropTypes","func","array","isRequired","any","string","valueProperty","number","bool","object","defaultProps","toUpperCase","StyledModal"],"mappings":"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","sourcesContent":["import React, {\n  Component,\n} from 'react';\nimport {\n  Modal,\n  ListView,\n  LayoutAnimation,\n  Dimensions,\n} from 'react-native';\nimport _ from 'lodash';\n\nimport { Button } from '../Button';\nimport { Icon } from '../Icon';\nimport { Text } from '../Text';\nimport { View } from '../View';\nimport { LinearGradient } from '../LinearGradient';\nimport { TouchableOpacity } from '../TouchableOpacity';\n\nimport { connectStyle, changeColorAlpha } from '@shoutem/theme';\n\nimport {\n  TimingDriver,\n  FadeIn,\n  ZoomOut,\n} from '@shoutem/animation';\n\nconst window = Dimensions.get('window');\n\nclass DropDownModal extends Component {\n  static propTypes = {\n    /**\n     * Callback that is called when dropdown option is selected\n     */\n    onOptionSelected: React.PropTypes.func,\n    /**\n     * Collection of objects which will be shown as options in DropDownMenu\n     */\n    options: React.PropTypes.array.isRequired,\n    /**\n     * Selected option that will be shown.\n     */\n    selectedOption: React.PropTypes.any.isRequired,\n    /**\n     * Key name that represents option's string value,\n     * and it will be displayed to the user in the UI\n     */\n    titleProperty: React.PropTypes.string.isRequired,\n    /**\n     * Key name that represents option's value\n     */\n    valueProperty: React.PropTypes.string.isRequired,\n    /**\n     * Number of options shown without scroll.\n     * Can be set trough DropDown style.visibleOptions.\n     * Prop definition overrides style.\n     */\n    visibleOptions: React.PropTypes.number,\n    /**\n     * Optional render function, for every item in the list.\n     * Input parameter should be shaped as one of the items from the\n     * options object\n     */\n    renderOption: React.PropTypes.func,\n    /**\n     * Visibility flag, controling the modal visibility\n     */\n    visible: React.PropTypes.bool,\n    /**\n     * Callback that is called when modal should be closed\n     */\n    onClose: React.PropTypes.func,\n    style: React.PropTypes.object,\n  };\n\n  static defaultProps = {\n    renderOption: (option, titleProperty) => (\n      <Text>{option[titleProperty].toUpperCase()}</Text>),\n  };\n\n  static DEFAULT_VISIBLE_OPTIONS = 8;\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      optionHeight: 0,\n      shouldRenderModalContent: false,\n    };\n    this.close = this.close.bind(this);\n    this.emitOnOptionSelectedEvent = this.emitOnOptionSelectedEvent.bind(this);\n    this.renderGradient = this.renderGradient.bind(this);\n    this.renderRow = this.renderRow.bind(this);\n    this.selectOption = this.selectOption.bind(this);\n    this.onOptionLayout = this.onOptionLayout.bind(this);\n    this.ds = new ListView.DataSource({ rowHasChanged: (r1, r2) => r1 !== r2 });\n  }\n\n  componentWillMount() {\n    this.timingDriver = new TimingDriver();\n  }\n\n  componentWillReceiveProps(nextProps) {\n    const { visible: wasVisible } = this.props;\n    const { visible: isVisible } = nextProps;\n\n    if (!wasVisible && isVisible) {\n      this.timingDriver.toValue(1, () => {\n        LayoutAnimation.easeInEaseOut();\n        this.setState({ shouldRenderModalContent: true });\n      });\n    }\n  }\n\n  onOptionLayout(event) {\n    const { height } = event.nativeEvent.layout;\n    this.setState({ optionHeight: height });\n  }\n\n  getVisibleOptions() {\n    const { visibleOptions, style } = this.props;\n    return visibleOptions || style.visibleOptions || DropDownModal.DEFAULT_VISIBLE_OPTIONS;\n  }\n\n  selectOption(option) {\n    this.close();\n    if (option !== this.props.selectedOption) {\n      this.emitOnOptionSelectedEvent(option);\n    }\n  }\n\n  close() {\n    if (this.props.onClose) {\n      this.timingDriver.toValue(0, () => {\n        this.props.onClose();\n        this.setState({ shouldRenderModalContent: false });\n      });\n    }\n  }\n\n  emitOnOptionSelectedEvent(option) {\n    if (this.props.onOptionSelected) {\n      this.props.onOptionSelected(option);\n    }\n  }\n\n  resolveListViewStyle() {\n    const listViewHeight = this.calculateListViewHeight();\n    return { flex: 0, maxHeight: listViewHeight };\n  }\n\n  calculateListViewHeight() {\n    const { optionHeight } = this.state;\n    const { options } = this.props;\n    const visibleOptions = this.getVisibleOptions();\n    const optionsSize = _.size(options);\n\n    return optionsSize > visibleOptions ?\n      visibleOptions * optionHeight : optionsSize * optionHeight;\n  }\n\n  renderFooter() {\n    return (\n      <View styleName=\"md-gutter-top\" />\n    );\n  }\n\n  renderGradient() {\n    const { style } = this.props;\n    const { backgroundColor } = style.modal;\n    const { optionHeight } = this.state;\n\n    // We divide the modal screen per key areas to which we apply a layer of gradient\n    // Screen ratio is represented in (0 - 1) format, where the ratio of 1 represents the entire\n    // screen height. Screen is then divided into 5 areas, marking the following elements ->\n    // Buffer area, where the layer is filled with default background color of the modal window,\n    // with no transparency. This area is applied above and below the list. Gradient area,\n    // where we apply the gradient transitioning the layer transparency from 1 -> 0. This\n    // section corrseponds to one list option height. Transparency area, where the layer is\n    // completely transparent, allowing us to see list options. Screen is then divided in the\n    // following fashion\n    //  -> Buffer area -> Gradient area -> Transparency area -> Gradient Area -> Buffer Area\n\n    const listViewHeight = this.calculateListViewHeight();\n    const screenHeight = window.height;\n    const gradientHeight = optionHeight;\n    const transparencyHeight = listViewHeight - optionHeight * 2;\n    const bufferHeight = (screenHeight - listViewHeight) / 2;\n\n    const bufferColor = backgroundColor;\n    const invertedColor = changeColorAlpha(backgroundColor, 0);\n\n    // This config array holds the appropriate screen segment ratios per calculcations above\n    // Every screen segment has it's corresponding color to transition to.\n\n    const gradientConfig = [{\n      location: 0,\n      color: bufferColor\n    },{\n      location: bufferHeight / screenHeight,\n      color: backgroundColor\n    },{\n      location: (bufferHeight + gradientHeight) / screenHeight,\n      color: invertedColor\n    },{\n      location: (bufferHeight + gradientHeight + transparencyHeight) / screenHeight,\n      color: invertedColor,\n    },{\n      location: (bufferHeight + listViewHeight) / screenHeight,\n      color: backgroundColor\n    },{\n      location: 1,\n      color: bufferColor\n    }];\n\n    return (\n      <LinearGradient\n        pointerEvents=\"none\"\n        styleName=\"fill-parent\"\n        locations={_.map(gradientConfig, breakpoint => breakpoint.location)}\n        colors={_.map(gradientConfig, breakpoint => breakpoint.color)}\n      />\n    );\n  }\n\n  renderRow(option) {\n    const {\n      style,\n      titleProperty,\n      renderOption,\n    } = this.props;\n\n    const optionItem = renderOption(option, titleProperty);\n    const onPress = () => this.selectOption(option);\n\n    return (\n      <TouchableOpacity onPress={onPress} style={style.modalItem} onLayout={this.onOptionLayout}>\n        {optionItem}\n      </TouchableOpacity>\n    );\n  }\n\n  render() {\n    const { titleProperty, options, style } = this.props;\n    const { shouldRenderModalContent } = this.state;\n    if (_.size(options) === 0) {\n      return null;\n    }\n\n    const listViewStyle = this.resolveListViewStyle();\n    const dataSource = this.ds.cloneWithRows(options.filter((option) => option[titleProperty]));\n\n    return (\n      <Modal\n        visible={this.props.visible}\n        onRequestClose={this.close}\n        transparent\n      >\n        <ZoomOut driver={this.timingDriver} maxFactor={1.1} style={{ flex: 1 }}>\n          <FadeIn driver={this.timingDriver} style={{ flex: 1 }}>\n            <View style={style.modal} styleName=\"vertical\">\n              {shouldRenderModalContent ?\n                <ListView\n                  scrollRenderAheadDistance={50}\n                  dataSource={dataSource}\n                  renderRow={this.renderRow}\n                  style={listViewStyle}\n                  renderFooter={this.renderFooter}\n                /> : null}\n              {this.renderGradient()}\n              <Button onPress={this.close} styleName=\"clear close\">\n                <Icon name=\"close\" />\n              </Button>\n            </View>\n          </FadeIn>\n        </ZoomOut>\n\n      </Modal>\n    );\n  }\n}\n\nconst StyledModal = connectStyle('shoutem.ui.DropDownModal')(DropDownModal);\n\nexport {\n  StyledModal as DropDownModal,\n};\n"]}]