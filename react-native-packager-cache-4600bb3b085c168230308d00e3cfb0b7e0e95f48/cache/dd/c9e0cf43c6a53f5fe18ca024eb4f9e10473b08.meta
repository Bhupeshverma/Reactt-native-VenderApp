["649a645139bf28a2b638b1f7d82899013bcfdf38","4ded447607ce3ec5a6053b4b53b756117937ad60",["./Rect"],[360],{"version":3,"sources":["/home/ziddi/Desktop/Bhupesh/venders/node_modules/react-native-view-transformer/library/transform/TransformUtils.js"],"names":["fitCenterRect","transformedRect","getTransform","alignedRect","availableTranslateSpace","Rect","Transform","scale","translateX","translateY","pivot","isValidNumber","number","isNaN","isValidRect","rect","isValid","isValidTransform","transform","contentAspectRatio","containerRect","w","width","h","height","viewAspectRatio","centerX","centerY","Error","undefined","pivotX","x","pivotY","y","resultRect","dx","dy","offset","fromRect","toRect","viewPortRect","left","right","top","bottom","copy"],"mappings":"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","sourcesContent":["'use strict';\n\nimport Rect from './Rect';\n\nexport {Rect};\n\nexport class Transform {\n  constructor(scale, translateX, translateY, pivot) {\n    this.scale = scale;\n    this.translateX = translateX;\n    this.translateY = translateY;\n    this.pivot = pivot;\n  }\n}\n\nfunction isValidNumber(number) {\n  if (typeof number === 'number') {\n    if (!isNaN(number)) {\n      return true;\n    }\n  }\n  return false;\n}\n\nfunction isValidRect(rect) {\n  if (rect instanceof Rect && rect.isValid()) {\n    return true;\n  }\n  return false;\n}\n\nfunction isValidTransform(transform) {\n  if (transform && isValidNumber(transform.scale) && isValidNumber(transform.translateX) && isValidNumber(transform.translateY)) {\n    return true;\n  }\n  return false;\n}\n\nexport function fitCenterRect(contentAspectRatio, containerRect:Rect) {\n  let w = containerRect.width();\n  let h = containerRect.height();\n  let viewAspectRatio = w / h;\n\n  if (contentAspectRatio > viewAspectRatio) {\n    h = w / contentAspectRatio;\n  } else {\n    w = h * contentAspectRatio;\n  }\n\n  return new Rect(\n    containerRect.centerX() - w / 2,\n    containerRect.centerY() - h / 2,\n    containerRect.centerX() + w / 2,\n    containerRect.centerY() + h / 2\n  );\n}\n\n\n/**\n * The React Native transform system use the center of the view as the pivot when scaling.\n * The translations are applied before scaling.\n * @param rect\n * @param transform\n * @returns {*}\n */\nexport function transformedRect(rect:Rect, transform:Transform) {\n  if (!isValidRect(rect)) {\n    throw new Error('transformedRect...invalid rect');\n  }\n  if (!isValidTransform(transform)) {\n    throw new Error('transformedRect...invalid transform');\n  }\n\n  let scale = transform.scale;\n  let translateX = transform.translateX;\n  let translateY = transform.translateY;\n\n  let pivot = transform.pivot;\n  if (pivot === undefined || pivot === null) {\n    let width = rect.width() * scale;\n    let height = rect.height() * scale;\n    let centerX = rect.centerX() + translateX * scale;\n    let centerY = rect.centerY() + translateY * scale;\n\n    return new Rect(\n      centerX - width / 2,\n      centerY - height / 2,\n      centerX + width / 2,\n      centerY + height / 2\n    );\n  } else {\n    let pivotX = pivot.x;\n    let pivotY = pivot.y;\n    if (!isValidNumber(pivotX) || !isValidNumber(pivotY)) {\n      throw new Error('transformedRect...invalid pivot x=' + pivot.x + ', y=' + pivot.y);\n    }\n\n    //first make the center still\n    let resultRect = transformedRect(rect, {\n      scale, translateX, translateY\n    });\n\n    //the pivot moved during scaling, now move it back\n    let dx = (scale - 1) * (pivotX - resultRect.centerX());\n    let dy = (scale - 1) * (pivotY - resultRect.centerY());\n    return resultRect.offset(-dx, -dy);\n  }\n}\n\n/**\n * Calculate the transform from fromRect to toRect\n * @param fromRect\n * @param toRect\n * @returns {Transform}\n */\nexport function getTransform(fromRect, toRect) {\n  let scale = toRect.width() / fromRect.width();\n  let translateX = (toRect.centerX() - fromRect.centerX()) / scale;\n  let translateY = (toRect.centerY() - fromRect.centerY()) / scale;\n\n  return new Transform(scale, translateX, translateY);\n}\n\n/**\n * Align edges of the rect with the viewport to avoid unnecessary blank space. NO scaling is performed here.\n * @param rect\n * @param viewPortRect\n * @returns {*|{line, column}|{column, line}|{x}}\n */\nexport function alignedRect(rect:Rect, viewPortRect:Rect) {\n  let dx = 0, dy = 0;\n\n  if (rect.width() > viewPortRect.width()) {\n    if (rect.left > viewPortRect.left) {\n      dx = viewPortRect.left - rect.left;\n    } else if (rect.right < viewPortRect.right) {\n      dx = viewPortRect.right - rect.right;\n    }\n  } else {\n    dx = viewPortRect.centerX() - rect.centerX();\n  }\n\n  if (rect.height() > viewPortRect.height()) {\n    if (rect.top > viewPortRect.top) {\n      dy = viewPortRect.top - rect.top;\n    } else if (rect.bottom < viewPortRect.bottom) {\n      dy = viewPortRect.bottom - rect.bottom;\n    }\n  } else {\n    dy = viewPortRect.centerY() - rect.centerY();\n  }\n\n  return rect.copy().offset(dx, dy);\n}\n\nexport function availableTranslateSpace(rect, viewPortRect) {\n  return {\n    left: viewPortRect.left - rect.left,\n    right: rect.right - viewPortRect.right,\n    top: viewPortRect.top - rect.top,\n    bottom: rect.bottom - viewPortRect.bottom\n  };\n}"]}]