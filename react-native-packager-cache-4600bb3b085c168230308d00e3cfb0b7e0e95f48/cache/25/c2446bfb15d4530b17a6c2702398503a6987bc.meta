["78fa83677410e4f7e385f7457f46546c700fdee9","5b07bd9fa2ad55e85d93de914018fc38a318d992",["react-native"],[240],{"version":3,"sources":["/home/ziddi/Desktop/Bhupesh/venders/node_modules/@shoutem/animation/src/utils/animated-style.js"],"names":["isAnimatedStyleValue","value","interpolate","getAnimatedStyleValue","toJSON","findAnimatedValue","animatedStyleValue","Value","parent","_parent","undefined","addAnimatedValueListener","styleValue","listener","animatedValue","addListener","removeAnimatedValueListener","listenerId","removeListener"],"mappings":";;;;;AAAA;;AAQO,IAAMA,sDAAuB,SAAvBA,oBAAuB,CAACC,KAAD;AAAA,SAAWA,SAAS,OAAOA,MAAMC,WAAb,KAA6B,UAAjD;AAAA,CAA7B;;AASA,IAAMC,wDAAwB,SAAxBA,qBAAwB,CAACF,KAAD,EAAW;AAC9C,MAAID,qBAAqBC,KAArB,CAAJ,EAAiC;AAG/B,WAAOA,MAAMG,MAAN,EAAP;AACD;;AAED,SAAOH,KAAP;AACD,CARM;;AAmBP,IAAMI,oBAAoB,SAApBA,iBAAoB,CAACC,kBAAD,EAAwB;AAChD,MAAIA,8BAA8B,sBAASC,KAA3C,EAAkD;AAChD,WAAOD,kBAAP;AACD;;AAED,MAAME,SAASF,mBAAmBG,OAAlC;AACA,MAAID,MAAJ,EAAY;AACV,WAAOH,kBAAkBG,MAAlB,CAAP;AACD;;AAED,SAAOE,SAAP;AACD,CAXD;;AAwBO,IAAMC,8DAA2B,SAA3BA,wBAA2B,CAACC,UAAD,EAAaC,QAAb,EAA0B;AAChE,MAAMC,gBAAgBT,kBAAkBO,UAAlB,CAAtB;AACA,MAAIE,aAAJ,EAAmB;AACjB,WAAOA,cAAcC,WAAd,CAA0BF,QAA1B,CAAP;AACD;;AAED,SAAOH,SAAP;AACD,CAPM;;AAkBA,IAAMM,oEAA8B,SAA9BA,2BAA8B,CAACJ,UAAD,EAAaK,UAAb,EAA4B;AACrE,MAAMH,gBAAgBT,kBAAkBO,UAAlB,CAAtB;AACA,MAAIE,aAAJ,EAAmB;AACjBA,kBAAcI,cAAd,CAA6BD,UAA7B;AACD;AACF,CALM","sourcesContent":["import { Animated } from 'react-native';\n\n/**\n * Checks if a style value is animated.\n *\n * @param value The value to check.\n * @returns {boolean} `true` if a value is animated, `false` otherwise.\n */\nexport const isAnimatedStyleValue = (value) => value && typeof value.interpolate === 'function';\n\n/**\n * Gets the current value of an animated style value. If\n * a value isn't animated, the original value will be returned.\n *\n * @param value The style value.\n * @return {*} The current value of a provided animated value.\n */\nexport const getAnimatedStyleValue = (value) => {\n  if (isAnimatedStyleValue(value)) {\n    // If this is an animated value, we want to convert it to\n    // a plain object in order to get its current value.\n    return value.toJSON();\n  }\n\n  return value;\n};\n\n/**\n * Finds the closest `AnimatedValue` instance from the given\n * animated style value (e.g., AnimatedInterpolation, etc.).\n * This function will crawl the animated style hierarchy until\n * it finds the first `AnimatedValue` instance.\n *\n * @param animatedStyleValue The starting animated style value.\n * @returns {*} The closest `AnimatedValue`.\n */\nconst findAnimatedValue = (animatedStyleValue) => {\n  if (animatedStyleValue instanceof Animated.Value) {\n    return animatedStyleValue;\n  }\n\n  const parent = animatedStyleValue._parent;\n  if (parent) {\n    return findAnimatedValue(parent);\n  }\n\n  return undefined;\n};\n\n/**\n * Adds a listener to the animated value, or the closest parent\n * that is an animated value. This function is useful in components\n * that receive animated interpolations but need to react to changes\n * of those values during animations.\n *\n * @param styleValue The style value to add the listener to.\n * @param listener The listener to add.\n * @returns {string} The listener id, or `undefined` if the\n *   listener couldn't be registered.\n */\nexport const addAnimatedValueListener = (styleValue, listener) => {\n  const animatedValue = findAnimatedValue(styleValue);\n  if (animatedValue) {\n    return animatedValue.addListener(listener);\n  }\n\n  return undefined;\n};\n\n/**\n * Remove the animated value listener with the given id. The\n * listener will be removed from the `styleValue` argument if\n * it is an `AnimatedValue` or the closest `AnimatedValue` parent\n * if it isn't.\n *\n * @param styleValue The style value to remove the listener from.\n * @param listenerId The id of the listener to remove.\n */\nexport const removeAnimatedValueListener = (styleValue, listenerId) => {\n  const animatedValue = findAnimatedValue(styleValue);\n  if (animatedValue) {\n    animatedValue.removeListener(listenerId);\n  }\n};\n"]}]