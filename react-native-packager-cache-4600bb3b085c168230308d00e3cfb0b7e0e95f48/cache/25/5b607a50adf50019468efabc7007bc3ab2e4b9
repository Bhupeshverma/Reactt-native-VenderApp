Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.defaultThemeVariables = exports.viewComponents = exports.textComponents = exports.sizeVariants = undefined;
exports.dimensionRelativeToIphone = dimensionRelativeToIphone;

var _reactNative = require('react-native');

var _reactNativeNavigationExperimentalCompat = require('react-native-navigation-experimental-compat');

var _reactNativeNavigationExperimentalCompat2 = babelHelpers.interopRequireDefault(_reactNativeNavigationExperimentalCompat);

var _theme = require('@shoutem/theme');

var NavigationHeader = _reactNativeNavigationExperimentalCompat2.default.Header;


var window = _reactNative.Dimensions.get('window');

var STATUS_BAR_OFFSET = _reactNative.Platform.OS === 'android' ? -_reactNative.StatusBar.currentConfig : 0;
var NAVIGATION_BAR_HEIGHT = _reactNativeNavigationExperimentalCompat2.default.Header.HEIGHT;

var sizeVariants = exports.sizeVariants = ['', 'left', 'right', 'top', 'bottom', 'horizontal', 'vertical'];
var textComponents = exports.textComponents = ['shoutem.ui.Heading', 'shoutem.ui.Title', 'shoutem.ui.Subtitle', 'shoutem.ui.Text', 'shoutem.ui.Caption'];
var viewComponents = exports.viewComponents = ['shoutem.ui.View', 'shoutem.ui.Tile', 'shoutem.ui.Card', 'shoutem.ui.Row'];

function dimensionRelativeToIphone(dimension) {
  var actualRefVal = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : window.width;

  return (0, _theme.getSizeRelativeToReference)(dimension, 375, actualRefVal);
}

var defaultThemeVariables = exports.defaultThemeVariables = {
  featuredColor: '#659CEC',
  backgroundColor: '#f2f2f2',
  paperColor: '#FFFFFF',
  shadowColor: 'rgba(0, 0, 0, 0.1)',

  heading: {
    fontFamily: 'Rubik-Regular',
    fontStyle: 'normal',
    fontWeight: 'normal',
    color: '#222222',
    fontSize: 25
  },
  title: {
    fontFamily: 'Rubik-Regular',
    fontStyle: 'normal',
    fontWeight: 'normal',
    fontSize: 20,
    color: '#222222'
  },
  subtitle: {
    fontFamily: 'Rubik-Regular',
    fontStyle: 'normal',
    fontWeight: 'normal',
    color: '#222222',
    fontSize: 15
  },
  caption: {
    fontFamily: 'Rubik-Regular',
    fontStyle: 'normal',
    fontWeight: 'normal',
    fontSize: 12,
    color: '#666666'
  },
  text: {
    fontFamily: 'Rubik-Regular',
    fontStyle: 'normal',
    fontWeight: 'normal',
    fontSize: 15,
    color: '#666666'
  },

  imageOverlayColor: 'rgba(0, 0, 0, 0.2)',
  imageOverlayTextColor: '#FFFFFF',
  tagOverlayColor: 'rgba(0, 0, 0, 0.7)',
  tagOverlayTextColor: '#FFFFFF',

  navBarBackground: '#FFFFFF',
  navBarBorderColor: '#f2f2f2',
  navBarText: {
    fontFamily: 'Rubik-Regular',
    fontStyle: 'normal',
    fontWeight: 'normal',
    color: '#222222',
    fontSize: 15
  },
  navBarIconsColor: '#222222',
  featuredNavBarTitleColor: '#ffffff',
  featuredNavBarIconsColor: '#ffffff',

  mainNavBackground: '#FFFFFF',
  mainNavItemColor: 'rgba(50, 50, 50, 0.4)',
  mainNavItemBackground: 'rgba(0, 0, 0, 0)',
  mainNavSelectedItemBackground: '#FFFFFF',
  mainNavSelectedItemColor: '#222222',
  mainNavSelectedItemBorderColor: '#659CEC',
  mainNavBorderColor: '#e0e0e0',

  subNavItemColor: '#666666',
  subNavItemBackground: 'rgba(0, 0, 0, 0)',
  subNavListBorderColor: '#e0e0e0',

  primaryButtonText: {
    fontFamily: 'Rubik-Regular',
    fontStyle: 'normal',
    fontWeight: '600',
    fontSize: 12,
    color: '#222222'
  },
  primaryButtonBackgroundColor: '#ffffff',
  primaryButtonBorderColor: '#ffffff',
  secondaryButtonTextColor: '#ffffff',
  secondaryButtonBackgroundColor: '#2c2c2c',
  secondaryButtonBorderColor: '#2c2c2c',

  lineColor: '#e5e5e5',
  sectionHeaderBackgroundColor: '#F2F2F2',
  indicatorColor: '#222222',

  smallGutter: 5,
  mediumGutter: 15,
  largeGutter: 30,
  extraLargeGutter: 45,
  galleryDotSize: 8
};

exports.default = function () {
  var _text, _shoutemUiTile, _shoutemUiImage, _horizontal, _vertical, _shoutemUiView, _rightIcon, _shoutemUiTile2, _shoutemUiCard, _shoutemUiTouchable, _shoutemUiText2, _shoutemUiButton, _scrollIndicator, _shoutemUiSpinner, _shoutemUiDivider, _shoutemUiButton2, _clearNavigationBar, _container, _shoutemUiIcon, _shoutemUiIcon2, _shoutemUiButton3, _container2, _shoutemUiNavigatio, _gradient, _shoutemUiNavigatio2, _babelHelpers$extends9, _horizontalContainer, _selectedOption, _b, _strong, _i, _em, _pre, _code, _a, _h, _h2, _h3, _h4, _h5, _h6, _p, _li, _shoutemUiImageGall, _shoutemUiInlineMap;

  var variables = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : defaultThemeVariables;
  return {
    guttersPadding: babelHelpers.extends({}, (0, _theme.createVariations)('.sm-gutter', sizeVariants, 'padding', variables.smallGutter), (0, _theme.createVariations)('.md-gutter', sizeVariants, 'padding', variables.mediumGutter), (0, _theme.createVariations)('.lg-gutter', sizeVariants, 'padding', variables.largeGutter), (0, _theme.createVariations)('.xl-gutter', sizeVariants, 'padding', variables.extraLargeGutter)),

    guttersMargin: babelHelpers.extends({}, (0, _theme.createVariations)('.sm-gutter', sizeVariants, 'margin', variables.smallGutter), (0, _theme.createVariations)('.md-gutter', sizeVariants, 'margin', variables.mediumGutter), (0, _theme.createVariations)('.lg-gutter', sizeVariants, 'margin', variables.largeGutter), (0, _theme.createVariations)('.xl-gutter', sizeVariants, 'margin', variables.extraLargeGutter)),

    commonVariants: {
      '.rounded-corners': {
        borderRadius: 2,
        borderWidth: 0,
        borderColor: 'transparent'
      },

      '.flexible': {
        flex: 1
      },

      '.inflexible': {
        flex: 0
      },

      '.collapsible': {
        flex: -1
      },

      '.stretch': {
        alignSelf: 'stretch'
      },

      '.space-between': {
        justifyContent: 'space-between'
      },

      '.space-around': {
        justifyContent: 'space-around'
      }
    },
    alignmentVariants: {
      flexDirection: 'column',
      '.topLeft': {
        justifyContent: 'flex-start',
        alignItems: 'flex-start'
      },
      '.topCenter': {
        justifyContent: 'flex-start',
        alignItems: 'center'
      },
      '.topRight': {
        justifyContent: 'flex-start',
        alignItems: 'flex-end'
      },
      '.middleLeft': {
        justifyContent: 'center',
        alignItems: 'flex-start'
      },
      '.middleCenter': {
        justifyContent: 'center',
        alignItems: 'center'
      },
      '.middleRight': {
        justifyContent: 'center',
        alignItems: 'flex-end'
      },
      '.bottomLeft': {
        justifyContent: 'flex-end',
        alignItems: 'flex-start'
      },
      '.bottomCenter': {
        justifyContent: 'flex-end',
        alignItems: 'center'
      },
      '.bottomRight': {
        justifyContent: 'flex-end',
        alignItems: 'flex-end'
      },
      '.top': {
        justifyContent: 'flex-start'
      },
      '.middle': {
        justifyContent: 'center'
      },
      '.bottom': {
        justifyContent: 'flex-end'
      }
    },

    fillParent: {
      position: 'absolute',
      top: 0,
      left: 0,
      right: 0,
      bottom: 0
    },
    'fill-parent': {
      '.fill-parent': babelHelpers.defineProperty({}, _theme.INCLUDE, ['fillParent'])
    },

    dimmedFeaturedBackground: {
      backgroundColor: (0, _theme.inverseColorBrightnessForAmount)(variables.featuredColor, 5)
    },

    featuredBackground: {
      backgroundColor: variables.featuredColor
    },

    imageOverlayText: babelHelpers.extends({}, (0, _theme.createSharedStyle)(textComponents, {
      color: variables.imageOverlayTextColor
    }), {

      'shoutem.ui.Icon': {
        '.indicator': {
          color: variables.imageOverlayTextColor
        },

        '.scroll-indicator': {
          color: variables.imageOverlayTextColor
        },

        color: variables.imageOverlayTextColor
      }
    }),

    boldTextStyle: {
      fontWeight: '500'
    },

    italicTextStyle: {
      fontStyle: 'italic'
    },

    codeTextStyle: {
      fontFamily: 'Menlo'
    },

    multilineTextStyle: {
      '.v-center': {
        marginTop: -4,
        marginBottom: 4
      },

      lineHeight: 26
    },

    text: (_text = {}, babelHelpers.defineProperty(_text, _theme.INCLUDE, ['commonVariants', 'guttersMargin']), babelHelpers.defineProperty(_text, '.line-through', {
      textDecorationLine: 'line-through'
    }), babelHelpers.defineProperty(_text, '.h-left', {
      textAlign: 'left'
    }), babelHelpers.defineProperty(_text, '.h-right', {
      textAlign: 'right'
    }), babelHelpers.defineProperty(_text, '.h-center', {
      textAlign: 'center'
    }), babelHelpers.defineProperty(_text, '.bold', babelHelpers.defineProperty({}, _theme.INCLUDE, ['boldTextStyle'])), babelHelpers.defineProperty(_text, '.multiline', babelHelpers.defineProperty({}, _theme.INCLUDE, ['multilineTextStyle'])), babelHelpers.defineProperty(_text, '.muted', {
      opacity: 0.5
    }), babelHelpers.defineProperty(_text, 'backgroundColor', 'transparent'), _text),

    'shoutem.ui.Heading': babelHelpers.extends(babelHelpers.defineProperty({}, _theme.INCLUDE, ['text']), variables.heading, {
      lineHeight: 30
    }),

    'shoutem.ui.Title': babelHelpers.extends(babelHelpers.defineProperty({}, _theme.INCLUDE, ['text']), variables.title, {
      lineHeight: 25
    }),

    'shoutem.ui.Subtitle': babelHelpers.extends(babelHelpers.defineProperty({}, _theme.INCLUDE, ['text']), variables.subtitle, {
      lineHeight: 18
    }),

    'shoutem.ui.Caption': babelHelpers.extends(babelHelpers.defineProperty({}, _theme.INCLUDE, ['text']), variables.caption, {
      lineHeight: 16,
      letterSpacing: 0.5
    }),

    'shoutem.ui.Text': babelHelpers.extends(babelHelpers.defineProperty({}, _theme.INCLUDE, ['text']), variables.text),

    indicator: {
      color: variables.text.color
    },

    imageSizes: {
      '.small-avatar': {
        width: dimensionRelativeToIphone(25),
        height: dimensionRelativeToIphone(25),
        borderRadius: 12.5,
        borderWidth: 0,
        resizeMode: 'cover'
      },

      '.small': {
        width: dimensionRelativeToIphone(65),
        height: dimensionRelativeToIphone(65)
      },

      '.medium-avatar': {
        width: dimensionRelativeToIphone(145),
        height: dimensionRelativeToIphone(145),
        borderRadius: 72.5,
        borderWidth: 0,
        resizeMode: 'cover'
      },

      '.medium': {
        width: dimensionRelativeToIphone(145),
        height: dimensionRelativeToIphone(92)
      },

      '.medium-wide': {
        width: dimensionRelativeToIphone(180),
        height: dimensionRelativeToIphone(85)
      },

      '.medium-portrait': {
        width: dimensionRelativeToIphone(209),
        height: dimensionRelativeToIphone(139)
      },

      '.medium-square': {
        width: dimensionRelativeToIphone(145),
        height: dimensionRelativeToIphone(145)
      },

      '.featured': {
        width: dimensionRelativeToIphone(365),
        height: dimensionRelativeToIphone(345)
      },

      '.large': {
        width: window.width,
        height: dimensionRelativeToIphone(280)
      },

      '.large-portrait': {
        width: window.width,
        height: dimensionRelativeToIphone(518)
      },

      '.large-banner': {
        width: window.width,
        height: dimensionRelativeToIphone(200)
      },

      '.large-square': {
        width: window.width,
        height: window.width
      },

      '.large-wide': {
        width: window.width,
        height: dimensionRelativeToIphone(238)
      },

      '.large-ultra-wide': {
        width: window.width,
        height: dimensionRelativeToIphone(130)
      }
    },
    'shoutem.ui.Image': (_shoutemUiImage = {}, babelHelpers.defineProperty(_shoutemUiImage, _theme.INCLUDE, ['commonVariants', 'imageSizes', 'fill-parent']), babelHelpers.defineProperty(_shoutemUiImage, '.placeholder', {
      backgroundColor: (0, _theme.inverseColorBrightnessForAmount)(variables.paperColor, 10),

      'shoutem.ui.Icon': {
        color: (0, _theme.inverseColorBrightnessForAmount)(variables.paperColor, 30)
      }
    }), babelHelpers.defineProperty(_shoutemUiImage, 'shoutem.ui.Tile', (_shoutemUiTile = {}, babelHelpers.defineProperty(_shoutemUiTile, _theme.INCLUDE, ['textCentricTile', 'fillParent', 'imageOverlayText']), babelHelpers.defineProperty(_shoutemUiTile, 'shoutem.ui.Button', {
      '.clear': babelHelpers.defineProperty({}, _theme.INCLUDE, ['imageOverlayText'])
    }), babelHelpers.defineProperty(_shoutemUiTile, 'backgroundColor', variables.imageOverlayColor), _shoutemUiTile)), babelHelpers.defineProperty(_shoutemUiImage, 'heroAnimation', function heroAnimation(driver, _ref) {
      var layout = _ref.layout;

      return {
        transform: [{
          scale: driver.interpolate({
            inputRange: [-0.9 * layout.height, 0],
            outputRange: [3, 1],
            extrapolateRight: 'clamp',
            useNativeDriver: true
          })
        }, {
          translateY: driver.interpolate({
            inputRange: [-100, 100],
            outputRange: [-50, 50],
            extrapolateLeft: 'clamp',
            useNativeDriver: true
          })
        }]
      };
    }), babelHelpers.defineProperty(_shoutemUiImage, 'flexDirection', 'column'), babelHelpers.defineProperty(_shoutemUiImage, 'alignItems', 'center'), babelHelpers.defineProperty(_shoutemUiImage, 'justifyContent', 'center'), babelHelpers.defineProperty(_shoutemUiImage, 'resizeMode', 'cover'), _shoutemUiImage),

    verticalFlexAlignment: {
      '.h-center': {
        alignItems: 'center'
      },

      '.h-start': {
        alignItems: 'flex-start'
      },

      '.h-end': {
        alignItems: 'flex-end'
      },

      '.v-center': {
        justifyContent: 'center'
      },

      '.v-start': {
        justifyContent: 'flex-start'
      },

      '.v-end': {
        justifyContent: 'flex-end'
      }
    },
    horizontalFlexAlignment: {
      '.h-center': {
        justifyContent: 'center'
      },

      '.h-start': {
        justifyContent: 'flex-start'
      },

      '.h-end': {
        justifyContent: 'flex-end'
      },

      '.v-center': {
        alignItems: 'center'
      },

      '.v-start': {
        alignItems: 'flex-start'
      },

      '.v-end': {
        alignItems: 'flex-end'
      }
    },
    'shoutem.ui.View': (_shoutemUiView = {}, babelHelpers.defineProperty(_shoutemUiView, _theme.INCLUDE, ['commonVariants', 'guttersPadding']), babelHelpers.defineProperty(_shoutemUiView, '.horizontal', (_horizontal = {}, babelHelpers.defineProperty(_horizontal, _theme.INCLUDE, ['horizontalFlexAlignment']), babelHelpers.defineProperty(_horizontal, 'flexDirection', 'row'), babelHelpers.defineProperty(_horizontal, 'alignItems', 'flex-end'), _horizontal)), babelHelpers.defineProperty(_shoutemUiView, '.vertical', (_vertical = {}, babelHelpers.defineProperty(_vertical, _theme.INCLUDE, ['verticalFlexAlignment']), babelHelpers.defineProperty(_vertical, 'flexDirection', 'column'), _vertical)), babelHelpers.defineProperty(_shoutemUiView, '.fill-parent', babelHelpers.defineProperty({}, _theme.INCLUDE, ['fillParent'])), babelHelpers.defineProperty(_shoutemUiView, '.overlay', {
      backgroundColor: variables.imageOverlayColor
    }), babelHelpers.defineProperty(_shoutemUiView, '.overlay-bottom', {
      height: 25,
      bottom: 0,
      left: 0,
      position: 'absolute',
      right: 0
    }), babelHelpers.defineProperty(_shoutemUiView, '.solid', {
      backgroundColor: variables.paperColor
    }), babelHelpers.defineProperty(_shoutemUiView, '.wrap', {
      flexWrap: 'wrap'
    }), babelHelpers.defineProperty(_shoutemUiView, '.dimmed', {
      '.featured': babelHelpers.defineProperty({}, _theme.INCLUDE, ['dimmedFeaturedBackground'])
    }), babelHelpers.defineProperty(_shoutemUiView, '.muted', {
      opacity: 0.3
    }), babelHelpers.defineProperty(_shoutemUiView, '.featured', babelHelpers.defineProperty({}, _theme.INCLUDE, ['featuredBackground'])), babelHelpers.defineProperty(_shoutemUiView, '.center', {
      alignSelf: 'center'
    }), babelHelpers.defineProperty(_shoutemUiView, '.badge', {
      alignItems: 'center',
      backgroundColor: variables.navBarIconsColor,
      borderColor: variables.navBarBackground,
      borderRadius: 8,
      borderWidth: 2,
      height: 16,
      justifyContent: 'center',
      position: 'absolute',
      width: 16,

      'shoutem.ui.Text': {
        color: variables.navBarBackground,
        fontSize: 9,
        fontWeight: 'bold',
        textAlign: 'center'
      }
    }), babelHelpers.defineProperty(_shoutemUiView, '.oval-highlight', {
      alignItems: 'center',
      backgroundColor: (0, _theme.changeColorAlpha)('#030303', 0.1),
      borderRadius: 31,
      height: 62,
      justifyContent: 'center',
      width: 62
    }), _shoutemUiView),

    'shoutem.ui.Screen': {
      '.full-screen': {
        marginTop: -(NAVIGATION_BAR_HEIGHT + _reactNative.StyleSheet.hairlineWidth)
      },

      '.paper': {
        backgroundColor: variables.paperColor
      },

      backgroundColor: variables.backgroundColor,
      flex: 1
    },

    'shoutem.ui.Row': babelHelpers.extends({}, (0, _theme.createSharedStyle)(textComponents, { flex: 1 }), {

      'shoutem.ui.Image': {
        marginRight: variables.mediumGutter
      },

      'shoutem.ui.Icon': {
        '.disclosure': {
          opacity: 0.5,
          marginRight: -7,
          marginLeft: 4
        },

        marginRight: variables.mediumGutter
      },

      'shoutem.ui.Button': {
        '.right-icon': (_rightIcon = {}, babelHelpers.defineProperty(_rightIcon, _theme.INCLUDE, ['tightButton', 'clearButton']), babelHelpers.defineProperty(_rightIcon, 'marginLeft', variables.mediumGutter), _rightIcon)
      },

      'shoutem.ui.View': {
        '.notification-dot': {
          alignSelf: 'center',
          flex: 0,
          width: 6,
          height: 6,
          borderRadius: 3,
          borderColor: variables.indicatorColor,
          backgroundColor: variables.indicatorColor,
          marginLeft: -10,
          marginRight: 4
        },

        '.vertical': {
          '*': {
            marginBottom: variables.smallGutter
          },

          marginBottom: -variables.smallGutter
        },

        flex: 1
      },

      '*.top': {
        alignSelf: 'flex-start'
      },

      '.small': {
        height: 65,
        paddingVertical: 0
      },

      flexGrow: 1,
      flexShrink: 0,
      flexDirection: 'row',
      justifyContent: 'flex-start',
      alignItems: 'center',
      backgroundColor: variables.paperColor,
      paddingHorizontal: variables.mediumGutter,
      paddingVertical: variables.mediumGutter
    }),

    textCentricTile: babelHelpers.extends({
      'shoutem.ui.View': {
        '.actions': {
          position: 'absolute',
          top: variables.mediumGutter,
          right: variables.mediumGutter
        }
      },

      '*': {
        marginBottom: variables.smallGutter
      }

    }, (0, _theme.createSharedStyle)(textComponents, {
      textAlign: 'center',
      alignSelf: 'stretch'
    }), {

      flex: 1,
      alignSelf: 'stretch',
      flexDirection: 'column',
      alignItems: 'center',
      justifyContent: 'center',
      paddingHorizontal: 25,
      paddingTop: variables.extraLargeGutter,
      paddingBottom: variables.extraLargeGutter - variables.smallGutter
    }),

    'shoutem.ui.Tile': (_shoutemUiTile2 = {}, babelHelpers.defineProperty(_shoutemUiTile2, _theme.INCLUDE, ['commonVariants', 'guttersPadding']), babelHelpers.defineProperty(_shoutemUiTile2, 'shoutem.ui.View', {
      '.content': {
        '*': {
          marginBottom: variables.mediumGutter - variables.smallGutter
        },

        alignSelf: 'stretch',
        paddingTop: variables.mediumGutter,
        paddingBottom: variables.smallGutter,
        paddingHorizontal: variables.mediumGutter
      }
    }), babelHelpers.defineProperty(_shoutemUiTile2, '.clear', {
      backgroundColor: 'transparent'
    }), babelHelpers.defineProperty(_shoutemUiTile2, '.small', {
      'shoutem.ui.View': {
        '.content': {
          '*': {
            marginBottom: variables.smallGutter
          },

          alignSelf: 'stretch',
          paddingTop: variables.mediumGutter,
          paddingBottom: 0,
          paddingHorizontal: 0,
          marginBottom: -variables.smallGutter
        }
      },

      width: 145
    }), babelHelpers.defineProperty(_shoutemUiTile2, '.text-centric', babelHelpers.defineProperty({}, _theme.INCLUDE, ['textCentricTile'])), babelHelpers.defineProperty(_shoutemUiTile2, 'heroAnimation', function heroAnimation(driver, _ref2) {
      var layout = _ref2.layout;

      return {
        opacity: driver.interpolate({
          inputRange: [-0.2 * layout.height, 0, layout.height],
          outputRange: [0, 1, 0],
          useNativeDriver: true
        }),
        transform: [{
          translateY: driver.interpolate({
            inputRange: [-100, 100],
            outputRange: [20, -20],
            useNativeDriver: true
          })
        }]
      };
    }), babelHelpers.defineProperty(_shoutemUiTile2, 'flex', -1), babelHelpers.defineProperty(_shoutemUiTile2, 'flexDirection', 'column'), babelHelpers.defineProperty(_shoutemUiTile2, 'alignItems', 'flex-start'), babelHelpers.defineProperty(_shoutemUiTile2, 'backgroundColor', variables.paperColor), _shoutemUiTile2),

    'shoutem.ui.Card': (_shoutemUiCard = {}, babelHelpers.defineProperty(_shoutemUiCard, _theme.INCLUDE, ['commonVariants']), babelHelpers.defineProperty(_shoutemUiCard, 'shoutem.ui.View', {
      '.content': {
        'shoutem.ui.Subtitle': {
          marginBottom: 10
        }
      },

      flex: 1,
      alignSelf: 'stretch',
      padding: 10,
      backgroundColor: variables.paperColor
    }), babelHelpers.defineProperty(_shoutemUiCard, 'width', dimensionRelativeToIphone(180)), babelHelpers.defineProperty(_shoutemUiCard, 'flexDirection', 'column'), babelHelpers.defineProperty(_shoutemUiCard, 'justifyContent', 'center'), babelHelpers.defineProperty(_shoutemUiCard, 'alignItems', 'flex-start'), babelHelpers.defineProperty(_shoutemUiCard, 'backgroundColor', variables.paperColor), babelHelpers.defineProperty(_shoutemUiCard, 'borderRadius', 2), babelHelpers.defineProperty(_shoutemUiCard, 'shadowColor', variables.shadowColor), babelHelpers.defineProperty(_shoutemUiCard, 'shadowOpacity', 0.1), babelHelpers.defineProperty(_shoutemUiCard, 'shadowOffset', { width: 1, height: 1 }), babelHelpers.defineProperty(_shoutemUiCard, '.horizontal', {
      'shoutem.ui.View': {
        '.pull-left': {
          marginVertical: variables.mediumGutter,
          marginLeft: -dimensionRelativeToIphone(72)
        }
      },

      width: null,
      flexDirection: 'row',
      justifyContent: 'flex-start',
      margin: 10,
      marginTop: variables.smallGutter,
      marginBottom: variables.smallGutter
    }), _shoutemUiCard),

    'shoutem.ui.Overlay': babelHelpers.extends(babelHelpers.defineProperty({}, _theme.INCLUDE, ['guttersPadding']), (0, _theme.createSharedStyle)([].concat(textComponents, ['shoutem.ui.Icon']), {
      textAlign: 'center',
      color: variables.tagOverlayTextColor
    }), (0, _theme.createSharedStyle)(viewComponents, babelHelpers.extends({}, (0, _theme.createSharedStyle)([].concat(textComponents, ['shoutem.ui.Icon']), {
      textAlign: 'center',
      color: variables.tagOverlayTextColor
    }))), {

      '.image-overlay': babelHelpers.extends({}, (0, _theme.createSharedStyle)([].concat(textComponents, ['shoutem.ui.Icon']), {
        color: variables.imageOverlayTextColor
      }), {

        backgroundColor: (0, _theme.changeColorAlpha)(variables.imageOverlayColor, 0.5)
      }),

      '.rounded-small': {
        width: 38,
        height: 38,
        borderRadius: 19,
        padding: 0
      },

      '.fill-parent': babelHelpers.defineProperty({}, _theme.INCLUDE, ['fillParent']),

      alignItems: 'center',
      justifyContent: 'center',
      paddingTop: 2 * variables.smallGutter,
      paddingBottom: 2 * variables.smallGutter,
      paddingHorizontal: variables.mediumGutter,
      backgroundColor: variables.tagOverlayColor
    }),

    'shoutem.ui.TouchableOpacity': (_shoutemUiTouchable = {}, babelHelpers.defineProperty(_shoutemUiTouchable, _theme.INCLUDE, ['commonVariants']), babelHelpers.defineProperty(_shoutemUiTouchable, 'activeOpacity', 0.8), _shoutemUiTouchable),

    'shoutem.ui.TouchableNativeFeedback': babelHelpers.defineProperty({}, _theme.INCLUDE, ['commonVariants']),

    'shoutem.ui.Touchable': {},

    tightButton: {
      'shoutem.ui.Icon': {
        marginRight: 0
      },

      'shoutem.ui.Text': {
        marginRight: 0
      },

      'shoutem.ui.View': {
        '.badge': {
          top: -4,
          right: -4
        }
      },

      paddingLeft: 0,
      paddingRight: 0
    },

    clearButton: {
      backgroundColor: 'transparent',
      borderWidth: 0,
      borderRadius: 0
    },

    textualButton: {
      'shoutem.ui.Text': babelHelpers.extends({}, variables.text),

      'shoutem.ui.Icon': {
        color: variables.text.color
      }
    },

    'shoutem.ui.Button': (_shoutemUiButton = {}, babelHelpers.defineProperty(_shoutemUiButton, _theme.INCLUDE, ['commonVariants', 'guttersMargin']), babelHelpers.defineProperty(_shoutemUiButton, '.tight', babelHelpers.defineProperty({}, _theme.INCLUDE, ['tightButton'])), babelHelpers.defineProperty(_shoutemUiButton, '.clear', babelHelpers.defineProperty({}, _theme.INCLUDE, ['clearButton'])), babelHelpers.defineProperty(_shoutemUiButton, '.textual', babelHelpers.defineProperty({}, _theme.INCLUDE, ['textualButton', 'clearButton', 'tightButton'])), babelHelpers.defineProperty(_shoutemUiButton, '.secondary', {
      'shoutem.ui.Icon': {
        color: variables.secondaryButtonTextColor
      },

      'shoutem.ui.Text': {
        color: variables.secondaryButtonTextColor
      },

      backgroundColor: variables.secondaryButtonBackgroundColor,
      borderColor: variables.secondaryButtonBorderColor
    }), babelHelpers.defineProperty(_shoutemUiButton, '.muted', {
      'shoutem.ui.Icon': {
        opacity: 0.5
      },

      'shoutem.ui.Text': {
        opacity: 0.5
      }
    }), babelHelpers.defineProperty(_shoutemUiButton, '.confirmation', {
      'shoutem.ui.Text': babelHelpers.defineProperty({}, _theme.INCLUDE, ['boldTextStyle']),

      flex: 1,
      marginHorizontal: variables.mediumGutter
    }), babelHelpers.defineProperty(_shoutemUiButton, '.full-width', {
      'shoutem.ui.Icon': {
        fontSize: 16
      },

      flex: 1,
      alignSelf: 'stretch',
      borderRadius: 0,
      borderWidth: 0,
      height: 55
    }), babelHelpers.defineProperty(_shoutemUiButton, '.stacked', {
      'shoutem.ui.Icon': {
        marginVertical: variables.mediumGutter,
        marginRight: 0
      },

      'shoutem.ui.Text': (_shoutemUiText2 = {}, babelHelpers.defineProperty(_shoutemUiText2, _theme.INCLUDE, ['boldTextStyle']), babelHelpers.defineProperty(_shoutemUiText2, 'textAlign', 'center'), babelHelpers.defineProperty(_shoutemUiText2, 'marginVertical', 0), babelHelpers.defineProperty(_shoutemUiText2, 'marginRight', 0), babelHelpers.defineProperty(_shoutemUiText2, 'fontFamily', 'Rubik-Medium'), _shoutemUiText2),

      width: dimensionRelativeToIphone(120),
      height: 82,
      flexDirection: 'column'
    }), babelHelpers.defineProperty(_shoutemUiButton, 'shoutem.ui.Text', babelHelpers.extends({}, variables.primaryButtonText, {
      letterSpacing: 1,
      marginVertical: 12,
      marginRight: 10
    })), babelHelpers.defineProperty(_shoutemUiButton, 'shoutem.ui.Icon', {
      color: variables.primaryButtonText.color,
      fontSize: 24,
      marginRight: 10
    }), babelHelpers.defineProperty(_shoutemUiButton, 'shoutem.ui.View', {
      '.badge': {
        top: -4,
        right: 11
      }
    }), babelHelpers.defineProperty(_shoutemUiButton, 'underlayColor', (0, _theme.changeColorAlpha)(variables.primaryButtonBackgroundColor, 0.5)), babelHelpers.defineProperty(_shoutemUiButton, 'backgroundColor', variables.primaryButtonBackgroundColor), babelHelpers.defineProperty(_shoutemUiButton, 'flexDirection', 'row'), babelHelpers.defineProperty(_shoutemUiButton, 'alignItems', 'center'), babelHelpers.defineProperty(_shoutemUiButton, 'justifyContent', 'center'), babelHelpers.defineProperty(_shoutemUiButton, 'borderRadius', 2), babelHelpers.defineProperty(_shoutemUiButton, 'borderWidth', 1), babelHelpers.defineProperty(_shoutemUiButton, 'borderColor', variables.primaryButtonBorderColor), babelHelpers.defineProperty(_shoutemUiButton, 'paddingLeft', variables.mediumGutter), babelHelpers.defineProperty(_shoutemUiButton, 'paddingRight', variables.smallGutter), _shoutemUiButton),

    'shoutem.ui.Icon': {
      '.indicator': babelHelpers.defineProperty({}, _theme.INCLUDE, ['indicator']),

      '.scroll-indicator': (_scrollIndicator = {}, babelHelpers.defineProperty(_scrollIndicator, _theme.INCLUDE, ['indicator']), babelHelpers.defineProperty(_scrollIndicator, 'position', 'absolute'), babelHelpers.defineProperty(_scrollIndicator, 'left', 0), babelHelpers.defineProperty(_scrollIndicator, 'right', 0), babelHelpers.defineProperty(_scrollIndicator, 'bottom', variables.mediumGutter), _scrollIndicator),

      backgroundColor: 'transparent',
      color: variables.primaryButtonText.color,
      textAlign: 'center',
      textAlignVertical: 'center',
      fontSize: 24
    },

    'shoutem.ui.Spinner': (_shoutemUiSpinner = {}, babelHelpers.defineProperty(_shoutemUiSpinner, _theme.INCLUDE, ['guttersMargin']), babelHelpers.defineProperty(_shoutemUiSpinner, 'color', (0, _theme.changeColorAlpha)(variables.text.color, 0.5)), _shoutemUiSpinner),

    'shoutem.ui.ListView': {
      'shoutem.ui.Divider': (_shoutemUiDivider = {}, babelHelpers.defineProperty(_shoutemUiDivider, _theme.INCLUDE, ['sectionHeaderDivider']), babelHelpers.defineProperty(_shoutemUiDivider, 'borderTopWidth', 0), _shoutemUiDivider),

      listContent: {
        paddingBottom: 0,
        backgroundColor: variables.backgroundColor
      },

      refreshControl: {
        tintColor: (0, _theme.changeColorAlpha)(variables.text.color, 0.5)
      },

      loadMoreSpinner: {
        paddingVertical: 25
      }
    },

    'shoutem.ui.GridRow': {
      '*': {
        flex: 1,
        alignSelf: 'stretch',
        marginLeft: variables.smallGutter,
        marginRight: 0,
        marginTop: 0,
        marginBottom: 0
      },

      flex: 1,
      flexDirection: 'row',
      alignItems: 'flex-start',
      justifyContent: 'space-between',
      paddingRight: variables.smallGutter,
      paddingTop: variables.smallGutter
    },

    clearNavigationBar: (_clearNavigationBar = {}, babelHelpers.defineProperty(_clearNavigationBar, _theme.INCLUDE, ['imageOverlayText']), babelHelpers.defineProperty(_clearNavigationBar, 'shoutem.ui.Button', (_shoutemUiButton2 = {}, babelHelpers.defineProperty(_shoutemUiButton2, _theme.INCLUDE, ['clearButton']), babelHelpers.defineProperty(_shoutemUiButton2, 'shoutem.ui.Icon', {
      color: variables.imageOverlayTextColor
    }), babelHelpers.defineProperty(_shoutemUiButton2, 'shoutem.ui.Text', {
      color: variables.imageOverlayTextColor
    }), _shoutemUiButton2)), babelHelpers.defineProperty(_clearNavigationBar, 'container', {
      backgroundColor: 'transparent',
      borderBottomColor: 'transparent'
    }), _clearNavigationBar),
    navigationBarTextAnimations: {
      solidifyAnimation: function solidifyAnimation(driver) {
        return {
          color: driver.interpolate({
            inputRange: [250, 300],
            outputRange: [variables.imageOverlayTextColor, variables.navBarText.color],
            extrapolate: 'clamp'
          })
        };
      },
      boxingAnimation: function boxingAnimation() {
        return {};
      }
    },
    navigationBar: {
      '.clear': babelHelpers.defineProperty({}, _theme.INCLUDE, ['clearNavigationBar']),

      '.featured': babelHelpers.extends({
        'shoutem.ui.Button': {
          'shoutem.ui.Icon': {
            color: variables.featuredNavBarIconsColor
          },
          'shoutem.ui.Text': {
            color: variables.featuredNavBarIconsColor
          },

          'shoutem.ui.View': {
            '.badge': {
              backgroundColor: variables.featuredNavBarIconsColor,
              borderColor: variables.featuredColor,

              'shoutem.ui.Text': {
                color: variables.featuredColor
              }
            }
          }
        },

        'shoutem.ui.DropDownMenu': {
          selectedOption: {
            'shoutem.ui.Icon': {
              color: variables.featuredNavBarIconsColor
            },
            'shoutem.ui.Text': {
              color: variables.featuredNavBarIconsColor
            }
          }
        }

      }, (0, _theme.createSharedStyle)(['shoutem.ui.Title', 'shoutem.ui.Icon', 'shoutem.ui.Text'], {
        color: variables.featuredNavBarTitleColor
      }), {

        container: (_container = {}, babelHelpers.defineProperty(_container, _theme.INCLUDE, ['featuredBackground']), babelHelpers.defineProperty(_container, 'borderBottomWidth', 0), _container)
      }),

      '.no-border': {
        container: {
          borderBottomWidth: 0
        }
      },

      'shoutem.ui.Icon': (_shoutemUiIcon = {}, babelHelpers.defineProperty(_shoutemUiIcon, _theme.INCLUDE, ['navigationBarTextAnimations']), babelHelpers.defineProperty(_shoutemUiIcon, 'color', variables.navBarIconsColor), babelHelpers.defineProperty(_shoutemUiIcon, 'fontSize', 24), _shoutemUiIcon),

      'shoutem.ui.Text': babelHelpers.extends(babelHelpers.defineProperty({}, _theme.INCLUDE, ['navigationBarTextAnimations']), variables.navBarText),

      'shoutem.ui.Button': (_shoutemUiButton3 = {}, babelHelpers.defineProperty(_shoutemUiButton3, _theme.INCLUDE, ['clearButton', 'tightButton']), babelHelpers.defineProperty(_shoutemUiButton3, 'shoutem.ui.Icon', (_shoutemUiIcon2 = {}, babelHelpers.defineProperty(_shoutemUiIcon2, _theme.INCLUDE, ['navigationBarTextAnimations']), babelHelpers.defineProperty(_shoutemUiIcon2, 'color', variables.navBarIconsColor), babelHelpers.defineProperty(_shoutemUiIcon2, 'marginVertical', 9), _shoutemUiIcon2)), babelHelpers.defineProperty(_shoutemUiButton3, 'shoutem.ui.Text', babelHelpers.extends(babelHelpers.defineProperty({}, _theme.INCLUDE, ['navigationBarTextAnimations']), variables.navBarText, {
        fontWeight: 'normal',
        color: variables.navBarIconsColor,
        letterSpacing: 0
      })), babelHelpers.defineProperty(_shoutemUiButton3, 'shoutem.ui.View', {
        '.badge': {
          top: 5,
          right: 5
        }
      }), babelHelpers.defineProperty(_shoutemUiButton3, 'paddingHorizontal', 9), _shoutemUiButton3),

      'shoutem.ui.DropDownMenu': {
        selectedOption: {
          'shoutem.ui.Icon': {
            color: variables.navBarIconsColor
          },
          'shoutem.ui.Text': babelHelpers.extends({}, variables.navBarText, {
            fontWeight: 'normal',
            color: variables.navBarIconsColor
          })
        }
      },

      boxingAnimation: function boxingAnimation(driver) {
        return {
          container: {
            borderBottomColor: driver.interpolate({
              inputRange: [0, 45],
              outputRange: ['transparent', variables.navBarBorderColor],
              extrapolate: 'clamp'
            }),
            borderBottomWidth: 1
          }
        };
      },
      solidifyAnimation: function solidifyAnimation(driver) {
        return {
          container: {
            backgroundColor: driver.interpolate({
              inputRange: [250, 300],
              outputRange: ['transparent', variables.navBarBackground],
              extrapolate: 'clamp'
            }),
            borderBottomColor: driver.interpolate({
              inputRange: [250, 300],
              outputRange: ['transparent', variables.navBarBorderColor],
              extrapolate: 'clamp'
            })
          }
        };
      }
    },
    'shoutem.ui.NavigationBar': (_shoutemUiNavigatio = {}, babelHelpers.defineProperty(_shoutemUiNavigatio, _theme.INCLUDE, ['navigationBar']), babelHelpers.defineProperty(_shoutemUiNavigatio, '.clear', babelHelpers.defineProperty({}, _theme.INCLUDE, ['clearNavigationBar'])), babelHelpers.defineProperty(_shoutemUiNavigatio, '.inline', {
      container: {
        width: window.width,
        position: 'relative'
      }
    }), babelHelpers.defineProperty(_shoutemUiNavigatio, 'shoutem.ui.Title', {
      solidifyAnimation: function solidifyAnimation(driver) {
        return {
          color: driver.interpolate({
            inputRange: [250, 300],
            outputRange: ['transparent', variables.navBarText.color],
            extrapolate: 'clamp'
          })
        };
      },
      boxingAnimation: function boxingAnimation() {
        return {};
      },


      color: variables.navBarText.color,
      fontSize: 15,
      lineHeight: 18
    }), babelHelpers.defineProperty(_shoutemUiNavigatio, 'container', (_container2 = {}, babelHelpers.defineProperty(_container2, _theme.INCLUDE, ['fillParent']), babelHelpers.defineProperty(_container2, 'height', 70), babelHelpers.defineProperty(_container2, 'backgroundColor', variables.navBarBackground), babelHelpers.defineProperty(_container2, 'borderBottomColor', variables.navBarBorderColor), babelHelpers.defineProperty(_container2, 'borderBottomWidth', 1), babelHelpers.defineProperty(_container2, 'paddingTop', _reactNative.Platform.OS === 'ios' ? 20 : 0), _container2)), babelHelpers.defineProperty(_shoutemUiNavigatio, 'componentsContainer', {
      flex: 1,
      alignItems: 'flex-end',
      flexDirection: 'row',
      justifyContent: 'space-between',
      backgroundColor: 'transparent'
    }), babelHelpers.defineProperty(_shoutemUiNavigatio, 'leftComponent', {
      alignSelf: 'center',
      alignItems: 'flex-start',
      flex: 1
    }), babelHelpers.defineProperty(_shoutemUiNavigatio, 'centerComponent', {
      alignSelf: 'center',
      alignItems: 'center',
      flex: 1,
      marginBottom: 0
    }), babelHelpers.defineProperty(_shoutemUiNavigatio, 'rightComponent', {
      alignSelf: 'center',
      alignItems: 'flex-end',
      flex: 1
    }), _shoutemUiNavigatio),
    'shoutem.ui.navigation.NavigationBar': (_shoutemUiNavigatio2 = {}, babelHelpers.defineProperty(_shoutemUiNavigatio2, _theme.INCLUDE, ['navigationBar']), babelHelpers.defineProperty(_shoutemUiNavigatio2, '.fade', {
      gradient: (_gradient = {}, babelHelpers.defineProperty(_gradient, _theme.INCLUDE, ['fillParent']), babelHelpers.defineProperty(_gradient, 'colors', ['transparent', 'rgba(0, 0, 0, 0.15)', 'transparent']), babelHelpers.defineProperty(_gradient, 'locations', [0.0, 0.25, 1.0]), babelHelpers.defineProperty(_gradient, 'solidifyAnimation', function solidifyAnimation(driver) {
        return {
          opacity: driver.interpolate({
            inputRange: [250, 300],
            outputRange: [1, 0]
          })
        };
      }), _gradient)
    }), babelHelpers.defineProperty(_shoutemUiNavigatio2, '.none', {
      container: {
        opacity: 0
      }
    }), babelHelpers.defineProperty(_shoutemUiNavigatio2, '.inline', {
      '.clear': {
        container: {
          position: 'absolute',
          top: 0,
          left: 0,
          right: 0
        }
      }
    }), babelHelpers.defineProperty(_shoutemUiNavigatio2, 'shoutem.ui.View', {
      '.container': {
        flex: 1,
        flexDirection: 'row',
        alignItems: 'center',
        justifyContent: 'center'
      },

      '.full-width': {
        width: window.width
      }
    }), babelHelpers.defineProperty(_shoutemUiNavigatio2, 'shoutem.ui.Title', babelHelpers.extends({
      solidifyAnimation: function solidifyAnimation(driver) {
        return {
          color: driver.interpolate({
            inputRange: [250, 300],
            outputRange: ['transparent', variables.navBarText.color],
            extrapolate: 'clamp'
          })
        };
      },
      boxingAnimation: function boxingAnimation(driver) {
        return {
          opacity: driver.interpolate({
            inputRange: [250, 300],
            outputRange: [0, 1],
            extrapolate: 'clamp'
          })
        };
      },


      flex: 1,
      textAlign: 'center',
      lineHeight: 18
    }, variables.navBarText)), babelHelpers.defineProperty(_shoutemUiNavigatio2, 'container', {
      paddingTop: NAVIGATION_BAR_HEIGHT,
      backgroundColor: variables.navBarBackground,
      borderBottomColor: variables.navBarBorderColor,
      borderBottomWidth: _reactNative.StyleSheet.hairlineWidth
    }), babelHelpers.defineProperty(_shoutemUiNavigatio2, 'navigationHeader', {
      position: 'absolute',
      top: 0,
      left: 0,
      right: 0,
      height: NAVIGATION_BAR_HEIGHT
    }), babelHelpers.defineProperty(_shoutemUiNavigatio2, 'navigationBarImage', {
      flex: 1,
      flexGrow: 1,
      height: NavigationHeader.HEIGHT,
      left: 0,
      solidifyAnimation: function solidifyAnimation(driver) {
        return {
          opacity: driver.interpolate({
            inputRange: [250, 300],
            outputRange: [0, 1],
            extrapolate: 'clamp'
          })
        };
      },
      boxingAnimation: function boxingAnimation() {
        return {};
      },

      position: 'absolute',
      right: 0,
      top: 0,
      width: window.width
    }), _shoutemUiNavigatio2),

    'shoutem.ui.navigation.CardStack': {
      '.without-transitions': {
        interpolateCardStyle: function interpolateCardStyle(props) {
          var navigationState = props.navigationState,
              scene = props.scene;


          var focused = navigationState.index === scene.index;
          var opacity = focused ? 1 : 0;
          var translate = focused ? 0 : 1000000;
          return {
            opacity: opacity,
            transform: [{ translateX: translate }, { translateY: translate }]
          };
        }
      },

      cardStack: {
        backgroundColor: variables.backgroundColor
      },
      card: {
        backgroundColor: variables.backgroundColor
      },
      sceneContainer: {
        'shoutem.ui.Screen': {
          '.full-screen': {
            marginTop: 0
          }
        },

        flex: 1,
        flexDirection: 'column-reverse',
        backgroundColor: variables.backgroundColor
      }
    },

    sectionHeaderDivider: {
      'shoutem.ui.Caption': {
        marginTop: -1,
        marginBottom: variables.smallGutter,
        marginHorizontal: variables.mediumGutter
      },

      paddingTop: 23,
      backgroundColor: variables.sectionHeaderBackgroundColor,
      borderBottomWidth: _reactNative.StyleSheet.hairlineWidth,
      borderTopWidth: _reactNative.StyleSheet.hairlineWidth,
      borderColor: variables.lineColor
    },
    'shoutem.ui.Divider': {
      '.line': {
        '.small': {
          width: 55
        },
        '.center': {
          alignSelf: 'center'
        },
        paddingTop: 0,
        borderBottomWidth: _reactNative.StyleSheet.hairlineWidth,
        borderColor: variables.lineColor
      },

      '.section-header': babelHelpers.defineProperty({}, _theme.INCLUDE, ['sectionHeaderDivider']),

      alignSelf: 'stretch',
      paddingTop: 25,
      flexDirection: 'row',
      justifyContent: 'space-between'
    },

    'shoutem.ui.FormGroup': {
      'shoutem.ui.View': {
        'shoutem.ui.Caption': {
          backgroundColor: variables.paperColor,
          paddingHorizontal: variables.mediumGutter,
          color: (0, _theme.changeColorAlpha)(variables.caption.color, 0.5),
          paddingTop: 10
        },

        'shoutem.ui.TextInput': {
          height: 39,
          paddingVertical: 9
        },

        'shoutem.ui.DropDownMenu': {
          horizontalContainer: {
            alignItems: 'flex-start',
            backgroundColor: variables.paperColor,
            height: 39,
            paddingHorizontal: variables.mediumGutter,
            paddingVertical: 9
          },

          selectedOption: {
            'shoutem.ui.Icon': {
              color: variables.paperColor
            },

            'shoutem.ui.Text': {
              margin: 0
            },

            flex: 1,
            alignSelf: 'stretch',
            justifyContent: 'flex-start',
            padding: 0
          },

          '.empty': {
            selectedOption: {
              'shoutem.ui.Text': {
                color: (0, _theme.changeColorAlpha)(variables.text.color, 0.5)
              }
            }
          }
        }
      }
    },

    'shoutem.ui.TextInput': babelHelpers.extends((_babelHelpers$extends9 = {}, babelHelpers.defineProperty(_babelHelpers$extends9, _theme.INCLUDE, ['commonVariants', 'guttersMargin']), babelHelpers.defineProperty(_babelHelpers$extends9, 'selectionColor', variables.text.color), babelHelpers.defineProperty(_babelHelpers$extends9, 'placeholderTextColor', (0, _theme.changeColorAlpha)(variables.text.color, 0.5)), babelHelpers.defineProperty(_babelHelpers$extends9, 'backgroundColor', variables.paperColor), babelHelpers.defineProperty(_babelHelpers$extends9, 'height', 55), babelHelpers.defineProperty(_babelHelpers$extends9, 'paddingHorizontal', variables.mediumGutter), babelHelpers.defineProperty(_babelHelpers$extends9, 'paddingVertical', 18), babelHelpers.defineProperty(_babelHelpers$extends9, 'underlineColorAndroid', 'transparent'), _babelHelpers$extends9), variables.text),

    'shoutem.ui.NumberInput': {
      button: {
        borderWidth: 0,
        height: 40,
        width: 40,
        padding: 8
      },

      icon: {
        marginRight: 0
      },

      inputContainer: {
        borderBottomWidth: 1,
        borderColor: 'rgba(0, 0, 0, 0.2)',
        borderTopWidth: 1
      },

      input: {
        height: 38,
        paddingVertical: 10,
        textAlign: 'center',
        width: 94
      }
    },

    'shoutem.ui.SearchField': {
      clearIcon: {
        color: '#2c2c2c',
        opacity: 0.5
      },

      container: {
        backgroundColor: '#f0f0f0',
        borderRadius: 5,
        flex: 1,
        height: 30
      },

      searchIcon: {
        color: '#888888',
        fontSize: 16
      },

      input: {
        backgroundColor: '#f0f0f0',
        color: '#888888',
        flex: 1,
        fontSize: 15,
        height: 30,
        paddingVertical: 6,
        placeholderTextColor: '#888888',
        selectionColor: '#888888'
      }
    },

    'shoutem.ui.Switch': {
      container: {
        borderRadius: 15,
        height: 18,
        marginVertical: 7,
        paddingHorizontal: 2,
        paddingVertical: 2,
        width: 32,

        muteAnimation: function muteAnimation(driver) {
          return {
            backgroundColor: driver.interpolate({
              inputRange: [0, 1],
              outputRange: [(0, _theme.inverseColorBrightnessForAmount)(variables.paperColor, 15), (0, _theme.changeColorAlpha)(variables.secondaryButtonBackgroundColor, 1)]
            })
          };
        }
      },

      thumb: {
        backgroundColor: '#ffffff',
        borderRadius: 7,
        height: 14,
        width: 14,

        turnAnimation: function turnAnimation(driver, _ref3) {
          var layout = _ref3.layout,
              animationOptions = _ref3.animationOptions;
          var x = layout.x,
              width = layout.width;

          return {
            transform: [{
              translateX: driver.interpolate({
                inputRange: [0, 1],
                outputRange: [0, animationOptions.containerWidth - width - 2 * x]
              })
            }]
          };
        }
      }
    },

    'shoutem.ui.DropDownMenu': {
      '.horizontal': {
        horizontalContainer: {
          height: 40,
          justifyContent: 'center',
          backgroundColor: (0, _theme.inverseColorBrightnessForAmount)(variables.paperColor, 5),
          width: window.width,
          marginTop: 0,
          borderBottomWidth: _reactNative.StyleSheet.hairlineWidth,
          borderColor: variables.navBarBorderColor
        },
        selectedOption: {
          'shoutem.ui.Icon': {
            color: variables.text.color
          },
          'shoutem.ui.Text': babelHelpers.extends({}, variables.navBarText, {
            color: variables.text.color,
            fontWeight: 'normal'
          })
        }
      },

      '.featured': {
        '.horizontal': {
          horizontalContainer: (_horizontalContainer = {}, babelHelpers.defineProperty(_horizontalContainer, _theme.INCLUDE, ['dimmedFeaturedBackground']), babelHelpers.defineProperty(_horizontalContainer, 'borderBottomWidth', 0), _horizontalContainer),
          selectedOption: {
            'shoutem.ui.Icon': {
              color: variables.featuredNavBarTitleColor
            },
            'shoutem.ui.Text': {
              color: variables.featuredNavBarTitleColor
            }
          }
        }
      },

      '.large': {
        horizontalContainer: {
          alignItems: 'flex-end',
          borderColor: variables.shadowColor,
          borderWidth: 1,
          borderRightWidth: 0,
          height: 40,
          width: 175
        },

        selectedOption: {
          'shoutem.ui.Text': {
            flex: 1,
            textAlign: 'center',
            margin: 0
          },

          'shoutem.ui.Icon': {
            backgroundColor: variables.secondaryButtonBackgroundColor,
            borderColor: variables.secondaryButtonBorderColor,
            borderRadius: 2,
            borderWidth: 1,
            color: variables.secondaryButtonTextColor,
            height: 40,
            paddingVertical: 8,
            width: 40
          },

          padding: 0,

          marginTop: -1
        }
      },

      selectedOption: (_selectedOption = {}, babelHelpers.defineProperty(_selectedOption, _theme.INCLUDE, ['clearButton', 'textualButton']), babelHelpers.defineProperty(_selectedOption, 'shoutem.ui.Icon', {
        marginRight: 0
      }), babelHelpers.defineProperty(_selectedOption, 'shoutem.ui.Text', {
        marginRight: 0
      }), _selectedOption)
    },

    'shoutem.ui.DropDownModal': {
      modal: {
        'shoutem.ui.Button.close': {
          'shoutem.ui.Icon': {
            color: (0, _theme.changeColorAlpha)(variables.subtitle.color, 0.5),
            fontSize: 24
          },

          position: 'absolute',
          bottom: 25,
          left: 0,
          right: 0
        },

        flex: 1,
        justifyContent: 'center',
        alignItems: 'center',
        paddingVertical: 20,
        backgroundColor: (0, _theme.changeColorAlpha)(variables.backgroundColor, 0.97)
      },

      modalItem: {
        'shoutem.ui.Text': babelHelpers.extends({
          textAlign: 'center',
          flex: 1,
          width: window.width,
          paddingHorizontal: 20,
          paddingVertical: 23,
          alignSelf: 'stretch'
        }, variables.subtitle),

        flex: 1
      },

      visibleOptions: 8
    },

    textBlock: {
      container: {
        '.wrapper': {
          marginBottom: 0
        },
        '.block': {
          marginBottom: 20
        }
      },
      text: {}
    },
    'shoutem.ui.Html': {
      container: {
        backgroundColor: variables.paperColor,
        padding: variables.mediumGutter
      },

      b: (_b = {}, babelHelpers.defineProperty(_b, _theme.INCLUDE, ['textBlock']), babelHelpers.defineProperty(_b, 'text', babelHelpers.defineProperty({}, _theme.INCLUDE, ['boldTextStyle'])), _b),
      strong: (_strong = {}, babelHelpers.defineProperty(_strong, _theme.INCLUDE, ['textBlock']), babelHelpers.defineProperty(_strong, 'container', {}), babelHelpers.defineProperty(_strong, 'text', babelHelpers.defineProperty({}, _theme.INCLUDE, ['boldTextStyle'])), _strong),
      i: (_i = {}, babelHelpers.defineProperty(_i, _theme.INCLUDE, ['textBlock']), babelHelpers.defineProperty(_i, 'text', babelHelpers.defineProperty({}, _theme.INCLUDE, ['italicTextStyle'])), _i),
      em: (_em = {}, babelHelpers.defineProperty(_em, _theme.INCLUDE, ['textBlock']), babelHelpers.defineProperty(_em, 'text', babelHelpers.defineProperty({}, _theme.INCLUDE, ['italicTextStyle'])), _em),
      pre: (_pre = {}, babelHelpers.defineProperty(_pre, _theme.INCLUDE, ['textBlock']), babelHelpers.defineProperty(_pre, 'text', babelHelpers.defineProperty({}, _theme.INCLUDE, ['codeTextStyle'])), _pre),
      code: (_code = {}, babelHelpers.defineProperty(_code, _theme.INCLUDE, ['textBlock']), babelHelpers.defineProperty(_code, 'text', babelHelpers.defineProperty({}, _theme.INCLUDE, ['codeTextStyle'])), _code),
      a: (_a = {}, babelHelpers.defineProperty(_a, _theme.INCLUDE, ['textBlock']), babelHelpers.defineProperty(_a, 'text', {}), _a),

      h1: (_h = {}, babelHelpers.defineProperty(_h, _theme.INCLUDE, ['textBlock']), babelHelpers.defineProperty(_h, 'container', {}), babelHelpers.defineProperty(_h, 'text', {
        color: '#000',
        fontSize: 28
      }), _h),
      h2: (_h2 = {}, babelHelpers.defineProperty(_h2, _theme.INCLUDE, ['textBlock']), babelHelpers.defineProperty(_h2, 'container', {}), babelHelpers.defineProperty(_h2, 'text', {
        color: '#000',
        fontSize: 24
      }), _h2),
      h3: (_h3 = {}, babelHelpers.defineProperty(_h3, _theme.INCLUDE, ['textBlock']), babelHelpers.defineProperty(_h3, 'container', {}), babelHelpers.defineProperty(_h3, 'text', {
        fontWeight: '900',
        color: '#000',
        fontSize: 18
      }), _h3),
      h4: (_h4 = {}, babelHelpers.defineProperty(_h4, _theme.INCLUDE, ['textBlock']), babelHelpers.defineProperty(_h4, 'container', {}), babelHelpers.defineProperty(_h4, 'text', {
        fontWeight: '700',
        color: '#000',
        fontSize: 16
      }), _h4),
      h5: (_h5 = {}, babelHelpers.defineProperty(_h5, _theme.INCLUDE, ['textBlock']), babelHelpers.defineProperty(_h5, 'container', {}), babelHelpers.defineProperty(_h5, 'text', {
        fontWeight: '500',
        color: '#000',
        fontSize: 14
      }), _h5),
      h6: (_h6 = {}, babelHelpers.defineProperty(_h6, _theme.INCLUDE, ['textBlock']), babelHelpers.defineProperty(_h6, 'container', {}), babelHelpers.defineProperty(_h6, 'text', {
        fontWeight: '500',
        color: '#000',
        fontSize: 14
      }), _h6),
      p: (_p = {}, babelHelpers.defineProperty(_p, _theme.INCLUDE, ['textBlock']), babelHelpers.defineProperty(_p, 'container', {}), babelHelpers.defineProperty(_p, 'text', babelHelpers.defineProperty({}, _theme.INCLUDE, ['shoutem.ui.Text', 'multilineTextStyle'])), _p),
      div: babelHelpers.defineProperty({}, _theme.INCLUDE, ['textBlock']),

      ul: {
        container: {}
      },
      ol: {
        container: {}
      },
      number: {
        fontFamily: _reactNative.Platform.OS === 'ios' ? 'Menlo-Regular' : 'monospace',
        fontSize: 12
      },
      bullet: {},
      li: (_li = {}, babelHelpers.defineProperty(_li, _theme.INCLUDE, ['textBlock']), babelHelpers.defineProperty(_li, 'container', {
        '.block': {
          marginBottom: 10
        }
      }), _li),

      section: {},
      header: {},
      content: {},
      article: {},
      footer: {},

      video: {
        container: {
          width: 300,
          resizeMode: 'contain',
          alignSelf: 'center',
          marginBottom: 20
        }
      },
      img: {
        resizeMode: 'contain',
        alignSelf: 'center',
        marginBottom: 20,

        width: 300
      }
    },

    'shoutem.ui.Video': {
      container: {
        backgroundColor: variables.paperColor,
        flex: 1,
        height: 240
      }
    },

    'shoutem.ui.HorizontalPager': {
      container: {
        flexGrow: 1
      },
      scrollView: {
        flexGrow: 1,
        backgroundColor: 'transparent',
        overflow: 'scroll'
      },
      page: {
        flexGrow: 1,
        backgroundColor: 'transparent'
      },
      nextPageInsetSize: 20
    },

    'shoutem.ui.PageIndicators': {
      '.overlay-bottom': {
        container: {
          backgroundGradient: {
            colors: ['rgba(0, 0, 0, 0.0)', 'rgba(0, 0, 0, 0.25)']
          },
          paddingVertical: 8,
          position: 'absolute',
          bottom: 0,
          left: 0,
          right: 0
        },

        indicatorContainer: {
          'shoutem.ui.View': {
            backgroundColor: '#ffffff',

            '.selected': {
              backgroundColor: (0, _theme.changeColorAlpha)('#ffffff', 0.7)
            }
          }
        }
      },

      container: {
        flexDirection: 'row',
        alignItems: 'center',
        justifyContent: 'center',
        position: 'absolute',
        left: 0,
        right: 0,
        bottom: 10
      },
      indicatorContainer: {
        alignItems: 'center',
        'shoutem.ui.View': {
          width: variables.galleryDotSize,
          height: variables.galleryDotSize,
          borderRadius: variables.galleryDotSize / 2,

          backgroundColor: (0, _theme.changeColorAlpha)(variables.indicatorColor, 0.7),
          marginLeft: variables.galleryDotSize / 2,
          marginRight: variables.galleryDotSize / 2,
          '.selected': {
            backgroundColor: variables.indicatorColor
          }
        }
      }
    },

    'shoutem.ui.InlineGallery': {
      '.large-wide': {
        container: {
          height: dimensionRelativeToIphone(238)
        }
      },

      '.large-ultra-wide': {
        container: {
          height: dimensionRelativeToIphone(130)
        }
      },

      container: {
        height: dimensionRelativeToIphone(345)
      },

      imageContainer: {},

      image: {},

      pager: {
        pageMargin: 20
      }
    },

    'shoutem.ui.ImageGallery': (_shoutemUiImageGall = {}, babelHelpers.defineProperty(_shoutemUiImageGall, _theme.INCLUDE, ['guttersPadding']), babelHelpers.defineProperty(_shoutemUiImageGall, 'pageMargin', 20), babelHelpers.defineProperty(_shoutemUiImageGall, 'container', {
      flexGrow: 1,
      backgroundColor: '#000000',
      lightsOffAnimation: function lightsOffAnimation(driver) {
        return {
          backgroundColor: driver.interpolate({
            inputRange: [0, 1],
            outputRange: [variables.paperColor, '#000000']
          })
        };
      }
    }), babelHelpers.defineProperty(_shoutemUiImageGall, 'page', {
      flexGrow: 1,
      justifyContent: 'center',
      overflow: 'hidden'
    }), _shoutemUiImageGall),

    'shoutem.ui.ImageGalleryOverlay': {
      '.full-screen': {
        title: {
          container: {
            paddingTop: NAVIGATION_BAR_HEIGHT + variables.mediumGutter
          }
        }
      },

      container: babelHelpers.defineProperty({}, _theme.INCLUDE, ['fillParent']),
      title: {
        container: {
          position: 'absolute',
          top: 0,
          left: 0,
          right: 0,
          paddingTop: variables.mediumGutter,
          paddingHorizontal: variables.mediumGutter,

          backgroundGradient: {
            colors: ['rgba(0, 0, 0, 0.6)', 'rgba(0, 0, 0, 0.0)'],
            locations: [0.17, 1.0]
          }
        },
        text: {
          color: variables.imageOverlayTextColor,
          textAlign: 'center'
        }
      },
      description: {
        container: {
          '.expanded': {
            paddingTop: variables.extraLargeGutter,

            backgroundGradient: {
              colors: ['rgba(0, 0, 0, 0.0)', 'rgba(0, 0, 0, 0.8)'],
              locations: [0.36, 1.0]
            }
          },
          '.collapsed': {
            paddingTop: variables.mediumGutter,

            backgroundGradient: {
              colors: ['rgba(0, 0, 0, 0.0)', 'rgba(0, 0, 0, 0.6)'],
              locations: [0.02, 1.0]
            }
          },

          position: 'absolute',
          bottom: 0,
          left: 0,
          right: 0
        },

        scroll: {
          maxHeight: 200,
          padding: variables.mediumGutter
        },
        text: {
          color: variables.imageOverlayTextColor,
          textAlign: 'center'
        }
      }
    },

    'shoutem.ui.ImagePreview': {
      container: {
        flex: 1,
        backgroundColor: 'transparent'
      },
      fullScreenContainer: {
        flex: 1,
        backgroundColor: 'black'
      },
      image: {
        flex: 1
      },
      thumbnail: {},
      header: {
        position: 'absolute',
        top: STATUS_BAR_OFFSET,
        left: 0,
        backgroundColor: 'transparent'
      },
      closeIcon: {
        color: 'white',
        marginLeft: 15,
        marginTop: -STATUS_BAR_OFFSET + 20
      }
    },

    'shoutem.ui.MapView': {
      flex: 1
    },

    'shoutem.ui.InlineMap': (_shoutemUiInlineMap = {}, babelHelpers.defineProperty(_shoutemUiInlineMap, _theme.INCLUDE, ['imageSizes']), babelHelpers.defineProperty(_shoutemUiInlineMap, '.top-aligned', {
      justifyContent: 'flex-start'
    }), babelHelpers.defineProperty(_shoutemUiInlineMap, '.bottom-aligned', {
      justifyContent: 'flex-end'
    }), babelHelpers.defineProperty(_shoutemUiInlineMap, '.medium-tall', {
      height: 160
    }), babelHelpers.defineProperty(_shoutemUiInlineMap, 'shoutem.ui.View', {
      'shoutem.ui.View': babelHelpers.defineProperty({
        'shoutem.ui.View': {
          backgroundColor: variables.imageOverlayColor,
          'shoutem.ui.Heading': {
            color: variables.imageOverlayTextColor,
            marginVertical: 8
          },

          'shoutem.ui.Title': {
            color: variables.imageOverlayTextColor,
            marginVertical: 12
          },

          'shoutem.ui.Subtitle': {
            color: variables.imageOverlayTextColor,
            marginTop: 80
          },

          'shoutem.ui.Caption': {
            color: variables.imageOverlayTextColor,
            marginTop: 5
          },

          'shoutem.ui.Text': {
            color: variables.imageOverlayTextColor
          }
        }

      }, _theme.INCLUDE, ['fillParent'])
    }), babelHelpers.defineProperty(_shoutemUiInlineMap, _theme.INCLUDE, ['commonVariants']), babelHelpers.defineProperty(_shoutemUiInlineMap, 'flex', 0), _shoutemUiInlineMap),

    'shoutem.ui.LinearGradient': {
      '.fill-parent': babelHelpers.defineProperty({}, _theme.INCLUDE, ['fillParent'])
    },

    'shoutem.ui.Lightbox': {
      'shoutem.ui.Image': {
        '.preview': {
          flex: 1,
          resizeMode: 'contain'
        }
      }
    }
  };
};