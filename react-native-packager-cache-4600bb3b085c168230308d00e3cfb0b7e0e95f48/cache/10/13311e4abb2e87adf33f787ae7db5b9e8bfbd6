Object.defineProperty(exports,"__esModule",{value:true});exports.




















isText=isText;exports.




removeWhiteSpace=removeWhiteSpace;exports.



decodeHtmlEntities=decodeHtmlEntities;exports.



TextElement=TextElement;var _react=require("react");var _react2=babelHelpers.interopRequireDefault(_react);var _reactNative=require("react-native");var _lodash=require("lodash");var _lodash2=babelHelpers.interopRequireDefault(_lodash);var _htmlEntities=require("html-entities");var _Html=require("../Html");var html=new _htmlEntities.AllHtmlEntities();function isWhiteSpaceWrappedWithText(element){return _lodash2.default.size(element.childElements)===1&&isWhiteSpaceString(element.childElements[0]);}function isWhiteSpaceString(element){return _lodash2.default.isString(element)&&element.trim().length===0;}function isWhiteSpace(element){return isWhiteSpaceString(element)||isWhiteSpaceWrappedWithText(element);}function isText(element){var elementTag=_lodash2.default.get(element,'tag');return _lodash2.default.isString(element)||elementTag==='text';}function removeWhiteSpace(childElements){return childElements.filter(function(child){return!isWhiteSpace(child);});}function decodeHtmlEntities(childElements){return _lodash2.default.map(childElements,function(element){return _lodash2.default.isString(element)?html.decode(element):element;});}function TextElement(props){
// Remove empty white space lines used just to move element in new line.
// Use "p" or "br" to add new line.
var textualChildElements=decodeHtmlEntities(removeWhiteSpace(props.childElements));

if(textualChildElements.length===0){
// Even if there is no children to render, the Text must be rendered
// because otherwise RN may render a View to wrap a "null" which may lead to
// a case where a View is in the Text.
return _react2.default.createElement(_reactNative.Text,{style:{height:0}});
}

// Must be the RN Text so that style inheritance chain
// doesn't break with additional layer.
return _react2.default.createElement(_reactNative.Text,props,textualChildElements);
}

TextElement.propTypes=babelHelpers.extends({},_Html.ElementPropTypes);exports.default=



(0,_Html.combineMappers)(_Html.mapElementProps)(TextElement);