["c56185dee004b1d6d8e357bcf53e58593e144517","ac2a7747f5c98d69490bb21a9095c0c4f03bb619",["react-native"],[22],{"version":3,"sources":["/home/ziddi/Desktop/Bhupesh/venders/node_modules/react-native-elements/src/helpers/normalizeText.js"],"names":["React","require","PixelRatio","Dimensions","pixelRatio","get","deviceHeight","height","deviceWidth","width","normalize","size","module","exports"],"mappings":";;AAWA,IAAMA,QAAQC,OAAR,gBAAN,C,IACQC,U,GAA2BF,K,CAA3BE,U;IAAYC,U,GAAeH,K,CAAfG,U;;;AAEpB,IAAMC,aAAaF,WAAWG,GAAX,EAAnB;AACA,IAAMC,eAAeH,WAAWE,GAAX,CAAe,QAAf,EAAyBE,MAA9C;AACA,IAAMC,cAAcL,WAAWE,GAAX,CAAe,QAAf,EAAyBI,KAA7C;;AAWA,IAAMC,YAAY,SAAZA,SAAY,OAAQ;AACxB,MAAIN,eAAe,CAAnB,EAAsB;AAEpB,QAAII,cAAc,GAAlB,EAAuB;AACrB,aAAOG,OAAO,IAAd;AACD;;AAED,QAAIL,eAAe,GAAnB,EAAwB;AACtB,aAAOK,IAAP;AAED,KAHD,MAGO,IAAIL,gBAAgB,GAAhB,IAAuBA,gBAAgB,GAA3C,EAAgD;AACrD,aAAOK,OAAO,IAAd;AACD;;AAED,WAAOA,OAAO,IAAd;AACD;AACD,MAAIP,eAAe,CAAnB,EAAsB;AAGpB,QAAII,eAAe,GAAnB,EAAwB;AACtB,aAAOG,IAAP;AACD;;AAED,QAAIL,eAAe,GAAnB,EAAwB;AACtB,aAAOK,OAAO,IAAd;AAGD;AACD,QAAIL,gBAAgB,GAAhB,IAAuBA,gBAAgB,GAA3C,EAAgD;AAC9C,aAAOK,OAAO,GAAd;AACD;;AAGD,WAAOA,OAAO,IAAd;AACD;AACD,MAAIP,eAAe,GAAnB,EAAwB;AAGtB,QAAII,eAAe,GAAnB,EAAwB;AACtB,aAAOG,IAAP;AAED;AACD,QAAIL,eAAe,GAAnB,EAAwB;AACtB,aAAOK,OAAO,IAAd;AAGD;AACD,QAAIL,gBAAgB,GAAhB,IAAuBA,gBAAgB,GAA3C,EAAgD;AAC9C,aAAOK,OAAO,IAAd;AACD;;AAED,WAAOA,OAAO,IAAd;AACD;;AAED,SAAOA,IAAP;AACD,CAvDD;;AAyDAC,OAAOC,OAAP,GAAiBH,SAAjB","sourcesContent":["//\n// Method to normalize size of fonts across devices\n//\n// Some code taken from https://jsfiddle.net/97ty7yjk/ &\n// https://stackoverflow.com/questions/34837342/font-size-on-iphone-6s-plus\n//\n// author: @xiaoneng\n// date: 14/10/2016\n// version: 03\n//\n\nconst React = require('react-native'); // eslint-disable-line no-undef\nconst { PixelRatio, Dimensions } = React;\n\nconst pixelRatio = PixelRatio.get();\nconst deviceHeight = Dimensions.get('window').height;\nconst deviceWidth = Dimensions.get('window').width;\n\n// -- Testing Only --\n// const fontScale = PixelRatio.getFontScale();\n// const layoutSize = PixelRatio.getPixelSizeForLayoutSize(14);\n// console.log('normalizeText getPR ->', pixelRatio);\n// console.log('normalizeText getFS ->', fontScale);\n// console.log('normalizeText getDH ->', deviceHeight);\n// console.log('normalizeText getDW ->', deviceWidth);\n// console.log('normalizeText getPSFLS ->', layoutSize);\n\nconst normalize = size => {\n  if (pixelRatio === 2) {\n    // iphone 5s and older Androids\n    if (deviceWidth < 360) {\n      return size * 0.95;\n    }\n    // iphone 5\n    if (deviceHeight < 667) {\n      return size;\n      // iphone 6-6s\n    } else if (deviceHeight >= 667 && deviceHeight <= 735) {\n      return size * 1.15;\n    }\n    // older phablets\n    return size * 1.25;\n  }\n  if (pixelRatio === 3) {\n    // catch Android font scaling on small machines\n    // where pixel ratio / font scale ratio => 3:3\n    if (deviceWidth <= 360) {\n      return size;\n    }\n    // Catch other weird android width sizings\n    if (deviceHeight < 667) {\n      return size * 1.15;\n      // catch in-between size Androids and scale font up\n      // a tad but not too much\n    }\n    if (deviceHeight >= 667 && deviceHeight <= 735) {\n      return size * 1.2;\n    }\n    // catch larger devices\n    // ie iphone 6s plus / 7 plus / mi note 等等\n    return size * 1.27;\n  }\n  if (pixelRatio === 3.5) {\n    // catch Android font scaling on small machines\n    // where pixel ratio / font scale ratio => 3:3\n    if (deviceWidth <= 360) {\n      return size;\n      // Catch other smaller android height sizings\n    }\n    if (deviceHeight < 667) {\n      return size * 1.20;\n      // catch in-between size Androids and scale font up\n      // a tad but not too much\n    }\n    if (deviceHeight >= 667 && deviceHeight <= 735) {\n      return size * 1.25;\n    }\n    // catch larger phablet devices\n    return size * 1.40;\n  }\n  // if older device ie pixelRatio !== 2 || 3 || 3.5\n  return size;\n};\n\nmodule.exports = normalize; // eslint-disable-line no-undef\n"]}]