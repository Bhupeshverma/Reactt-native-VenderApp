["204f3e193f3147f9966bff836a01b35ed7cdc5df","59036037fd92cd3e882ba9c09fd4f6fc3380d883",["react","lodash","@shoutem/theme","./View","./TouchableOpacity","./Image","./HorizontalPager/HorizontalPager","./LoadingIndicator"],[142,234,328,368,412,457,501,572],{"version":3,"sources":["/home/ziddi/Desktop/Bhupesh/venders/node_modules/@shoutem/ui/components/InlineGallery.js"],"names":["InlineGallery","props","renderPage","bind","onPress","onIndexSelected","state","selectedIndex","showNextPage","newIndex","setState","isFunction","pageData","pageIndex","style","source","get","imageContainer","uri","image","data","renderOverlay","renderPlaceholder","container","pager","pageMargin","propTypes","arrayOf","shape","PropTypes","string","isRequired","func","number","object","bool","defaultProps","StyledInlineGallery"],"mappings":"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","sourcesContent":["import React, { Component, PropTypes } from 'react';\n\nimport _ from 'lodash';\nimport { connectStyle } from '@shoutem/theme';\n\nimport { View } from './View';\nimport { TouchableOpacity } from './TouchableOpacity';\nimport { Image } from './Image';\nimport { HorizontalPager } from './HorizontalPager/HorizontalPager';\nimport { LoadingIndicator } from './LoadingIndicator';\n\nclass InlineGallery extends Component {\n  static propTypes = {\n    // Array containing objects with image data (shape defined below)\n    data: PropTypes.arrayOf(\n      PropTypes.shape({\n        source: React.PropTypes.shape({\n          uri: React.PropTypes.string,\n        }),\n      }),\n    ).isRequired,\n    // Callback function called when user taps on single item (image) in gallery\n    onPress: PropTypes.func,\n    // Callback function called when user swipes between pages (images)\n    // Index of new (selected) page is passed to this callback\n    onIndexSelected: PropTypes.func,\n    // Initially selected page in gallery\n    selectedIndex: PropTypes.number,\n    // Style, applied to Image component\n    style: PropTypes.object,\n    // Prop that reduces page size by pageMargin, allowing 'sneak peak' of next page\n    // Defaults to false\n    showNextPage: PropTypes.bool,\n    // Callback function that can be used to render overlay over pages\n    // For example page indicators using `PageIndicators` component\n    // renderOverlay(imageData, imageIndex)\n    renderOverlay: PropTypes.func,\n    // Callback function that can be used to define placeholder\n    // that appears when content is loading\n    renderPlaceholder: PropTypes.func,\n  };\n\n  static defaultProps = {\n    renderPlaceholder: () => (<LoadingIndicator />),\n  };\n\n  constructor(props) {\n    super(props);\n    this.renderPage = this.renderPage.bind(this);\n    this.onPress = this.onPress.bind(this);\n    this.onIndexSelected = this.onIndexSelected.bind(this);\n    this.state = {\n      selectedIndex: 0,\n      showNextPage: this.props.showNextPage || false,\n    };\n  }\n\n  onPress() {\n    const { onPress } = this.props;\n\n    return onPress && onPress();\n  }\n\n  onIndexSelected(newIndex) {\n    const { selectedIndex } = this.state;\n    const { onIndexSelected } = this.props;\n\n    if (selectedIndex !== newIndex) {\n      this.setState({ selectedIndex: newIndex });\n      if (_.isFunction(onIndexSelected)) {\n        onIndexSelected(newIndex);\n      }\n    }\n  }\n\n  renderPage(pageData, pageIndex) {\n    const { style, onPress } = this.props;\n    const source = _.get(pageData, 'source.uri');\n\n    if (!source) {\n      return null;\n    }\n\n    return (\n      <TouchableOpacity\n        onPress={this.onPress}\n        key={pageIndex}\n        styleName=\"flexible\"\n        style={style.imageContainer}\n        disabled={!onPress}\n      >\n        <Image\n          source={{ uri: source }}\n          style={style.image}\n          styleName=\"flexible\"\n        />\n      </TouchableOpacity>\n    );\n  }\n\n  render() {\n    const { data, selectedIndex, renderOverlay, renderPlaceholder, style } = this.props;\n    const { showNextPage } = this.state;\n\n    return (\n      <View\n        renderToHardwareTextureAndroid\n        style={style.container}\n      >\n        <HorizontalPager\n          data={data}\n          onIndexSelected={this.onIndexSelected}\n          selectedIndex={selectedIndex}\n          renderPage={this.renderPage}\n          pageMargin={style.pager.pageMargin}\n          showNextPage={showNextPage}\n          renderOverlay={renderOverlay}\n          renderPlaceholder={renderPlaceholder}\n        />\n      </View>\n    );\n  }\n}\n\nconst StyledInlineGallery = connectStyle('shoutem.ui.InlineGallery')(InlineGallery);\n\nexport {\n  StyledInlineGallery as InlineGallery,\n};\n"]}]