["67716eefefb31194586bc0d42be885d075341230","d2e7078e4f35268f20461097bfede6847c6bd206",["react","prop-types","react-native","./TabViewPropTypes"],[136,231,341,391],{"version":3,"sources":["/home/ziddi/Desktop/Bhupesh/venders/node_modules/react-navigation/node_modules/react-native-tab-view/src/TabViewPagerAndroid.js"],"names":["TabViewPagerAndroid","props","_isIdle","_currentIndex","_getPageIndex","index","isRTL","navigationState","routes","length","_setPage","_viewPager","page","animationEnabled","setPage","setPageWithoutAnimation","_handlePageChange","_handlePageScroll","e","position","setValue","nativeEvent","offset","_handlePageScrollStateChanged","jumpToIndex","_handlePageSelected","_setRef","el","_resetListener","subscribe","nextProps","layout","count","children","global","requestAnimationFrame","remove","swipeEnabled","content","map","child","i","key","testID","styles","reverse","initialPage","container","propTypes","bool","node","create","flexGrow","overflow"],"mappings":";;;;;;;AAEA;;;;AACA;;;;AACA;;AACA;;IAkBqBA,mB;;;AASnB,+BAAYC,KAAZ,EAA6B;AAAA;;AAAA,sJACrBA,KADqB;;AAAA,UAqC7BC,OArC6B,GAqCV,IArCU;AAAA,UAsC7BC,aAtC6B,GAsCb,CAtCa;;AAAA,UAwC7BC,aAxC6B,GAwCb,UAACC,KAAD;AAAA,aACd,yBAAYC,KAAZ,GACI,MAAKL,KAAL,CAAWM,eAAX,CAA2BC,MAA3B,CAAkCC,MAAlC,IAA4CJ,QAAQ,CAApD,CADJ,GAEIA,KAHU;AAAA,KAxCa;;AAAA,UA6C7BK,QA7C6B,GA6ClB,UAACL,KAAD,EAAmB;AAC5B,UAAI,MAAKM,UAAT,EAAqB;AACnB,YAAMC,OAAO,MAAKR,aAAL,CAAmBC,KAAnB,CAAb;AACA,YAAI,MAAKJ,KAAL,CAAWY,gBAAX,KAAgC,KAApC,EAA2C;AACzC,gBAAKF,UAAL,CAAgBG,OAAhB,CAAwBF,IAAxB;AACD,SAFD,MAEO;AACL,gBAAKD,UAAL,CAAgBI,uBAAhB,CAAwCH,IAAxC;AACD;AACF;AACF,KAtD4B;;AAAA,UAwD7BI,iBAxD6B,GAwDT,UAACX,KAAD,EAAmB;AACrC,UAAI,MAAKH,OAAL,IAAgB,MAAKC,aAAL,KAAuBE,KAA3C,EAAkD;AAChD,cAAKK,QAAL,CAAcL,KAAd;AACA,cAAKF,aAAL,GAAqBE,KAArB;AACD;AACF,KA7D4B;;AAAA,UA+D7BY,iBA/D6B,GA+DT,UAACC,CAAD,EAAwB;AAC1C,YAAKjB,KAAL,CAAWkB,QAAX,CAAoBC,QAApB,CACE,MAAKhB,aAAL,CAAmBc,EAAEG,WAAF,CAAcF,QAAjC,IACED,EAAEG,WAAF,CAAcC,MAAd,IAAwB,yBAAYhB,KAAZ,GAAoB,CAAC,CAArB,GAAyB,CAAjD,CAFJ;AAID,KApE4B;;AAAA,UAsE7BiB,6BAtE6B,GAsEG,UAACL,CAAD,EAAwB;AACtD,YAAKhB,OAAL,GAAegB,MAAM,MAArB;AACA,YAAKjB,KAAL,CAAWuB,WAAX,CAAuB,MAAKrB,aAA5B;AACD,KAzE4B;;AAAA,UA2E7BsB,mBA3E6B,GA2EP,UAACP,CAAD,EAAwB;AAC5C,UAAMb,QAAQ,MAAKD,aAAL,CAAmBc,EAAEG,WAAF,CAAcF,QAAjC,CAAd;AACA,YAAKhB,aAAL,GAAqBE,KAArB;AACD,KA9E4B;;AAAA,UAgF7BqB,OAhF6B,GAgFnB,UAACC,EAAD;AAAA,aAAiB,MAAKhB,UAAL,GAAkBgB,EAAnC;AAAA,KAhFmB;;AAE3B,UAAKxB,aAAL,GAAqB,MAAKF,KAAL,CAAWM,eAAX,CAA2BF,KAAhD;AAF2B;AAG5B;;;;wCAEmB;AAClB,WAAKuB,cAAL,GAAsB,KAAK3B,KAAL,CAAW4B,SAAX,CAAqB,OAArB,EAA8B,KAAKb,iBAAnC,CAAtB;AACD;;;8CAEyBc,S,EAAqB;AAAA;;AAC7C,UACE,KAAK7B,KAAL,CAAW8B,MAAX,KAAsBD,UAAUC,MAAhC,IACA,gBAASC,KAAT,CAAe,KAAK/B,KAAL,CAAWgC,QAA1B,MAAwC,gBAASD,KAAT,CAAeF,UAAUG,QAAzB,CAF1C,EAGE;AACAC,eAAOC,qBAAP,CAA6B,YAAM;AACjC,cAAI,OAAKxB,UAAT,EAAqB;AAAA,gBACXJ,eADW,GACSuB,SADT,CACXvB,eADW;;AAEnB,gBAAMK,OAAO,yBAAYN,KAAZ,GACTC,gBAAgBC,MAAhB,CAAuBC,MAAvB,IAAiCF,gBAAgBF,KAAhB,GAAwB,CAAzD,CADS,GAETE,gBAAgBF,KAFpB;;AAIA,mBAAKM,UAAL,CAAgBI,uBAAhB,CAAwCH,IAAxC;AACD;AACF,SATD;AAUD;AACF;;;yCAEoB;AACnB,WAAKI,iBAAL,CAAuB,KAAKf,KAAL,CAAWM,eAAX,CAA2BF,KAAlD;AACD;;;2CAEsB;AACrB,WAAKuB,cAAL,CAAoBQ,MAApB;AACD;;;6BAiDQ;AAAA,mBAC6C,KAAKnC,KADlD;AAAA,UACCgC,QADD,UACCA,QADD;AAAA,UACW1B,eADX,UACWA,eADX;AAAA,UAC4B8B,YAD5B,UAC4BA,YAD5B;;AAEP,UAAMC,UAAU,gBAASC,GAAT,CAAaN,QAAb,EAAuB,UAACO,KAAD,EAAQC,CAAR;AAAA,eACrC;AAAA;AAAA;AACE,iBAAKlC,gBAAgBC,MAAhB,CAAuBiC,CAAvB,EAA0BC,GADjC;AAEE,oBAAQnC,gBAAgBC,MAAhB,CAAuBiC,CAAvB,EAA0BE,MAFpC;AAGE,mBAAOC,OAAOhC;AAHhB;AAKG4B;AALH,SADqC;AAAA,OAAvB,CAAhB;;AAUA,UAAI,yBAAYlC,KAAhB,EAAuB;AACrBgC,gBAAQO,OAAR;AACD;;AAED,UAAMC,cAAc,KAAK1C,aAAL,CAAmBG,gBAAgBF,KAAnC,CAApB;;AAEA,aACE;AAAA;AAAA;AACE,eAAKE,gBAAgBC,MAAhB,CAAuBC,MAD9B;AAEE,+BAAoB,SAFtB;AAGE,uBAAaqC,WAHf;AAIE,yBAAeT,iBAAiB,KAJlC;AAKE,wBAAc,KAAKpB,iBALrB;AAME,oCAA0B,KAAKM,6BANjC;AAOE,0BAAgB,KAAKE,mBAPvB;AAQE,iBAAOmB,OAAOG,SARhB;AASE,eAAK,KAAKrB;AATZ;AAWGY;AAXH,OADF;AAeD;;;gCA1HMU,S;AAELnC,oBAAkB,oBAAUoC,I;AAC5BZ,gBAAc,oBAAUY,I;AACxBhB,YAAU,oBAAUiB;;kBANHlD,mB;;;AA+HrB,IAAM4C,SAAS,wBAAWO,MAAX,CAAkB;AAC/BJ,aAAW;AACTK,cAAU;AADD,GADoB;;AAK/BxC,QAAM;AACJyC,cAAU;AADN;AALyB,CAAlB,CAAf","sourcesContent":["/* @flow */\n\nimport React, { PureComponent, Children } from 'react';\nimport PropTypes from 'prop-types';\nimport { View, ViewPagerAndroid, StyleSheet, I18nManager } from 'react-native';\nimport { SceneRendererPropType } from './TabViewPropTypes';\nimport type { SceneRendererProps, Route } from './TabViewTypeDefinitions';\n\ntype PageScrollEvent = {\n  nativeEvent: {\n    position: number,\n    offset: number,\n  },\n};\n\ntype PageScrollState = 'dragging' | 'settling' | 'idle';\n\ntype Props<T> = SceneRendererProps<T> & {\n  animationEnabled?: boolean,\n  swipeEnabled?: boolean,\n  children?: React.Element<any>,\n};\n\nexport default class TabViewPagerAndroid<T: Route<*>>\n  extends PureComponent<void, Props<T>, void> {\n  static propTypes = {\n    ...SceneRendererPropType,\n    animationEnabled: PropTypes.bool,\n    swipeEnabled: PropTypes.bool,\n    children: PropTypes.node,\n  };\n\n  constructor(props: Props<T>) {\n    super(props);\n    this._currentIndex = this.props.navigationState.index;\n  }\n\n  componentDidMount() {\n    this._resetListener = this.props.subscribe('reset', this._handlePageChange);\n  }\n\n  componentWillReceiveProps(nextProps: Props<T>) {\n    if (\n      this.props.layout !== nextProps.layout ||\n      Children.count(this.props.children) !== Children.count(nextProps.children)\n    ) {\n      global.requestAnimationFrame(() => {\n        if (this._viewPager) {\n          const { navigationState } = nextProps;\n          const page = I18nManager.isRTL\n            ? navigationState.routes.length - (navigationState.index + 1)\n            : navigationState.index;\n\n          this._viewPager.setPageWithoutAnimation(page);\n        }\n      });\n    }\n  }\n\n  componentDidUpdate() {\n    this._handlePageChange(this.props.navigationState.index);\n  }\n\n  componentWillUnmount() {\n    this._resetListener.remove();\n  }\n\n  _resetListener: Object;\n  _viewPager: Object;\n  _isIdle: boolean = true;\n  _currentIndex = 0;\n\n  _getPageIndex = (index: number) =>\n    I18nManager.isRTL\n      ? this.props.navigationState.routes.length - (index + 1)\n      : index;\n\n  _setPage = (index: number) => {\n    if (this._viewPager) {\n      const page = this._getPageIndex(index);\n      if (this.props.animationEnabled !== false) {\n        this._viewPager.setPage(page);\n      } else {\n        this._viewPager.setPageWithoutAnimation(page);\n      }\n    }\n  };\n\n  _handlePageChange = (index: number) => {\n    if (this._isIdle && this._currentIndex !== index) {\n      this._setPage(index);\n      this._currentIndex = index;\n    }\n  };\n\n  _handlePageScroll = (e: PageScrollEvent) => {\n    this.props.position.setValue(\n      this._getPageIndex(e.nativeEvent.position) +\n        e.nativeEvent.offset * (I18nManager.isRTL ? -1 : 1),\n    );\n  };\n\n  _handlePageScrollStateChanged = (e: PageScrollState) => {\n    this._isIdle = e === 'idle';\n    this.props.jumpToIndex(this._currentIndex);\n  };\n\n  _handlePageSelected = (e: PageScrollEvent) => {\n    const index = this._getPageIndex(e.nativeEvent.position);\n    this._currentIndex = index;\n  };\n\n  _setRef = (el: Object) => (this._viewPager = el);\n\n  render() {\n    const { children, navigationState, swipeEnabled } = this.props;\n    const content = Children.map(children, (child, i) => (\n      <View\n        key={navigationState.routes[i].key}\n        testID={navigationState.routes[i].testID}\n        style={styles.page}\n      >\n        {child}\n      </View>\n    ));\n\n    if (I18nManager.isRTL) {\n      content.reverse();\n    }\n\n    const initialPage = this._getPageIndex(navigationState.index);\n\n    return (\n      <ViewPagerAndroid\n        key={navigationState.routes.length}\n        keyboardDismissMode=\"on-drag\"\n        initialPage={initialPage}\n        scrollEnabled={swipeEnabled !== false}\n        onPageScroll={this._handlePageScroll}\n        onPageScrollStateChanged={this._handlePageScrollStateChanged}\n        onPageSelected={this._handlePageSelected}\n        style={styles.container}\n        ref={this._setRef}\n      >\n        {content}\n      </ViewPagerAndroid>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flexGrow: 1,\n  },\n\n  page: {\n    overflow: 'hidden',\n  },\n});\n"]}]