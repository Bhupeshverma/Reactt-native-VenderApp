["c174d1b838b7aff8489da8c07ac6c0e53ec91b05","4a000519db574207d8a516d49beeb91e8bf3d1dc",["lodash"],[289],{"version":3,"sources":["/home/ziddi/Desktop/Bhupesh/venders/node_modules/@shoutem/ui/html/services/ElementRegistry.js"],"names":["registerElement","getElement","getElementProperty","getElementDisplay","ElementRegistry","Display","INLINE","BLOCK","elementTag","elementClass","element","tag","property","get","display","console","warn","isFunction"],"mappings":";;;;QAkBgBA,e,GAAAA,e;QAIAC,U,GAAAA,U;QAKAC,kB,GAAAA,kB;QAIAC,iB,GAAAA,iB;;AA/BhB;;;;AAMA,IAAMC,kBAAkB,EAAxB;;AAOO,IAAMC,4BAAU;AACrBC,UAAQ,CADa;AAErBC,SAAO;AAFc,CAAhB;;AAKA,SAASP,eAAT,CAAyBQ,UAAzB,EAAqCC,YAArC,EAAmD;AACxDL,kBAAgBI,UAAhB,IAA8BC,YAA9B;AACD;;AAEM,SAASR,UAAT,CAAoBS,OAApB,EAA6B;AAAA,MAC1BC,GAD0B,GAClBD,OADkB,CAC1BC,GAD0B;;AAElC,SAAOP,gBAAgBO,GAAhB,CAAP;AACD;;AAEM,SAAST,kBAAT,CAA4BQ,OAA5B,EAAqCE,QAArC,EAA+C;AACpD,SAAO,iBAAEC,GAAF,CAAMZ,WAAWS,OAAX,CAAN,EAA2BE,QAA3B,CAAP;AACD;;AAEM,SAAST,iBAAT,CAA2BO,OAA3B,EAAoC;AACzC,MAAMD,eAAeR,WAAWS,OAAX,CAArB;AACA,MAAI,CAACD,YAAL,EAAmB;AAEjB;AACD;;AAED,MAAMK,UAAUL,aAAaK,OAA7B;AACA,MAAI,CAACA,OAAL,EAAc;AACZC,YAAQC,IAAR,cAAwBN,QAAQC,GAAhC;AACD;;AAED,SAAO,iBAAEM,UAAF,CAAaH,OAAb,IAAwBA,QAAQJ,OAAR,CAAxB,GAA2CI,OAAlD;AACD","sourcesContent":["import _ from 'lodash';\n\n/**\n * Contains RN element class (description) for corresponding element tag.\n * @type {{ elementTag: { display } }} - elementTag: ElementClass\n */\nconst ElementRegistry = {};\n\n/**\n * HTML elements have different display settings that affect React Native composition.\n * Use INLINE display for Text components that are stacked horizontally.\n * Use BLOCK display for any components that are stacked vertically.\n */\nexport const Display = {\n  INLINE: 1,\n  BLOCK: 2,\n};\n\nexport function registerElement(elementTag, elementClass) {\n  ElementRegistry[elementTag] = elementClass;\n}\n\nexport function getElement(element) {\n  const { tag } = element;\n  return ElementRegistry[tag];\n}\n\nexport function getElementProperty(element, property) {\n  return _.get(getElement(element), property);\n}\n\nexport function getElementDisplay(element) {\n  const elementClass = getElement(element);\n  if (!elementClass) {\n    // Element is not registered.\n    return;\n  }\n\n  const display = elementClass.display;\n  if (!display) {\n    console.warn(`Element ${element.tag} doesn't have defined \"display\" attribute.`);\n  }\n\n  return _.isFunction(display) ? display(element) : display;\n}\n"]}]